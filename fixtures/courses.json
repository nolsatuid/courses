[{"model": "courses.courses", "pk": 4, "fields": {"title": "OpenStack Beginner", "slug": "openstack-beginner", "short_description": "<p>Open stack adalah</p>", "description": "<p>Open stack adalah</p>", "short_description_md": "coba makrdown", "description_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "featured_image": "images/OpenStack_Logo_2016.svg.png", "level": 2, "is_visible": true, "is_allowed": false, "author": 4, "status": 2, "vendor": null, "users": [], "quizzes": [1, 2, 3, 4]}}, {"model": "courses.courses", "pk": 5, "fields": {"title": "Django Relationship Model", "slug": "django-relationship-model", "short_description": "", "description": "", "short_description_md": "django adalah .....", "description_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "featured_image": "images/django-logo-negative.png", "level": 1, "is_visible": true, "is_allowed": false, "author": 4, "status": 2, "vendor": 1, "users": [], "quizzes": []}}, {"model": "courses.courses", "pk": 7, "fields": {"title": "Red Hat System Administration I", "slug": "rh124", "short_description": "", "description": "", "short_description_md": "RH124", "description_md": "## Course description\r\n\r\n**The first of two courses covering the core system administration tasks needed to manage Red Hat Enterprise Linux servers**\r\n\r\nRed Hat System Administration I (RH124) equips you with Linux\u00ae administration \"survival skills\" by focusing on foundational Linux concepts and core tasks. You will learn how to apply command-line concepts and enterprise-level tools, starting you on your journey toward becoming a full-time Linux system administrator. This path continues with the follow-on course, [Red Hat System Administration II (RH134)](https://www.redhat.com/en/services/training/rh134-red-hat-system-administration-ii).\r\n\r\nThis course is based on Red Hat\u00ae Enterprise Linux 8.\r\n\r\n### Course content summary\r\n\r\n-   Introduction to the command line\r\n-   Managing physical storage\r\n-   Install and configure software components and services\r\n-   Establish network connections and control firewall restrictions\r\n-   Monitor and manage running processes\r\n-   Manage and secure files and file systems\r\n-   Administer users and groups\r\n-   Review the system log files and journal for issues\r\n-   Troubleshoot problems and analyze systems with Red Hat Insights\r\n-   Remotely manage systems with SSH and the Web Console\r\n\r\n### Audience for this course\r\n\r\nThis course is geared toward Windows system administrators, network administrators, and other system administrators who are interested in supplementing current skills or backstopping other team members, in addition to Linux system administrators who are responsible for these tasks:\r\n\r\n-   Configuring, installing, upgrading, and maintaining Linux systems using established standards and procedures\r\n-   Providing operational support\r\n-   Managing systems for monitoring system performance and availability\r\n-   Writing and deploying scripts for task automation and system administration\r\n\r\n### Prerequisites for this course\r\n\r\nBasic technical user skills with computer applications on some operating systems are expected.", "featured_image": "images/red-hat-logo-hat-sample_1.png", "level": 1, "is_visible": true, "is_allowed": true, "author": 4, "status": 2, "vendor": null, "users": [], "quizzes": []}}, {"model": "courses.module", "pk": 5, "fields": {"title": "Modul 1", "slug": "modul-1", "description": "<p>Module pertemuan 1, ini pengennya gak bisa di copy</p>", "description_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "order": 1, "is_visible": true, "course": 4, "show_all_sections": false, "draft": false}}, {"model": "courses.module", "pk": 6, "fields": {"title": "Modul 2", "slug": "modul-2", "description": "<p>module 2</p>", "description_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "order": 2, "is_visible": false, "course": 4, "show_all_sections": false, "draft": false}}, {"model": "courses.module", "pk": 7, "fields": {"title": "Modul 1 Pekenalan Django", "slug": "modul-1-pekenalan-django", "description": "", "description_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\n![](/media/markdownx/36b4f33c-6ef7-4307-a693-db4550dfb5ce.png)\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "order": 1, "is_visible": true, "course": 5, "show_all_sections": false, "draft": false}}, {"model": "courses.module", "pk": 26, "fields": {"title": "INTRODUCTION", "slug": "introduction", "description": "", "description_md": "*Red Hat System Administration I* (RH124) is designed for IT professionals without previous Linux system administration experience. The course is intended to provide students with Linux administration \"survival skills\" by focusing on core administration tasks. *Red Hat System Administration I* also provides a foundation for students planning to become full-time Linux system administrators by introducing key command-line concepts and enterprise-level tools. These concepts are further developed in the follow-on course, *Red Hat System Administration II* (RH134).\r\n  \r\n**COURSE  OBJECTIVES**    \r\n\r\n* Gain sufficient skill to perform core system administration tasks on Red Hat Enterprise Linux.\r\n* Build foundational skills needed by an RHCSA certified Red Hat Enterprise Linux system administrator.  \r\n  \r\n**AUDIENCE**  \r\n\r\n* IT professionals across a broad range of  disciplines who need to perform essential Linux administration tasks, including installation, establishing network connectivity, managing physical storage and basic security administration.  \r\n  \r\n**PREREQUISITES**  \r\n\r\n* There are no formal prerequisites for this course; however, previous system administration experience on other operating systems will be very beneficial.", "order": 1, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 27, "fields": {"title": "GETTING STARTED WITH RED HAT ENTERPRISE LINUX", "slug": "getting-started-redhat-linux", "description": "", "description_md": "**GOAL**\r\n\r\nDescribe and define open source, Linux, Linux distributions, and Red Hat Enterprise Linux.\r\n\r\n**OBJECTIVES**\r\n\r\n-   Define and explain the purpose of Linux, open source, Linux distributions, and Red Hat Enterprise Linux.\r\n    \r\n**SECTIONS**\r\n\r\n-   What is Linux?\r\n    \r\n**QUIZ**\r\n\r\n-  Getting Started with Red Hat Enterprise Linux", "order": 2, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 28, "fields": {"title": "ACCESSING THE COMMAND LINE", "slug": "accessing-command-line", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nLog in to a Linux system and run simple commands using the shell\r\n\r\n**Objectives**\r\n\r\n-  Log in to a Linux system on a local text console and run simple commands using the shell.\r\n- Log in to a Linux system using the GNOME 3 desktop environment and run commands from a shell prompt in a terminal program.\r\n- Save time by using tab completion, command history, and command editing shortcuts to run commands in the Bash shell.\r\n    \r\n**Sections**\r\n\r\n- Accessing the Command Line (and Quiz)\r\n\u2022 Accessing the Command Line Using the Desktop (and Guided Exercise)\r\n\u2022 Executing Commands Using the Bash Shell (and Quiz)\r\n    \r\n**Lab**\r\n\r\n-  Accessing the Command Line", "order": 3, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 29, "fields": {"title": "MANAGING FILES FROM THE COMMAND LINE", "slug": "managing-files-from-command-line", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nCopy, move, create, delete, and organize files while working from the Bash shell.\r\n\r\n**Objectives**\r\n\r\n-  Describe how Linux organizes files, and the purposes of various directories in the filesystem hierarchy.\r\n- Specify the location of files relative to the current working directory and by absolute location, determine and change your working directory, and list the contents of directories.\r\n- Create, copy, move, and remove files and directories.\r\n- Make multiple file names reference the same file using hard links and symbolic (or \"soft\") links.\r\n- Efficiently run commands affecting many files by using pattern matching features of the Bash shell.\r\n    \r\n**Sections**\r\n\r\n- Describing Linux File-system Hierarchy Concepts (and Quiz)\r\n- Specifying Files by Name (and Quiz) \r\n- Managing Files Using Command-line Tools (and Guided Exercise)\r\n- Making Links Between Files (and Guided Exercise)\r\n- Matching File Names Using Shell Expansions (and Quiz)\r\n    \r\n**Lab**\r\n\r\n-  Managing Files from the Command Line", "order": 4, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 30, "fields": {"title": "GETTING HELP IN RED HAT ENTERPRISE LINUX", "slug": "getting-help", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nResolve problems by using local help systems.\r\n\r\n**Objectives**\r\n\r\n- Find information in local Linux system manual pages.\r\n- Find information from local documentation in GNU Info.\r\n    \r\n**Sections**\r\n\r\n- Reading Manual Pages (and Guided Exercise)\r\n- Reading Info Documentation (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Getting Help in Red Hat Enterprise Linux", "order": 5, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 31, "fields": {"title": "CREATING, VIEWING, AND EDITING TEXT FILES", "slug": "creating-viewing-editing-text", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nCreate, view, and edit text files from command output or in a text editor.\r\n\r\n**Objectives**\r\n\r\n-  Save command output or errors to a file with shell redirection, and process command output through multiple command-line programs with\r\npipes.\r\n- Create and edit text files using the vim editor.\r\n- Use shell variables to help run commands, and edit Bash startup scripts to set shell and environment variables to modify the behavior of the shell and programs run from the shell.\r\n    \r\n**Sections**\r\n\r\n-  Redirecting Output to a File or Program (and Quiz)\r\n- Editing Text Files from the Shell Prompt (and Guided Exercise)\r\n- Changing the Shell Environment (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Creating, Viewing, and Editing Text Files", "order": 6, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 32, "fields": {"title": "MANAGING LOCAL USERS AND GROUPS", "slug": "managing-local-user-group", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nCreate, manage, and delete local users and groups and administer local password policies.\r\n\r\n**Objectives**\r\n\r\n-  Describe the purpose of users and groups on a Linux system.\r\n-  Switch to the superuser account to manage a Linux system, and grant other users superuser access using the sudo command.\r\n-  Create, modify, and delete locally defined user accounts.\r\n-  Create, modify, and delete locally defined group accounts.\r\n-  Set a password management policy for users, and manually lock and unlock user accounts.\r\n    \r\n**Sections**\r\n\r\n- Describing Users and Groups Concepts (and Quiz)\r\n- Gaining Superuser Access (and Guided Exercise)\r\n- Managing Local User Accounts (and Guided Exercise)\r\n- Managing Local Group Accounts (and Guided Exercise)\r\n- Managing User Passwords (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Managing Local Linux Users and Groups", "order": 7, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 33, "fields": {"title": "CONTROLLING ACCESS TO FILES", "slug": "controlling-access-files", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nSet Linux file-system permissions on files and to interpret the security effects of different permission settings.\r\n\r\n**Objectives**\r\n\r\n- List the file system permissions on files and directories, and interpret the effect of those permissions on access by users and groups.\r\n- Change the permissions and ownership of files using command-line tools. \r\n- Control the default permissions of new files created by users, explain the effect of special permissions, and use special permissions and default permissions to set the group owner of files created in a particular directory.\r\n    \r\n**Sections**\r\n\r\n- Interpreting Linux File System Permissions (and Quiz)\r\n- Managing File System Permissions from the Command Line (and Guided Exercise)\r\n- Managing Default Permissions and File Access (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n- Controlling Access to Files", "order": 8, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 34, "fields": {"title": "MONITORING AND MANAGING LINUX PROCESSES", "slug": "monitoring-managing-linux-process", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nEvaluate and control processes running on a Red Hat Enterprise Linux system.\r\n\r\n**Objectives**\r\n\r\n- Get information about programs running on the system so that you can determine status, resource use, and ownership, so you can control them.\r\n- Use Bash job control to manage multiple processes started from the same terminal session.\r\n- Control and terminate processes that are not associated with your shell, and forcibly end user sessions and processes.\r\n- Describe what load average is and determine processes responsible for high resource use on a server.\r\n    \r\n**Sections**\r\n\r\n- Listing Processes (and Quiz)\r\n- Controlling Jobs (and Guided Exercise)\r\n- Killing Processes (and Guided Exercise)\r\n- Monitoring Process Activity (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Monitoring and Managing Linux Processes", "order": 9, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 35, "fields": {"title": "CONTROLLING SERVICES AND DAEMONS", "slug": "controlling-services-daemons", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nControl and monitor network services and system daemons using Systemd.\r\n\r\n**Objectives**\r\n\r\n- List system daemons and network services started by the systemd service and socket units.\r\n- Control system daemons and network services, using systemctl.\r\n    \r\n**Sections**\r\n\r\n- Identifying Automatically Started System Processes (and Guided Exercise)\r\n- Controlling System Services (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Controlling Services and Daemons", "order": 10, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 36, "fields": {"title": "CONFIGURING AND SECURING SSH", "slug": "configuring-securing-ssh", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nConfigure secure command-line service on remote systems, using OpenSSH.\r\n\r\n**Objectives**\r\n\r\n- Log in to a remote system and run commands using ssh.\r\n- Configure key-based authentication for a user account to log in to remote systems securely without a password.\r\n- Restrict direct logins as root and disable password-based authentication for the OpenSSH service.\r\n    \r\n**Sections**\r\n\r\n- Accessing the Remote Command Line with SSH (and Guided Exercise)\r\n- Configuring SSH Key-Based Authentication (and Guided Exercise)\r\n- Customizing OpenSSH Service Configuration (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n- Configuring and Securing SSH", "order": 11, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 37, "fields": {"title": "ANALYZING AND STORING LOGS", "slug": "analyzing-storing-logs", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nLocate and accurately interpret logs of system events for troubleshooting purposes.\r\n\r\n**Objectives**\r\n\r\n- Describe the basic logging architecture used by Red Hat Enterprise Linux to record events.\r\n- Interpret events in relevant syslog files to troubleshoot problems or review system status.\r\n- Find and interpret entries in the system journal to troubleshoot problems or review system status.\r\n- Configure the system journal to preserve the record of events when a server is rebooted.\r\n- Maintain accurate time synchronization using NTP and configure the time zone to ensure correct time stamps for events recorded by the system journal and logs.\r\n    \r\n**Sections**\r\n\r\n- Describing System Log Architecture (and Quiz)\r\n- Reviewing Syslog Files (and Guided Exercise) \r\n- Reviewing System Journal Entries (and Guided Exercise)\r\n- Preserving the System Journal (and Guided Exercise)\r\n- Maintaining Accurate Time (and Guided Exercise)\r\n\r\n    \r\n**Lab**\r\n\r\n-  Analyzing and Storing Logs", "order": 12, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 38, "fields": {"title": "MANAGING NETWORKING", "slug": "managing-networking", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nConfigure network interfaces and settings on Red Hat Enterprise Linux servers.\r\n\r\n**Objectives**\r\n\r\n-  Describe fundamental concepts of network addressing and routing for a server.\r\n- Test and inspect current network configuration with command-line utilities.\r\n- Manage network settings and devices using nmcli.\r\n- Modify network settings by editing configuration files.\r\n- Configure a server's static host name and its name resolution, and test the results.\r\n    \r\n**Sections**\r\n\r\n- Describing Networking Concepts (and Quiz)\r\n- Validating Network Configuration (and Guided Exercise)\r\n- Configuring Networking from the Command Line (and Guided Exercise)\r\n- Editing Network Configuration Files (and Guided Exercise)\r\n- Configuring Host Names and Name Resolution (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Managing Networking", "order": 13, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 39, "fields": {"title": "ARCHIVING AND TRANSFERRING FILES", "slug": "archiving-transferring-files", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nArchive and copy files from one system to another.\r\n\r\n**Objectives**\r\n\r\n-  Archive files and directories into a compressed file using tar, and extract the contents of an existing tar archive.\r\n- Transfer files to or from a remote system securely using SSH.\r\n- Synchronize the contents of a local file or directory with a copy on a remote server.\r\n    \r\n**Sections**\r\n\r\n- Managing Compressed Tar Archives (and Guided Exercise)\r\n- Transferring Files Between Systems Securely (and Guided Exercise)\r\n- Synchronizing Files Between Systems Securely (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Archiving and Transferring Files", "order": 14, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 40, "fields": {"title": "INSTALLING AND UPDATING SOFTWARE PACKAGES", "slug": "installing-updating-software", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nDownload, install, update, and manage software packages from Red Hat and Yum package repositories.\r\n\r\n**Objectives**\r\n\r\n- Register a system to your Red Hat account and assign it entitlements for software updates and support services using Red Hat Subscription Management.\r\n- Explain how software is provided as RPM packages, and investigate the packages installed on the system with Yum and RPM.\r\n- Find, install, and update software packages using the yum command.\r\n- Enable and disable use of Red Hat or thirdparty Yum repositories by a server.\r\n- Explain how modules allow installation of specific versions of software, list, enable, and switch module streams, and install and update packages from a module.\r\n    \r\n**Sections**\r\n\r\n- Registering Systems for Red Hat Support (and Quiz)\r\n- Explaining and Investigating RPM Software Packages (and Quiz)\r\n- Installing and Updating Software Packages with Yum (and Guided Exercise)\r\n- Enabling Yum Software Repositories (and Guided Exercise)\r\n- Managing Package Module Streams (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n- Installing and Updating Software Packages", "order": 15, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 41, "fields": {"title": "ACCESSING LINUX FILE SYSTEMS", "slug": "accessing-linux-file-systems", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nAccess, inspect, and use existing file systems on storage attached to a Linux server.\r\n\r\n**Objectives**\r\n\r\n- Explain what a block device is, interpret the file names of storage devices, and identify the storage device used by the file system for a particular directory or file.\r\n- Access file systems by attaching them to a directory in the file system hierarchy.\r\n- Search for files on mounted file systems using the find and locate commands.\r\n    \r\n**Sections**\r\n\r\n- Identifying File Systems and Devices (and Quiz)\r\n- Mounting and Unmounting File Systems (and Guided Exercise)\r\n- Locating Files on the System (and Guided Exercise)\r\n    \r\n**Lab**\r\n\r\n-  Accessing Linux File Systems", "order": 16, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 42, "fields": {"title": "ANALYZING SERVERS AND GETTING SUPPORT", "slug": "analyzing-servers-getting-support", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nInvestigate and resolve issues in the web-based management interface, getting support from Red Hat to help solve problems.\r\n\r\n**Objectives**\r\n\r\n-  Activate the Web Console management interface to remotely manage and monitor the performance of a Red Hat Enterprise Linux server.\r\n- Describe key resources available through the Red Hat Customer Portal, and find information from Red Hat documentation and the Knowledgebase.\r\n- Analyze servers for issues, remediate or resolve them, and confirm the solution with Red Hat Insights\r\n    \r\n**Sections**\r\n\r\n- Analyzing and Managing Remote Servers (and Guided Exercise)\r\n\u2022 Getting Help from Red Hat Customer Portal (and Guided Exercise)\r\n\u2022 Detecting and Resolving Issues with Red Hat Insights (and Quiz)", "order": 17, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.module", "pk": 43, "fields": {"title": "COMPREHENSIVE REVIEW", "slug": "comprehensive-review", "description": "", "description_md": "## Overview\r\n\r\n**Goal**\r\n\r\nReview tasks from Red Hat System Administration I\r\n\r\n**Objectives**\r\n\r\n-  Review tasks from Red Hat System Administration I\r\n    \r\n**Sections**\r\n\r\n-  Comprehensive Review\r\n    \r\n**Lab**\r\n\r\n- Lab: Managing Files from the Command Line  \r\n- Lab: Managing Users and Groups, Permissions and Processes  \r\n- Lab: Configuring and Managing a Server  \r\n- Lab: Mounting File Systems and Finding Files", "order": 18, "is_visible": true, "course": 7, "show_all_sections": true, "draft": false}}, {"model": "courses.section", "pk": 6, "fields": {"title": "bab 1", "slug": "m1bab-1", "content": "<p>bab 1</p>", "content_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\nLanient rapiunt, oraque in videnda: undas oris saxea harenas, resolutaque.\r\nCaelum inevitabile milibus silvas referentem ex ipsa est, ultimus Boote. In\r\nbona, novem bos petens primum legit; **ureret prodigiosa habendus** ipsas,\r\nquidque cornuaque lanas ante leves cernit.\r\n\r\n## In per quo aquas equi comaeque caeca\r\n\r\nDoctior iram qualescumque caesas memorare cornibus et pasci novas buxi confer:\r\n**Atlantiades**. In est superum mihi sonos, decerpserat flebilis has loca non?\r\nSic mota ut cum de solum fata inperfecta aestuat pulvis. Gyaros mens est nec est\r\ntalaria mugiat cornibus *exigit* speculo, *Gortyniaco* vidit cognoscere\r\nfraterque puppes! Tanta meam inque mitissima.\r\n\r\n    if (-1 * webAlignment) {\r\n        link = pci;\r\n        contextualJre = andWins;\r\n    } else {\r\n        offline = computing_p;\r\n        ipv_lamp_wave.intranetCssOverclocking = cdma;\r\n    }\r\n    if (-2 + cdma(scrolling_pop, whois, matrix_megabyte_printer)) {\r\n        postscript -= ppcPhpUat(dbms_search_vrml, memory(-4, 2, 2));\r\n        archive += peripheral.mount.wirelessWinPostscript(iphone_file_bing,\r\n                mode.ata(payload, clock_iphone_rtf), 3);\r\n    } else {\r\n        controller_google_scrolling(subdirectory_thunderbolt_room *\r\n                threading_external);\r\n    }\r\n    infotainmentNetiquetteRecord += 89 / 52 * controlPage + del_fddi_raw;\r\n    designCard.directory_portal(tiger, baud_pcb_thumbnail, rj);\r\n\r\nTantaque nota est Achilles terris mensas humo [verba\r\nflavae](http://recondita-festa.io/prius-patentibus.html) sonat; liceat humi res\r\npede semper pyram forti. Iuventa quis **attulerat se** humum cui falsam\r\nThaumantidos Phaethonteos parabant; namque. Lucos illum ego ad factos positos\r\nrenovare Amphimedon tibi percussa, in.", "order": 1, "is_visible": false, "is_task": true, "module": 5, "draft": false, "files": []}}, {"model": "courses.section", "pk": 7, "fields": {"title": "bab 2", "slug": "m1bab-2", "content": "<p>bab 2</p>", "content_md": "### Django\r\n\r\nmari kita coba\r\n\r\n[btech](https://btech.id/) has no title attribute.\r\n\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`\r\n\r\n# In vino adgreditur\r\n\r\n## Inmeritam fuerant est cum corpore facientibus faveant\r\n\r\nLorem markdownum *sibi* deprimeret tuo vulnera etiam **et supersunt coniunx**,\r\nest, cecidere cuperet. In bovem, et ille sertis, tamquam ara **metus** pennatis\r\ngenitore Tantalis munera, non pietas Mavortis ille. Arva adspiciens dedere\r\ncingentia tegemus radice, in ingenio recolligis circum. Habebit liquentibus\r\nfestisque nubila iaculum nequeam, [quid](http://hic.com/illic.html) lumina\r\nonerosa passis lactis truncis nec saepe pulmonibus falsa et tormento.\r\n\r\n    web += botnetThumbnail(petaflops_router_search, disk_non_interactive,\r\n            apache);\r\n    scalableMirrorMonitor = font_icon_dot.tweenDigital(hubBootVdu,\r\n            mapServerWeb.program(clickColdE(capacity, finder, snapshot),\r\n            log_leopard, jpegMemoryNetwork), shareware(delWindowsInterface *\r\n            session, ict_video_ipod * 155169, 44));\r\n    if (46 / trackback_software + system) {\r\n        fileLcdFont /= protocol_hexadecimal_wheel.paperIvrNybble(petabyte_modem\r\n                + osiMaskType, prompt_mini + 5);\r\n        multi += cache;\r\n        leopard_pop(versionHoneypotMacintosh, trackback_proxy_dvd);\r\n    }\r\n\r\nSpoliata in Iovis retroque squalentia gerit, poscimus *quos* flexi, parvi deum\r\nocculuit clamore sparsitque dona sertis? Vivere ponit caeli geminique ultor\r\npraefert altera.\r\n\r\n## Et hausit et Pelasgi sororem quantumque Cyclopum\r\n\r\nIllis scelus isset provida; fluidos io taedis sincera; in. Similis et Erinys\r\ninfera, nostrasque multos Centaurorum vates, accepti est quisquam, requiescere\r\ncelerique chelydri tristia. Augerem moverat Iuppiter parte, vacuos neque an\r\n[ardor](http://www.poteratque.org/pondere-alumna), tenuit. Pedes nec. Pericula\r\npennis *iuventus*, premunt vota fallaces, arboribus terra it conchas modo\r\nanimos, praeterque altera, ille leves.\r\n\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)", "order": 2, "is_visible": false, "is_task": true, "module": 5, "draft": false, "files": []}}, {"model": "courses.section", "pk": 8, "fields": {"title": "Bab 1", "slug": "m2bab-1", "content": "<p>bab 1</p>", "content_md": "", "order": 1, "is_visible": false, "is_task": true, "module": 6, "draft": false, "files": []}}, {"model": "courses.section", "pk": 9, "fields": {"title": "sumarry", "slug": "sumarry", "content": "<p>summary</p>", "content_md": "![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)", "order": 2, "is_visible": false, "is_task": false, "module": 5, "draft": false, "files": []}}, {"model": "courses.section", "pk": 10, "fields": {"title": "sumarry", "slug": "sumarry-1", "content": "<p>sumarry</p>", "content_md": "", "order": 3, "is_visible": false, "is_task": false, "module": 6, "draft": false, "files": []}}, {"model": "courses.section", "pk": 11, "fields": {"title": "sumarry", "slug": "sumarry-2", "content": "<p>sumarry lagi</p>", "content_md": "### coba aja\r\n\r\n```swift\r\nlet pi: float = 3.14\r\n```\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)", "order": 4, "is_visible": false, "is_task": false, "module": 5, "draft": false, "files": []}}, {"model": "courses.section", "pk": 12, "fields": {"title": "Instalasi django", "slug": "instalasi-django", "content": "", "content_md": "### Django\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n> \r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\n> id sem consectetuer libero luctus adipiscing.\r\n\r\nmari kita coba\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`", "order": 1, "is_visible": false, "is_task": false, "module": 7, "draft": false, "files": []}}, {"model": "courses.section", "pk": 13, "fields": {"title": "Belajar MTV", "slug": "belajar-mtv", "content": "", "content_md": "### Django\r\n\r\nmari kita coba\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n![](/media/markdownx/bb9b95a5-6292-4043-9936-070d3eba3b20.png)\r\n`sudo apt-get install gimp`", "order": 2, "is_visible": false, "is_task": false, "module": 7, "draft": false, "files": []}}, {"model": "courses.section", "pk": 14, "fields": {"title": "Exam", "slug": "exam", "content": "", "content_md": "### Django\r\n\r\nmari kita coba\r\n![](/media/markdownx/f4c6da0f-1301-4836-ae0d-be7f69af9e77.png)\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n`sudo apt-get install gimp`", "order": 3, "is_visible": false, "is_task": true, "module": 7, "draft": false, "files": []}}, {"model": "courses.section", "pk": 168, "fields": {"title": "ORIENTATION TO THE CLASSROOM ENVIRONMENT", "slug": "orientation-to-the-classroom-environment", "content": "", "content_md": "<style>\r\ntable {width: 100%;}\r\nth {  padding: 8px; text-align: center;border-bottom: 1px solid black;}\r\ntd {  padding: 8px; text-align: left;border-bottom: 1px solid black;}\r\n</style>\r\n<br>\r\n<img  src=\"/media/markdownx/47ca44bc-0831-4c06-b974-fa6f57675d60.png\"/>  \r\n<br>\r\nIn this course, the main computer system used for hands-on learning activities is `workstation`. Two other machines are also used by students for these activities: `servera`, and `serverb`. All three of these systems are in the `lab.example.com` DNS domain.     \r\n  \r\nAll student computer systems have a standard user account, `student`, which has the password `student`. The `root` password on all student systems is `redhat`.    \r\n<table style=\"width:100%;\" border=1 ><thead><tr ><th style=\"text-align:center\">MACHINE NAME</th><th style=\"text-align:center\"> IP ADDRESSES</th><th style=\"text-align:center\">ROLE</th></tr></thead><tbody><tr><td>classroom.example.com<br>content.example.com<br>materials.example.com</td><td>192.168.0.254/24</td><td>Repository lab materials and RHEL packages.</td></tr><tr><td>workstation.lab.example.com</td><td>10.XX.XX.100/24</td><td>Graphical workstation used for system administration</td></tr><tr><td>servera.lab.example.com</td><td>10.XX.XX.10/24</td><td>First server</td></tr><tr><td>serverb.lab.example.com</td><td>10.XX.XX.11/24</td><td>Second server</td></tr></tbody></table>\r\n\r\nSeveral systems in the `Hands On Environment` provide supporting services. Server `content.example.com` or `materials.example.com`, are sources for software and lab materials used in hands-on activities. Information on how to use these servers is provided in the instructions for those activities. These are provided by the `classroom.example.com` virtual machine.   \r\n\r\n>**NOTE**  \r\n><hr>\r\n>When logging on to `servera` or `serverb` you might see a message concerning the >activation of `cockpit`. The message can be ignored.\r\n>```bash\r\n>[student@workstation ~]$ ssh student@serverb\r\n>Warning: Permanently added 'serverb,10.XX.XX.11' (ECDSA) to the list of known hosts.\r\n>Activate the web console with: systemctl enable --now cockpit.socket\r\n>\r\n>[student@serverb ~]$\r\n>```\r\n<hr><br>\r\n## CONTROLLING YOUR SYSTEMS    \r\n#### **Controlling the Virtual Machines**\r\nThe virtual machines in your hands lab environment are controlled by `SSH` & `Spice Connection`. The state of each virtual machine in the hands on lab is displayed on the `Virt Viewer`.  \r\n##### **Install Virt Viewer On Windows**      \r\nDownload Virt Viewer from link  [virt-viewer-9.0.msi](https://virt-manager.org/download/sources/virt-viewer/virt-viewer-x86-9.0.msi)   .    \r\n<br>\r\n<img  src=\"/media/markdownx/8332dfdc-88e6-4d25-92f7-ececb193198b.png\"/>  <br>\r\n<br>\r\nInstall `virt-viewer-x86-9.0.msi`.    <br><br>\r\n![](/media/markdownx/cbb8c169-b08d-4f60-b2e4-232f13539da2.png)  <br><br>\r\nAccess `Virt Viewer` On Windows Start Button.   <br><br> \r\n![](/media/markdownx/7622f3c7-98b4-4e98-ae04-5312451f582a.png)  <br><br>\r\n![](/media/markdownx/a6340c0b-56b7-4e6e-be39-4c12ab32cd77.png)  <br><br>\r\n![](/media/markdownx/9dd44f73-b4b4-4ffb-a2e3-a7c930b57ddd.png)  <br><br>\r\n<br>\r\n##### **Install Virt Viewer On Linux**  \r\nInstall On RedHat Enterprise Linux  / Fedora / CentOS\r\n```bash\r\nyum -y install virt-viewer \r\n```  \r\nInstall On Debian / Ubuntu\r\n```bash\r\napt -y install virt-viewer \r\n```\r\n  \r\n##### **Install Virt Viewer On Mac using Brew**  \r\nAccess Mac Terminal.  \r\nAdd `Virt-manager` Repository.  \r\n\r\n```bash\r\nbrew tap jeffreywildman/homebrew-virt-manager\r\n```  \r\n![](/media/markdownx/cf5c6818-10b6-44d7-9cb4-8135e30321f3.png)  \r\nInstall `Virt Viewer`.  \r\n```bash\r\nbrew install virt-viewer\r\n```\r\n![](/media/markdownx/1cc2e4c8-3fac-41cc-8eee-35627e75a575.png)  \r\n\r\nAccess VM.  \r\n```bash\r\nremote-viewer  pod0X-workstation.vv  \r\n```  \r\n![](/media/markdownx/084957ee-7ff6-4988-9847-892c3d560843.png)   \r\n<br>  \r\n![](/media/markdownx/ac6a513d-c93b-4b96-bb74-446caa4ac21d.png)    \r\n<br>  \r\n\r\n#### **Access virtual machine using Secure Shell Connection.**  \r\nExample link.  \r\n<table border=1><thead><tr><th>Virtual Machine</th><th>Address</th><th>Port</th></tr></thead><tbody><tr><td>workstation.lab.example.com</td><td>labX.btech.id</td><td>2X100</td></tr><tr><td>servera.lab.example.com</td><td>labX.btech.id</td><td>2X010</td></tr><tr><td>serverb.lab.example.com</td><td>labX.btech.id</td><td>2X011</td></tr></tbody></table>\r\n\r\nAccess virtual machine using Secure Shell Connection Via PUTTY.      \r\n![](/media/markdownx/83041ad9-f843-4990-b1b6-8bd891c1d377.png)  \r\n<br>\r\nAccess virtual machine using Secure Shell Connection Via Linux Terminal.   \r\n```bash\r\n[user@dekstop~]:~$ ssh student@labX.btech.id -p 2X100 \r\n```  \r\n<br>\r\n#### **Access virtual machine using Spice Connection.**\r\nThe spice access link to the virtual machine will be provided by the instructor during the training.  \r\nExample link.  \r\n<table border=1><thead><tr><th>Virtual Machine </th><th>Link</th></tr></thead><tbody><tr><td>workstation.lab.example.com</td><td>spice://labX.btech.id:5X100</td></tr><tr><td>servera.lab.example.com</td><td>spice://labX.btech.id:5X010</td></tr><tr><td>serverb.lab.example.com</td><td>spice://labX.btech.id:5X011</td></tr></tbody></table>\r\n\r\n![](/media/markdownx/71279827-2fac-4cd5-800b-79e727d8d75d.png)", "order": 1, "is_visible": true, "is_task": false, "module": 26, "draft": false, "files": []}}, {"model": "courses.section", "pk": 169, "fields": {"title": "What is Linux?", "slug": "what-is-linux", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to define and explain the purpose of Linux, open  \r\nsource, Linux distributions, and Red Hat Enterprise Linux.  \r\n\r\n## WHY SHOULD YOU LEARN ABOUT LINUX?\r\n\r\nLinux is a critical technology for IT professionals to understand.  \r\n\r\nLinux is in widespread use, and if you use the internet at all, you are probably already interacting  \r\nwith Linux systems in your daily life. Perhaps the most obvious way in which you interact with Linux  \r\nsystems is through browsing the World Wide Web and using e-commerce sites to buy and sell  \r\nproducts.  \r\n\r\nHowever, Linux is in use for much more than that. Linux manages point-of-sale systems and the  \r\nworld's stock markets, and also powers smart TVs and in-flight entertainment systems. It powers  \r\nmost of the top 500 supercomputers in the world. Linux provides the foundational technologies  \r\npowering the cloud revolution and the tools used to build the next generation of container-based  \r\nmicroservices applications, software-based storage technologies, and big data solutions.  \r\n\r\nIn the modern data center, Linux and Microsoft Windows are the major players, and Linux is a  \r\ngrowing segment in that space. Some of the many reasons to learn Linux include:  \r\n\r\n- A Windows user needs to interoperate with Linux.  \r\n- In application development, Linux hosts the application or its runtime.  \r\n- In cloud computing, the cloud instances in the private or public cloud environment use Linux as  \r\nthe operating system.  \r\n- With mobile applications or the Internet of Things (IoT), the chances are high that the operating  \r\nsystem of your device uses Linux.  \r\n- If you are looking for new opportunities in IT, Linux skills are in high demand.  \r\n\r\n## WHAT MAKES LINUX GREAT?\r\n\r\nThere are many different answers to the question \"What makes Linux great?\", however, three of  them are:\r\n  \r\n- Linux is open source software.  \r\n\r\nBeing open source does not just mean that you can see how the system works. You can also  experiment with changes and share them freely for others to use. The open source model means  that improvements are easier to make, enabling faster innovation.  \r\n\r\n- Linux provides easy access to a powerful and scriptable command-line interface (CLI).  \r\n\r\nLinux was built around the basic design philosophy that users can perform all administration  tasks from the CLI. It enables easier automation, deployment, and provisioning, and simplifies  both local and remote system administration. Unlike other operating systems, these capabilities have been built in from the beginning, and the assumption has always been to enable these  important capabilities.\r\n\r\n- Linux is a modular operating system that allows you to easily replace or remove components.  \r\n\r\nComponents of the system can be upgraded and updated as needed. A Linux system can be a  general-purpose development workstation or an extremely stripped-down software appliance.\r\n\r\n## WHAT IS OPEN SOURCE SOFTWARE?\r\n\r\nOpen source software is software with source code that anyone can use, study, modify, and share.  \r\n\r\nSource code is the set of human-readable instructions that are used to make a program. It may  be interpreted as a script or compiled into a binary executable which the computer runs directly.  Upon creating source code, it gets copyrighted, and the copyright holder controls the terms under  which the software can be copied, adapted, and distributed. Users can use this software under a  software license.  \r\n\r\nSome software has source code that only the person, team, or organization that created it can  see, or change, or distribute. This software is sometimes called \"proprietary\" or \"closed source\"  software. Typically the license only allows the end user to run the program, and provides no access,  or tightly limited access, to the source.  \r\n\r\nOpen source software is different. When the copyright holder provides software under an open  source license, they grant the user the right to run the program and also to view, modify, compile,  and redistribute the source royalty-free to others.  \r\n\r\nOpen source promotes collaboration, sharing, transparency, and rapid innovation because it  encourages people beyond the original developers to make modifications and improvements to  the software and to share it with others.  \r\n\r\nJust because the software is open source does not mean it is somehow not able to be used  or provided commercially. Open source is a critical part of many organizations' commercial  operations. Some open source licenses allow code to be reused in closed source products. One  can sell open source code, but the terms of true open source licenses generally allow the customer  to redistribute the source code. Most commonly, vendors such as Red Hat provide commercial  help with deploying, supporting, and extending solutions based on open source products.  \r\n\r\nOpen source has many benefits for the user:  \r\n\r\n- Control: See what the code does and change it to improve it.  \r\n- Training: Learn from real-world code and develop more useful applications.  \r\n- Security: Inspect sensitive code, fix with or without the original developers' help.  \r\n- Stability: Code can survive the loss of the original developer or distributor.  \r\n\r\nThe bottom line is that open source allows the creation of better software with a higher return on  investment by collaboration.\r\n\r\n## TYPES OF OPEN SOURCE LICENSES\r\n\r\nThere is more than one way to provide open source software. The terms of the software license  control how the source can be combined with other code or reused, and hundreds of different  open source licenses exist. However, to be open source, licenses must allow users to freely use,  view, change, compile, and distribute the code.  \r\n\r\nThere are two broad classes of open source license that are particularly important:\r\n\r\n- Copyleft licenses that are designed to encourage keeping code open source.  \r\n- Permissive licenses that are designed to maximize code reusability.\r\n\r\nCopyleft, or \"share-alike\" licenses, require that anyone who distributes the source code, with or  without changes, must also pass along the freedom for others to also copy, change, and distribute  the code. The basic advantage of these licenses is that they help to keep existing code, and  improvements to that code, open and add to the amount of open source code available. Common  copyleft licenses include the GNU General Public License (GPL) and the Lesser GNU Public  License (LGPL).  \r\n\r\nPermissive licenses are intended to maximize the reusability of source code. Users can use the  source for any purpose as long as the copyright and license statements are preserved, including  reusing that code under more restrictive or even proprietary licenses. This makes it very easy for  this code to be reused, but at the risk of encouraging proprietary-only enhancements. Several  commonly used permissive open source licenses include the MIT/X11 license, the Simplified BSD  license, and the Apache Software License 2.0.\r\n\r\n## WHO DEVELOPS OPEN SOURCE SOFTWARE?\r\n\r\nIt is a misconception to think that open source is developed solely by an \"army of volunteers\" or  even an army of individuals plus Red Hat. Open source development today is overwhelmingly  professional. Many developers are paid by their organizations to work with open source projects to  construct and contribute the enhancements they and their customers need.  \r\n\r\nVolunteers and the academic community play a significant role and can make vital contributions,  especially in new technology areas. The combination of formal and informal development provides  a highly dynamic and productive environment.  \r\n\r\n## WHO IS RED HAT?\r\n\r\nRed Hat is the world's leading provider of open source software solutions, using a community-powered approach to reliable and high-performance cloud, Linux, middleware, storage, and  virtualization technologies. Red Hat's mission is to be the catalyst in communities of customers,  contributors, and partners creating better technology the open source way.  \r\n\r\nRed Hat's role is to help customers connect with the open source community and their partners  to effectively use open source software solutions. Red Hat actively participates in and supports  the open source community and many years of experience have convinced the company of the  importance of open source to the future of the IT industry.  \r\n\r\nRed Hat is most well-known for their participation in the Linux community and the Red Hat  Enterprise Linux distribution. However, Red Hat is also very active in other open source  communities, including middleware projects centered on the JBoss developer community,  virtualization solutions, cloud technologies such as OpenStack and OpenShift, and the Ceph and  Gluster software-based storage projects, among others.\r\n\r\n## WHAT IS A LINUX DISTRIBUTION?\r\n\r\nA Linux distribution is an installable operating system constructed from a Linux kernel and  supporting user programs and libraries. A complete Linux operating system is not developed by  a single organization, but by a collection of independent open source development communities  working with individual software components. A distribution provides an easy way for users to  install and manage a working Linux system.  \r\n\r\nIn 1991, a young computer science student named Linus Torvalds developed a Unix-like kernel he  named Linux, licensed as open source software under the GPL. The kernel is the core component of the operating system, which manages hardware, memory, and the scheduling of running  programs. This Linux kernel could then be supplemented with other open source software, such as  utilities and programs from the GNU Project, the graphical interface from MIT's X Window System,  and many other open source components, such as the Sendmail mail server or the Apache HTTP  web server, in order to build a complete open source Unix-like operating system.  \r\n\r\nHowever, one of the challenges for Linux users was to assemble all these pieces from many  different sources. Very early in its history, Linux developers began working to provide a distribution  of prebuilt and tested tools that users could download and use to set up their Linux systems  quickly.  \r\n\r\nMany different Linux distributions exist, with differing goals and criteria for selecting and  supporting the software provided by their distribution. However, distributions generally have many  common characteristics:\r\n\r\n- Distributions consist of a Linux kernel and supporting user space programs.  \r\n- Distributions can be small and single-purpose or include thousands of open source programs.  \r\n- Distributions must provide a means of installing and updating the distribution and its  components.  \r\n- The provider of the distribution must support that software, and ideally, be participating directly  in the community developing that software.  \r\n\r\nRed Hat Enterprise Linux is Red Hat's commercialized Linux distribution.\r\n\r\n# RED HAT ENTERPRISE LINUX\r\n\r\n## Development of Red Hat Enterprise Linux\r\n\r\nRed Hat develops and integrates open source software into RHEL through a multistage process.\r\n\r\n- Red Hat participates in supporting individual open source projects. It contributes code,  developer time, resources, and other support, often collaborating with developers from other  Linux distributions. It helps to improve the general quality of software for everyone.  \r\n- Red Hat sponsors and integrates open source projects into a community-driven Linux   distribution, Fedora. Fedora provides a free working environment that can serve as  a development lab and proving ground for features that are incorporated into their  commercialized products.  \r\n- Red Hat stabilizes the software to ensure that it is ready for long term support and  standardization, and integrates it into their enterprise-ready distribution, RHEL. <br>\r\n<p align=\"center\">\r\n![](/media/markdownx/4215d1bc-b26f-4cf8-b8cc-5155af76e978.png)\r\n</p>\r\n\r\n\r\n\r\n## Fedora\r\n\r\nFedora is a community project that produces and releases a complete, free, Linux-based operating system. Red Hat sponsors the community and works with community representatives to integrate the latest upstream software into a fast-moving and secure distribution. The Fedora project contributes everything back to the free and open source world, and anyone can participate. \r\n\r\nHowever, Fedora focuses on innovation and excellence, not long-term stability. New major updates happen every six months, and they can bring significant changes. Fedora only supports releases for about a year (two major updates), which makes it less suitable for enterprise use.\r\n\r\n## Red Hat Enterprise Linux\r\n\r\nRed Hat Enterprise Linux (RHEL) is Red Hat's enterprise-ready, commercially-supported Linux distribution. It is the leading platform for open source computing, not just a collection of mature open source projects. RHEL is extensively tested, with a large supporting ecosystem of partners, hardware and software certifications, consulting services, training, and multiyear support and maintenance guarantees.\r\n\r\nRed Hat bases its major releases of RHEL on Fedora. However, after that Red Hat can pick and choose which packages to include, make further enhancements (contributed back to the upstream projects and Fedora), and make configuration decisions that serve the needs of customers. Red Hat helps vendors and customers engage with the open source community, and to work with upstream development to develop solutions and fix issues.\r\n\r\nRed Hat Enterprise Linux uses a subscription-based distribution model. Because this is open source software, this is not a license fee. Instead, it pays for support, maintenance, updates, security patches, access to the  Knowledgebase on the Red Hat Customer Portal (http://access.redhat.com/), certifications, and so on. The customer is paying for long-term support and xpertise, commitment, and assistance when they need it. When major updates become available, customers can move to them at their convenience without paying more. It simplifies the management of both the economic and practical aspects of system updates.\r\n\r\n\r\n\r\n## CentOS\r\n\r\nCentOS is a community-driven Linux distribution derived from much of the open source Red Hat Enterprise Linux codebase and other sources. It is free of charge, is easy to install, and is staffed and supported by an active user community of volunteers that operates independently of Red Hat. The following table lists some key differences between CentOS and Red Hat Enterprise Linux\r\n<p align=\"center\">\r\n![](/media/markdownx/224c76ea-4d7e-4fdb-bc1c-9f560c92aadd.png)\r\n</p>\r\n\r\n\r\n\r\n## TRYING OUT RED HAT ENTERPRISE LINUX\r\n\r\nThere are many different ways to try Red Hat Enterprise Linux. One way is to download an evaluation copy from the website at https://access.redhat.com/products/red-hat-enterpriselinux/evaluation. That page includes links to supplementary information. \r\n\r\nRed Hat also makes available free subscriptions to a number of products for development purposes through the Red Hat Developer Program at https://developer.redhat.com. These subscriptions allow developers to develop quickly, prototype, test, and demonstrate their software to deploy on the same enterprise products.\r\n\r\nAnother approach is to deploy an instance of Red Hat Enterprise Linux made available through a cloud provider. For example, Red Hat has official AMIs available for Red Hat Enterprise Linux in the Amazon AWS Marketplace.\r\n\r\nFor more information, visit the Red Hat Enterprise Linux \"Get Started\" page, referenced at the end of this section.\r\n\r\n> **REFERENCES**\r\n>\r\n> **Get Started with Red Hat Enterprise Linux** \r\n>\r\n>https://access.redhat.com/products/red-hat-enterprise-linux#getstarted\r\n> \r\n> **The Open Source Way** \r\n>\r\n>https://opensource.com/open-source-way", "order": 1, "is_visible": true, "is_task": false, "module": 27, "draft": false, "files": []}}, {"model": "courses.section", "pk": 170, "fields": {"title": "QUIZ - GETTING STARTED WITH RED HAT ENTERPRISE LINUX", "slug": "quiz-getting-started-red-hat-linux", "content": "", "content_md": "## Quiz\r\n\r\nClick \r\n[https://course.btech.id/quiz/getting-started-red-hat-linux/](https://course.btech.id/quiz/getting-started-red-hat-linux/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 27, "draft": false, "files": []}}, {"model": "courses.section", "pk": 171, "fields": {"title": "SUMMARY", "slug": "summary-chapter1", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n- Open source software is software with source code that anyone can freely use, study, modify, and share.\r\n- A Linux distribution is an installable operating system constructed from a Linux kernel and supporting user programs and libraries.\r\n- Red Hat participates in supporting and contributing code to open source projects, sponsors and integrates project software into community-driven distributions, and stabilizes the software to offer it as supported enterprise-ready products.\r\n- Red Hat Enterprise Linux is Red Hat's open source, enterprise-ready, commercially-supported Linux distribution.", "order": 3, "is_visible": true, "is_task": false, "module": 27, "draft": false, "files": []}}, {"model": "courses.section", "pk": 172, "fields": {"title": "ACCESSING THE COMMAND LINE", "slug": "accessing-the-command-line", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to log in to a Linux system and run simple\r\ncommands using the shell.\r\n\r\n##INTRODUCTION TO THE BASH SHELL<be>\r\n A command line is a text-based interface which can be used to input instructions to a computer\r\nsystem. The Linux command line is provided by a program called the shell. Various options for the\r\nshell program have been developed over the years, and different users can be configured to use\r\ndifferent shells. Most users, however, stick with the current default.\r\n\r\nThe default shell for users in Red Hat Enterprise Linux is the **GNU Bourne-Again Shell (bash)**.\r\nBash is an improved version of one of the most successful shells used on UNIX-like systems, the\r\n**Bourne Shell (sh)**.\r\n\r\nWhen a shell is used interactively, it displays a string when it is waiting for a command from the\r\nuser. This is called the shell prompt. When a regular user starts a shell, the default prompt ends\r\nwith a **$** character, as shown below.\r\n\r\n```bash\r\n[user@host ~]$\r\n```\r\n\r\nThe **$**character is replaced by a **#** character if the shell is running as the superuser, root. This\r\nmakes it more obvious that it is a superuser shell, which helps to avoid accidents and mistakes\r\nwhich can affect the whole system. The superuser shell prompt is shown below.\r\n\r\n```bash\r\n[root@host ~]#\r\n```\r\n\r\nUsing **bash** to execute commands can be powerful. The **bash** shell provides a scripting language\r\nthat can support automation of tasks. The shell has additional capabilities that can simplify or\r\nmake possible operations that are hard to accomplish efficiently with graphical tools.\r\n\r\n> **NOTE**  \r\n>The **bash** shell is similar in concept to the command-line interpreter found in recent\r\nversions of Microsoft Windows, **cmd.exe**, although **bash** has a more sophisticated\r\nscripting language. It is also similar to Windows PowerShell in Windows 7 and\r\nWindows Server 2008 R2 and later. Administrators using the Apple Mac who use the\r\n**Terminal** utility may be pleased to note that **bash** is the default shell in macOS.\r\n\r\n## SHELL BASICS<br>\r\nCommands entered at the shell prompt have three basic parts:\r\n\r\n* Command to run<br>\r\n* Options to adjust the behavior of the command<br>\r\n* Arguments, which are typically targets of the command<br>\r\n\r\nThe command is the name of the program to run. It may be followed by one or more options, which\r\nadjust the behavior of the command or what it will do. Options normally start with one or two\r\ndashes (**-a** or **--all**, for example) to distinguish them from arguments. Commands may also\r\nbe followed by one or more arguments, which often indicate a target that the command should\r\noperate upon.\r\nFor example, the command **usermod -L** **user01** has a command (**usermod**), an option (**-L**),\r\nand an argument (**user01**). The effect of this command is to lock the password of the **user01**\r\nuser account.\r\n\r\n## LOGGING IN TO A LOCAL COMPUTER<br>\r\nTo run the shell, you need to log in to the computer on a terminal. A terminal is a text-based\r\ninterface used to enter commands into and print output from a computer system. There are\r\nseveral ways to do this.\r\n\r\nThe computer might have a hardware keyboard and display for input and output directly\r\nconnected to it. This is the Linux machine's physical console. The physical console supports\r\nmultiple virtual consoles, which can run separate terminals. Each virtual console supports an\r\nindependent login session. You can switch between them by pressing **Ctrl+Alt** and a function\r\nkey (**F1** through **F6**) at the same time. Most of these virtual consoles run a terminal providing a\r\ntext login prompt, and if you enter your username and password correctly, you will log in and get a\r\nshell prompt.\r\n\r\nThe computer might provide a graphical login prompt on one of the virtual consoles. You can use\r\nthis to log in to a graphical environment. The graphical environment also runs on a virtual console.\r\nTo get a shell prompt you must start a terminal program in the graphical environment. The shell\r\nprompt is provided in an application window of your graphical terminal program.\r\n\r\n> **NOTE **  \r\n> Many system administrators choose not to run a graphical environment on their\r\nservers. This allows resources which would be used by the graphical environment to\r\nbe used by the server's services instead.\r\n\r\nIn Red Hat Enterprise Linux 8, if the graphical environment is available, the login screen will run\r\non the first virtual console, called **tty1**. Five additional text login prompts are available on virtual\r\nconsoles two through six.\r\n\r\n\r\nIf you log in using the graphical login screen, your graphical environment will start on the first\r\nvirtual console that is not currently being used by a login session. Normally, your graphical session\r\nwill replace the login prompt on the second virtual console (**tty2**). However, if that console is in\r\nuse by an active text login session (not just a login prompt), the next free virtual console is used\r\ninstead.\r\n\r\n\r\nThe graphical login screen continues to run on the first virtual console (**tty1**). If you are already\r\nlogged in to a graphical session, and log in as another user on the graphical login screen or use the\r\n**Switch User** menu item to switch users in the graphical environment without logging out, another\r\ngraphical environment will be started for that user on the next free virtual console.\r\nWhen you log out of a graphical environment, it will exit and the physical console will automatically\r\nswitch back to the graphical login screen on the first virtual console.\r\n\r\n> **NOTE**  \r\n> In Red Hat Enterprise Linux 6 and 7, the graphical login screen runs on the first\r\nvirtual console, but when you log in your initial graphical environment replaces the\r\nlogin screen on the first virtual console instead of starting on a new virtual console.\r\n\r\n\r\nIn Red Hat Enterprise Linux 5 and earlier, the first six virtual consoles always\r\nprovided text login prompts. If the graphical environment is running, it is on virtual\r\nconsole seven (accessed through **Ctrl+Alt+F7**).\r\n\r\nA headless server does not have a keyboard and display permanently connected to it. A data\r\ncenter may be filled with many racks of headless servers, and not providing each with a keyboard\r\nand display saves space and expense. To allow administrators to log in, a headless server might\r\nhave a login prompt provided by its serial console, running on a serial port which is connected to a\r\nnetworked console server for remote access to the serial console.\r\n\r\n\r\nThe serial console would normally be used to fix the server if its own network card became\r\nmisconfigured and logging in over its own network connection became impossible. Most of the\r\ntime, however, headless servers are accessed by other means over the network.\r\n\r\n\r\n##LOGGING IN OVER THE NETWORK<br>\r\nLinux users and administrators often need to get shell access to a remote system by connecting\r\nto it over the network. In a modern computing environment, many headless servers are actually\r\nvirtual machines or are running as public or private cloud instances. These systems are not physical\r\nand do not have real hardware consoles. They might not even provide access to their (simulated)\r\nphysical console or serial console.\r\n\r\n\r\nIn Linux, the most common way to get a shell prompt on a remote system is to use Secure\r\nShell (SSH). Most Linux systems (including Red Hat Enterprise Linux) and macOS provide the\r\n**OpenSSH** command-line program **ssh** for this purpose.\r\n\r\n\r\nIn this example, a user with a shell prompt on the machine host uses **ssh** to log in to the remote\r\nLinux system **remotehost** as the user **remoteuser**:\r\n\r\n```bash\r\n[user@host ~]$ ssh remoteuser@remotehost\r\nremoteuser@remotehost's password: password\r\n[remoteuser@remotehost ~]$\r\n```\r\n\r\nThe **ssh** command encrypts the connection to secure the communication against eavesdropping\r\nor hijacking of the passwords and content.\r\n\r\n\r\nSome systems (such as new cloud instances) do not allow users to use a password to log in with\r\n**ssh** for tighter security. An alternative way to authenticate to a remote machine without entering a\r\npassword is through public key authentication.\r\n\r\n\r\nWith this authentication method, users have a special identity file containing a private key, which\r\nis equivalent to a password, and which they keep secret. Their account on the server is configured\r\nwith a matching public key, which does not have to be secret. When logging in, users can configure\r\n**ssh** to provide the private key and if their matching public key is installed in that account on that\r\nremote server, it will log them in without asking for a password.\r\n\r\n\r\nIn the next example, a user with a shell prompt on the machine host logs in to **remotehost**\r\nas **remoteuser** using **ssh**, using public key authentication. The **-i** option is used to specify the user's private key file, which is **mylab.pem**. The matching public key is already set up as an\r\nauthorized key in the remoteuser account.\r\n\r\n```bash\r\n[user@host ~]$ ssh -i mylab.pem remoteuser@remotehost\r\n[remoteuser@remotehost ~]$\r\n```\r\n\r\nFor this to work, the private key file must be readable only by the user that owns the file. In the\r\npreceding example, where the private key is in the **mylab.pem** file, the command **chmod 600**\r\n**mylab.pem** could be used to ensure this. How to set file permissions is discussed in more detail in\r\na later chapter.\r\n\r\n\r\nUsers might also have private keys configured that are tried automatically, but that discussion is\r\nbeyond the scope of this section. The References at the end of this section contain links to more\r\ninformation on this topic.\r\n\r\n> **NOTE**  \r\n> The first time you log in to a new machine, you will be prompted with a warning from\r\nssh that it cannot establish the authenticity of the host:\r\n\r\n```bash\r\n[user@host ~]$ ssh -i mylab.pem remoteuser@remotehost\r\nThe authenticity of host 'remotehost (192.0.2.42)' can't be\r\nestablished.\r\nECDSA key fingerprint is\r\n47:bf:82:cd:fa:68:06:ee:d8:83:03:1a:bb:29:14:a3.\r\nAre you sure you want to continue connecting (yes/no)? yes\r\n[remoteuser@remotehost ~]$\r\n```\r\n\r\nEach time you connect to a remote host with **ssh**, the remote host sends **ssh**\r\nits host key to authenticate itself and to help set up encrypted communication.\r\nThe **ssh** command compares that against a list of saved host keys to make sure it\r\nhas not changed. If the host key has changed, this might indicate that someone is\r\ntrying to pretend to be that host to hijack the connection which is also known as\r\nman-in-the-middle attack. In SSH, host keys protect against man-in-the-middle\r\nattacks, these host keys are unique for each server, and they need to be changed\r\nperiodically and whenever a compromise is suspected.\r\n\r\nYou will get this warning if your local machine does not have a host key saved for\r\nthe remote host. If you enter **yes**, the host key that the remote host sent will be\r\naccepted and saved for future reference. Login will continue, and you should not see\r\nthis message again when connecting to this host. If you enter **no**, the host key will\r\nbe rejected and the connection closed.\r\n\r\nIf the local machine does have a host key saved and it does not match the one\r\nactually sent by the remote host, the connection will automatically be closed with a\r\nwarning.\r\n\r\n##LOGGING OUT<br>\r\nWhen you are finished using the shell and want to quit, you can choose one of several ways to end\r\nthe session. You can enter the **exit** command to terminate the current shell session. Alternatively,\r\nfinish a session by pressing **Ctrl+D**.\r\n\r\n\r\nThe following is an example of a user logging out of an SSH session:\r\n\r\n```bash\r\n[remoteuser@remotehost ~]$ exit\r\nlogout\r\nConnection to remotehost closed.\r\n[user@host ~]$\r\n```\r\n\r\n> **PREFERENCES**    \r\n> **intro**(1), **bash**(1), **console**(4), **pts**(4), **ssh**(1), and **ssh-keygen**(1) man pages\r\n\r\n> Note: Some details of the **console**(4) man page, involving **init**(8) and **inittab**(5), are outdated.\r\n\r\n> For more information on OpenSSH and public key authentication, refer to the Using secure communications between two systems with OpenSSH chapter in the Red Hat Enterprise Linux 8 Securing networks at<br>\r\n> `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-\r\nsingle/securing_networks/assembly_using-secure-communications-with-openssh-\r\nsecuring-networks`<br>\r\n\r\n<hr>\r\n> **NOTE**    \r\n> Instructions on how to read **man** pages and other online help documentation is\r\nincluded at the end of the next section.", "order": 1, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 173, "fields": {"title": "QUIZ : ACCESSING THE COMMAND LINE", "slug": "quiz-accessing-the-command-line", "content": "", "content_md": "## QUIZ\r\n\r\nClick [https://course.btech.id/quiz/accessing-command-line/](https://course.btech.id/quiz/accessing-command-line/) to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 174, "fields": {"title": "ACCESSING THE COMMAND LINE USING THE DESKTOP", "slug": "accessing-the-command-line-using-the-desktop", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to log in to the Linux system using the GNOME 3\r\ndesktop environment to run commands from a shell prompt in a terminal program.\r\n\r\n##INTRODUCTION TO THE GNOME DESKTOP ENVIRONMENT<br>\r\nThe desktop environment is the graphical user interface on a Linux system. The default desktop\r\nenvironment in Red Hat Enterprise Linux 8 is provided by GNOME 3. It provides an integrated\r\ndesktop for users and a unified development platform on top of a graphical framework provided by\r\neither **Wayland** (by default) or the legacy **X Window System**.\r\n\r\n**GNOME Shell ** provides the core user interface functions for the GNOME desktop environment.\r\nThe GNOME Shell application is highly customizable. Red Hat Enterprise Linux 8 defaults\r\nGNOME Shell's look and feel to the \"Standard\" theme, which is used in this section. Red Hat\r\nEnterprise Linux 7 defaulted to an alternative theme named \"Classic\" that was closer to the\r\nlook and feel of older versions of GNOME. Either theme can be selected persistently at login by\r\nclicking the gear icon next to the **Sign In** button that is available after selecting your account but\r\nbefore entering your password.\r\n\r\n\r\n![](/media/markdownx/073801af-20bf-4176-8eae-c46726d446e1.jpeg)\r\n\r\nThe first time you log in as a new user, an initial setup program runs to help configure basic\r\naccount settings. Once that is complete, the **GNOME Help** application starts on the **Getting\r\nStarted with GNOME** screen. This screen includes videos and documentation to help orient new\r\nusers to the GNOME 3 environment. You can quickly start **GNOME Help** by clicking the **Activities**\r\nbutton on the left side of the top bar, and in the dash that appears on the left side of the screen,\r\nclicking the life ring buoy icon to launch it.\r\n\r\n![](/media/markdownx/18444b92-557d-4097-94c2-6904f7742831.jpeg)\r\n\r\n1.  **Top bar**: The bar that runs along the top of the screen. It is displayed in the Activities overview\r\nand in workspaces. The top bar provides the **Activities** button, and controls for volume,\r\nnetworking, calendar access, and switching between keyboard input methods (if more than\r\none is configured).\r\n\r\n2.  **Activities overview**: This is a special mode that helps a user organize windows and start\r\napplications. The Activities overview can be entered by clicking the **Activities** button at the\r\nupper-left corner of the top bar, or by pressing the **Super** key. The **Super** key (sometimes\r\ncalled the **Windows** key or **Command** key), is found near the lower left corner of an IBM PC\r\n104/105-key or Apple keyboard. The three main areas of the Activities overview are the **dash**\r\non the left side of the screen, the **windows overview** in the center of the screen, and the\r\n**workspace selector** on the right side of the screen.\r\n\r\n3. **System menu**: The menu in the upper-right corner on the top bar provides control to adjust\r\nthe brightness of the screen, and to switch on or off the network connections. Under the\r\nsubmenu for the user's name are options to adjust account settings, and log out of the\r\nsystem. The system menu also offers buttons to open the **Settings** window, lock the screen,\r\nor shut down the system\r\n\r\n4. **Dash**: This is a configurable list of icons of the user's favorite applications, applications which\r\nare currently running, and a **grid** button at the bottom of the dash which can be used to\r\nselect arbitrary applications. Applications can be started by clicking on one of the icons or by\r\nusing the grid button to find a less commonly used application. The dash is also sometimes\r\ncalled the **dock**.\r\n\r\n5. **Dash**: This is a configurable list of icons of the user's favorite applications, applications which\r\nare currently running, and a grid button at the bottom of the dash which can be used to\r\nselect arbitrary applications. Applications can be started by clicking on one of the icons or by\r\nusing the grid button to find a less commonly used application. The dash is also sometimes\r\ncalled the dock.\r\n\r\n6. **Workspace selector**: An area to the right of the Activities overview which displays thumbnails\r\nof all active workspaces and allows workspaces to be selected and windows to be moved from\r\none workspace to another.\r\n\r\n7. **Message tray**: The message tray provides a way to review notifications sent by applications\r\nor system components to GNOME. If a notification occurs, normally the notification first\r\nappears briefly as a single line at the top of the screen, and a persistent indicator appears\r\nin the middle of the top bar next to the clock to inform the user of notifications have been\r\nrecently received. The message tray can be opened to review these notifications by clicking\r\nthe clock on the top bar or by pressing **Super+M**. The message tray can be closed by clicking\r\nthe clock on the top bar, or by pressing **Esc** or **Super+M** again.<br>\r\n\r\n![](/media/markdownx/7f1396df-4c81-4cfd-b0a2-3b80d1a5787a.jpeg)\r\n\r\nYou can view and edit the GNOME keyboard shortcuts used by your account. Open the system\r\nmenu on the right side of the top bar. Click the **Settings** button on the bottom of the menu on the\r\nleft. In the application window that opens, select **Devices \u2192 Keyboard** from the left pane. The\r\nright pane will display your current shortcut settings.\r\n\r\n> **NOTE**  \r\n> Some keyboard shortcuts, such as function keys or the **Super** key, might be difficult\r\nto send to a virtual machine. This is because special keystrokes used by those\r\nshortcuts might be captured by your local operating system, or by the application\r\nthat you are using to access the graphical desktop of your virtual machine.  \r\n<br>  \r\n    \r\n<br>\r\n> **IMPORTANT**  \r\n> In Red Hat's current virtual training and self-paced training environments, using\r\nthe **Super** key can be a little tricky. You probably cannot just use your keyboard's\r\n**Super** key because it is usually not passed to the virtual machine in the classroom\r\nenvironment by your web browser.<br><br>\r\n> In the  **Ravello Systems** bar at the top of your browser window, there should be a\r\nkeyboard icon on the right side. If you click that, it will open an on-screen keyboard.\r\nClicking it again will close the on-screen keyboard.<br><br>\r\n> The Ravello on-screen keyboard treats **Super** as a modifier key that is often held\r\ndown while pressing another key. If you click it once, it will turn yellow indicating that\r\nthe key is being held down. So, to enter **Super+M** in the Ravello on-screen keyboard,\r\nclick **Super**, then click **M**.<br><br>\r\n> If you just want to press and release **Super** in the Ravello on-screen keyboard, you\r\nhave to click it twice. The first click \"holds down\" the **Super** key, and the second\r\nclick releases it.<br><br>\r\n> The other keys treated as modifier keys (like Super) by the Ravello on-screen\r\nkeyboard are **Shift, Ctrl, Alt,** and **Caps**. The **Esc** and **Menu** keys are treated like\r\nnormal keys and not modifier keys.\r\n\r\n## WORKSPACES<br>\r\nWorkspaces are separate desktop screens that have different application windows. These can\r\nbe used to organize the working environment by grouping open application windows by task. For\r\nexample, windows being used to perform a particular system maintenance activity (such as settingup a new remote server) can be grouped in one workspace, while email and other communication\r\napplications can be grouped in another workspace.\r\n\r\n\r\nThere are two simple methods for switching between workspaces. One method, perhaps the\r\nfastest, is to press **Ctrl+Alt+UpArrow** or **Ctrl+Alt+DownArrow** to switch between workspaces\r\nsequentially. The second is to switch to the **Activities** overview and click the desired workspace.\r\n\r\n\r\nAn advantage of using the **Activities** overview is that windows can be clicked and dragged\r\nbetween workspaces using the **workspace selector** on the right side of the screen and the\r\n**windows overview** in the center of the screen.\r\n> **IMPORTANT**  \r\n> Like **Super**, in Red Hat's current virtual training and self-paced training\r\nenvironments, **Ctrl+Alt** key combinations are not usually passed to the virtual\r\nmachine in the classroom environment by your web browser.<br><br>\r\n> You can enter these key combinations to switch workspaces using the Ravello on-\r\nscreen keyboard. At least two workspaces need to be in use. Open the Ravello on-\r\nscreen keyboard and click **Ctrl, Alt,** and then either **UpArrow** or **DownArrow.**<br><br>\r\n> However, in those training environments, it is generally simpler to avoid the keyboard\r\nshortcuts and the Ravello on-screen keyboard. Switch workspaces by clicking the\r\n**Activities** button and then, in the workspace selector to the right of the Activities\r\noverview, clicking on the workspace to which you want to switch.<br><br>\r\n\r\n##STARTING A TERMINAL<br>\r\nTo get a shell prompt in GNOME, start a graphical terminal application such as **GNOME Terminal.**\r\nThere are several ways to do this. The two most commonly used methods are listed below:\r\n\r\n- From the **Activities** overview, select **Terminal** from the **dash** (either from the favorites area or\r\nby finding it with either the **grid** button (inside **Utilities** grouping) or the search field at the top\r\nof the **windows overview**).\r\n\r\n- Press the **Alt+F2** key combination to open the **Enter a Command** and enter **gnome-\r\nterminal.**\r\n\r\nWhen a terminal window is opened, a shell prompt displays for the user that started the graphical\r\nterminal program. The shell prompt and the terminal window's title bar indicate the current user\r\nname, host name, and working directory.\r\n\r\n## LOCKING THE SCREEN OR LOGGING OUT<br>\r\nLocking the screen, or logging out entirely, can be done from the system menu on the far right of\r\nthe top bar.<br><br>\r\nTo lock the screen, from the system menu in the upper-right corner, click the lock button at the\r\nbottom of the menu or press **Super+L** (which might be easier to remember as **Windows+L**). The\r\nscreen also locks if the graphical session is idle for a few minutes.<br><br>\r\nA **lock screen curtain** appears that shows the system time and the name of the logged-in user. To\r\nunlock the screen, press **Enter** or **Space** to raise the lock screen curtain, then enter that user's\r\npassword on the **lock screen.**<br><br>\r\nTo log out and end the current graphical login session, select the system menu in the upper-right\r\ncorner on the top bar and select **(User) \u2192 Log Out**. A window displays that offers the option to\r\n**Cancel** or confirm the **Log Out** action.<br><br>\r\n\r\n##POWERING OFF OR REBOOTING THE SYSTEM<br>\r\nTo shut down the system, from the system menu in the upper-right corner, click the power button\r\nat the bottom of the menu or press **Ctrl+Alt+Del**. In the dialog box that displays, you can\r\nchoose to **Power Off** or **Restart** the machine, or **Cancel** the operation. If you do not make a\r\nchoice, the system automatically shuts down after 60 seconds.<br><br>\r\n\r\n> **PREFERENCES**  \r\n> GNOME Help<br>\r\n> \u2022  **yelp**<br>\r\n> GNOME Help: Getting Started with GNOME<br>\r\n> \u2022  **yelp help:gnome-help/getting-started**", "order": 3, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 175, "fields": {"title": "EXECUTING COMMANDS USING THE BASH SHELL", "slug": "executing-commands-using-the-bash-shell", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to save time running commands from a shell\r\nprompt using Bash shortcuts.\r\n\r\n\r\n##BASIC COMMAND SYNTAX<br>\r\nThe **GNU Bourne-Again Shell (bash)** is a program that interprets commands typed in by the user. Each string typed into the shell can have up to three parts: the command, options (which usually begin with a - or --), and arguments. Each word typed into the shell is separated from each other with spaces. Commands are the names of programs that are installed on the system. Each command has its own options and arguments.<br><br>\r\nWhen you are ready to execute a command, press the **Enter** key. Type each command on a separate line. The command output is displayed before the next shell prompt appears.\r\n\r\n```bash\r\n[user@host]$ whoami\r\nuser\r\n[user@host]$\r\n```\r\n\r\nIf you want to type more than one command on a single line, use the semicolon (;) as a command\r\nseparator. A semicolon is a member of a class of characters called metacharacters that have\r\nspecial meanings for **bash.** In this case the output of both commands will be displayed before the\r\nnext shell prompt appears.\r\n\r\n\r\nThe following example shows how to combine two commands (**command1** and **command2**) on the\r\ncommand line.\r\n\r\n```bash\r\n[user@host]$ command1;command2\r\n```\r\n\r\n##EXAMPLES OF SIMPLE COMMANDS<br>\r\nThe **date** command displays the current date and time. It can also be used by the superuser to set the system clock. An argument that begins with a plus sign (+) specifies a format string for the date command.\r\n\r\n```bash\r\n[user@host ~]$ date\r\nSat Jan\r\n26 08:13:50 IST 2019\r\n[user@host ~]$ date +%R\r\n08:13\r\n[user@host ~]$ date +%x\r\n01/26/2019\r\n```\r\n\r\nThe **passwd** command changes a user's own password. The original password for the account must be specified before a change is allowed. By default, **passwd** is configured to require a strong password, consisting of lowercase letters, uppercase letters, numbers, and symbols, and is not based on a dictionary word. The superuser can use the **passwd** command to change other users passwords.\r\n\r\n```bash\r\n[user@host ~]$ passwd\r\nChanging password for user user.\r\nCurrent password: old_password\r\nNew password: new_password\r\nRetype new password: new_password\r\npasswd: all authentication tokens updated successfully.\r\n```\r\n\r\nLinux does not require file name extensions to classify files by type. The **file** command scans the beginning of a file's contents and displays what type it is. The files to be classified are passed as arguments to the command\r\n\r\n```bash\r\n[user@host ~]$ file /etc/passwd\r\n/etc/passwd: ASCII text\r\n[user@host ~]$ file /bin/passwd\r\n/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1\r\n(SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,\r\nfor GNU/Linux 3.2.0, BuildID[sha1]=a3637110e27e9a48dced9f38b4ae43388d32d0e4,\r\nstripped\r\n[user@host ~]$ file /home\r\n/home: directory\r\n```\r\n\r\n##VIEWING THE CONTENTS OF FILES<br>\r\nOne of the most simple and frequently used commands in Linux is **cat**. The **cat** command allows\r\nyou to create single or multiple files, view the contents of files, concatenate the contents from\r\nmultiple files, and redirect contents of the file to a terminal or files.\r\n\r\nThe example shows how to view the contents of the **/etc/passwd** file.\r\n\r\n```bash\r\n[user@host ~]$ cat /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\n...output omitted...\r\n```\r\n\r\nUse the following command to display the contents of multiple files.\r\n\r\n```bash\r\n[user@host ~]$ cat file1 file2\r\nHello World!!\r\nIntroduction to Linux commands.\r\n```\r\n\r\nSome files are very long and can take up more room to display than that provided by the terminal.\r\nThe **cat** command does not display the contents of a file as pages. The **less** command displays\r\none page of a file at a time and lets you scroll at your leisure.\r\n\r\nThe **less** command allows you to page forward and backward through files that are longer than\r\ncan fit on one terminal window. Use the **UpArrow** key and the **DownArrow** key to scroll up and down. Press **q** to exit the command.\r\n\r\nThe **head** and **tail** commands display the beginning and end of a file, respectively. By default\r\nthese commands display 10 lines of the file, but they both have a **-n** option that allows a different\r\nnumber of lines to be specified. The file to display is passed as an argument to these commands.\r\n\r\n```bash\r\n[user@host ~]$ head /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[user@host ~]$ tail -n 3 /etc/passwd\r\ngdm:x:42:42::/var/lib/gdm:/sbin/nologin\r\ngnome-initial-setup:x:977:977::/run/gnome-initial-setup/:/sbin/nologin\r\navahi:x:70:70:Avahi mDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologin\r\n```\r\n\r\nThe **wc** command counts lines, words, and characters in a file. It takes a **-l**, **-w**, or **-c** option to\r\ndisplay only the number of lines, words, or characters, respectively\r\n\r\n```bash\r\n[user@host ~]$ wc /etc/passwd\r\n45\r\n102 2480 /etc/passwd\r\n[user@host ~]$ wc -l /etc/passwd ; wc -l /etc/group\r\n45 /etc/passwd\r\n70 /etc/group\r\n[user@host ~]$ wc -c /etc/group /etc/hosts\r\n966 /etc/group\r\n516 /etc/hosts\r\n1482 total\r\n```\r\n\r\n##TAB COMPLETION<br>\r\nTab completion allows a user to quickly complete commands or file names after they have typed\r\nenough at the prompt to make it unique. If the characters typed are not unique, pressing the **Tab**\r\nkey twice displays all commands that begin with the characters already typed.\r\n\r\n![](/media/markdownx/57d8a889-b32b-443e-995e-867933987523.png)\r\n\r\nTab completion can be used to complete file names when typing them as arguments to\r\ncommands. When **Tab** is pressed, it completes as much of the file name as possible. Pressing **Tab** a second time causes the shell to list all of the files that are matched by the current pattern. Type\r\nadditional characters until the name is unique, then use tab completion to complete the command.\r\n\r\n![](/media/markdownx/6d4d5e65-f10b-4ca1-8ede-96ec024b500b.png)\r\n\r\nArguments and options can be matched with tab completion for many commands. The **useradd**\r\ncommand is used by the superuser, root, to create additional users on the system. It has many\r\noptions that can be used to control how that command behaves. Tab completion following a partial\r\noption can be used to complete the option without a lot of typing.\r\n\r\n![](/media/markdownx/615f5f15-e5b1-416e-adb5-85dd1a94649e.png)\r\n\r\n##CONTINUING A LONG COMMAND ON ANOTHER LINE<br>\r\nCommands with many options and arguments can quickly become long and are automatically\r\nwrapped by the command window when the the cursor reaches the right margin. Instead, to make\r\ncommand readability easier, you can type a long command using more than one line.\r\n\r\n\r\nTo do this, you will use a backslash character (\\), referred to as the escape character, to ignore the\r\nmeaning of the character immediately following the backslash. You have learned that entering a\r\nnewline character, by pressing the **Enter** key, tells the shell that command entry is complete and\r\nto execute the command. By escaping the newline character, the shell is told to move to a new\r\ncommand line without performing command execution. The shell acknowledges the request by\r\ndisplaying a continuation prompt, referred to as the secondary prompt, using the greater-than\r\ncharacter (>) by default, on an empty new line. Commands may be continued over many lines.\r\n\r\n```bash\r\n[user@host]$ head -n 3 \\\r\n> /usr/share/dict/words \\\r\n> /usr/share/dict/linux.words\r\n==> /usr/share/dict/words <==\r\n1080\r\n10-point\r\n10th\r\n==> /usr/share/dict/linux.words <==\r\n1080\r\n10-point\r\n10th\r\n```\r\n\r\n> **IMPORTANT**  \r\n> The previous screen example displays how a continued command appears to a typical user. However, rotraying this realism in learning materials, such as this coursebook, commonly causes confusion.   <br><br>\r\n> New learners might mistakenly insert the extra greater-than character as part of the typed command. The shell interprets a typed greater-than character as process redirection, which the user did not intend.\r\nProcess redirection is discussed in an upcoming chapter.\r\n\r\n\r\nTo avoid this confusion, this coursebook will not show secondary prompts in screen\r\noutputs. A user still sees the secondary prompt in their shell window, but the course\r\nmaterial intentionally displays only characters to be typed, as demonstrated in the\r\nexample below. Compare with the previous screen example.\r\n\r\n```bash\r\n[user@host]$ head -n 3 \\\r\n/usr/share/dict/words \\\r\n/usr/share/dict/linux.words\r\n==> /usr/share/dict/words <==\r\n1080\r\n10-point\r\n10th\r\n==> /usr/share/dict/linux.words <==\r\n1080\r\n10-point\r\n10th\r\n```\r\n\r\n##COMMAND HISTORY<br>\r\nThe **history** command displays a list of previously executed commands prefixed with a command number.\r\n\r\nThe exclamation point character (!) is a metacharacter that is used to expand previous commands without having to retype them. The **!number** command expands to the command matching the number specified. The **!string** command expands to the most recent command that begins with the string specified.\r\n\r\n```bash\r\n[user@host ~]$ history\r\n...output omitted...\r\n23 clear\r\n24 who\r\n25 pwd\r\n26 ls /etc\r\n27 uptime\r\n28 ls -l\r\n29 date\r\n30 history\r\n[user@host ~]$ !ls\r\nls -l\r\ntotal 0\r\ndrwxr-xr-x. 2 user user 6 Mar 29 21:16 Desktop\r\n...output omitted...\r\n[user@host ~]$ !26\r\n```\r\n\r\n![](/media/markdownx/977cea65-3832-4270-b3c0-f92a8d7e9632.png)\r\n\r\nThe arrow keys can be used to navigate through previous commands in the shell's history. **UpArrow** edits the previous command in the history list. **DownArrow** edits the next command in the history list. **LeftArrow** and \r\n **RightArrow** move the cursor left and right in the current command from the history list, so that you can edit it before running it.\r\n\r\n\r\nYou can use either the **Esc+.** or** Alt+.** key combination to insert the last word of the previous command at the cursor's current location. Repeated use of the key combination will replace that text with the last word of even earlier commands in the history. The **Alt+.** key combination is particularly convenient because you can hold down **Alt** and press . repeatedly to easily go through earlier and earlier commands.\r\n\r\n##EDITING THE COMMAND LINE<br>\r\nWhen used interactively, **bash** has a command-line editing feature. This allows the user to use text editor commands to move around within and modify the current command being typed. Using the arrow keys to move within the current command and to step through the command history was introduced earlier in this session. More powerful editing commands are introduced in the following table.\r\n\r\n**Useful Command-line Editing Shortcuts**\r\n\r\n![](/media/markdownx/a7788dfe-42c8-49ad-a546-a767314ddb47.png)\r\n<br><br>\r\nThere are several other command-line editing commands available, but these are the most useful\r\ncommands for new users. The other commands can be found in the **bash**(1) man page.\r\n<br>\r\n\r\n>**REFERENCES**<br>\r\n>**bash**(1), **date**(1), **file**(1), **cat**(1), **more**(1), **less**(1), **head**(1), **passwd**(1), **tail**(1), and **wc**(1) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 176, "fields": {"title": "QUIZ : EXECUTING COMMANDS USING THE BASH SHELL", "slug": "quiz-executing-commands-using-the-bash-shell", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/executing-command-using-bash/](https://course.btech.id/quiz/executing-command-using-bash/)\r\n to start working on the quiz", "order": 6, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 177, "fields": {"title": "LAB : ACCESSING THE COMMAND LINE", "slug": "lab-accessing-the-command-line", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will use the Bash shell to execute commands.\r\n\r\n##OUTCOMES<br>\r\n* Successfully run simple programs using the Bash shell command line.  \r\n* Execute commands used to identify file types and display parts of text files.  \r\n* Practice using some Bash command history \"shortcuts\" to more efficiently repeat commands or parts of commands.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to `workstation` as `student` using `student` as the password.\r\n\r\nOn workstation, run the **lab cli-review start** script to set up a clean lab environment. The script also copies the **zcat** file to student's home directory.\r\n\r\n```bash\r\n[student@workstation ~]$ lab cli-review start\r\n```\r\n\r\n**1.** Use the **date** command to display the current time and date.<br><br>\r\n**2.** Display the current time in 12-hour clock time (for example, 11:42:11 AM). Hint: The format string that displays that output is **%r.**<br><br>\r\n**3.** What kind of file is **/home/student/zcat?** Is it readable by humans?<br><br>\r\n**4.** Use the **wc** command and Bash shortcuts to display the size of **zcat.**<br><br>\r\n**5.** Display the first 10 lines of **zcat.**<br><br>\r\n**6.** Display the last 10 lines of the **zcat** file.<br><br>\r\n**7.** Repeat the previous command exactly with three or fewer keystrokes.<br><br>\r\n**8.** Repeat the previous command, but use the **-n 20** option to display the last 20 lines in the file. Use command-line editing to accomplish this with a minimal number of keystrokes.<br><br>\r\n**9.** Use the shell history to run the **date +%r** command again.<br><br>\r\n\r\n**Evaluation**<br><br>\r\nOn workstation, run the **lab cli-review grade** script to confirm success on this exercise.\r\n```bash\r\n[student@workstation ~]$ lab cli-review grade\r\n```\r\n\r\n**Finish**<br><br>\r\nOn workstation, run the **lab cli-review finish** script to complete the lab.\r\n```bash\r\n[student@workstation ~]$ lab cli-review finish\r\n```  \r\nThis concludes the lab.", "order": 7, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 178, "fields": {"title": "SOLUTIONS : ACCESSING THE COMMAND LINE", "slug": "solutions-accessing-the-command-line", "content": "", "content_md": "##SOLUTIONS : <br>\r\n## ACCESSING THE COMMAND LINE<br>\r\n##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will use the Bash shell to execute commands.\r\n\r\n\r\n##OUTCOMES<br>\r\n* Successfully run simple programs using the Bash shell command line.\r\n* Execute commands used to identify file types and display parts of text files.\r\n* Practice using some Bash command history \"shortcuts\" to more efficiently repeat\r\ncommands or parts of commands.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to `workstation` as `student` using `student` as the password.<br>\r\nOn workstation, run the **lab cli-review start** script to set up a clean lab environment. The script also copies the zcat file to student's home directory.\r\n\r\n```bash\r\n[student@workstation ~]$ lab cli-review start\r\n```\r\n\r\n**1.** Use the **date** command to display the current time and date.<br>\r\n```bash\r\n[student@workstation ~]$ date\r\nThu Jan 22 10:13:04 PDT 2019\r\n```\r\n\r\n\r\n**2.** Display the current time in 12-hour clock time (for example, 11:42:11 AM). Hint: The format string that displays that output is **%r.**<br>\r\nUse the **+%r** argument with the **date** command to display the current time in 12-hour clock\r\ntime.<br>\r\n```bash\r\n[student@workstation ~]$ date +%r\r\n10:14:07 AM\r\n```\r\n\r\n**3.** What kind of file is **/home/student/zcat**? Is it readable by humans? Use the **file** command to determine its file type.<br>\r\n```bash\r\n[student@workstation ~]$ file zcat\r\nzcat: POSIX shell script, ASCII text executable\r\n```\r\n\r\n**4.** Use the **wc** command and Bash shortcuts to display the size of **zcat**.<br> The **wc**  command can be used to display the number of lines, words, and bytes in the **zcat** script. Instead of retyping the file name, use the Bash history shortcut **Esc+**. (the keys **Esc** and . pressed at the same time) to reuse the argument from the previous command.<br>\r\n```bash\r\n[student@workstation ~]$ wc Esc+.\r\n[student@workstation ~]$ wc zcat\r\n  51  299 1983 zcat\r\n```\r\n\r\n**5.** Display the first 10 lines of **zcat**.<br>\r\nThe **head** command displays the beginning of the file. Try using the **Esc+**. shortcut again.<br>\r\n```bash\r\n[student@workstation ~]$ head Esc+.\r\n[student@workstation ~]$ head zcat\r\n#!/bin/sh\r\n# Uncompress files to standard output.\r\n\r\n# Copyright (C) 2007, 2010-2018 Free Software Foundation, Inc.\r\n\r\n#This program is free software; you can redistribute it and/or modify\r\n#it under the terms of the GNU General Public License as published by\r\n#the Free Software Foundation; either version 3 of the License, or\r\n#(at your option) any later version\r\n```\r\n\r\n**6.** Display the last 10 lines of the **zcat** file.<br>\r\nUse the **tail** command to display the last 10 lines of the **zcat** file.<br>\r\n```bash\r\n[student@workstation ~]$ tail Esc+.\r\n[student@workstation ~]$ tail zcat\r\nWith no FILE, or when FILE is -, read standard input.\r\n\r\nReport bugs to <bug-gzip@gnu.org>.\"\r\n\r\ncase $1 in\r\n--help)      printf '%s\\n' \"$usage\" || exit 1;;\r\n--version) printf '%s\\n' \"$version\" || exit 1;;\r\nesac\r\n\r\nexec gzip -cd \"$@\"\r\n```\r\n\r\n**7.** Repeat the previous command exactly with three or fewer keystrokes.<br>\r\nRepeat the previous command exactly. Either press the **UpArrow** key once to scroll back through the command history one command and then press **Enter** (uses two keystrokes), or enter the shortcut command !! and then press **Enter** (uses three keystrokes) to run the most recent command in the command history . (Try both.)<br>\r\n\r\n```bash\r\n[student@workstation]$ !!\r\ntail zcat\r\nWith no FILE, or when FILE is -, read standard input.\r\n\r\nReport bugs to <bug-gzip@gnu.org>.\"\r\n\r\ncase $1 in\r\n--help)    printf '%s\\n' \"$usage\"   || exit 1;;\r\n--version) printf '%s\\n' \"$version\" || exit 1;;\r\nesac\r\n\r\nexec gzip -cd \"$@\"\r\n```\r\n\r\n**8.** Repeat the previous command, but use the **-n 20** option to display the last 20 lines in the file. Use command-line editing to accomplish this with a minimal number of keystrokes.<br> **UpArrow** displays the previous command. **Ctrl+A** makes the cursor jump to the beginning of the line. **Ctrl+RightArrow** jumps to the next word, then add the **-n 20** option and hit **Enter** to execute the command.<br>\r\n\r\n```bash\r\n[student@workstation ~]$ tail -n 20 zcat\r\n-l, --list          list compressed file contents\r\n-q, --quiet         suppress all warnings\r\n-r, --recursive     operate recursively on directories\r\n-S, --suffix=SUF    use suffix SUF on compressed files\r\n    --synchronous   synchronous output (safer if system crashes, but slower)\r\n-t, --test          test compressed file integrity\r\n-v, --verbose       verbose mode\r\n    --help          display this help and exit\r\n    --version       display version information and exit\r\n\r\n\r\nWith no FILE, or when FILE is -, read standard input.\r\n\r\nReport bugs to <bug-gzip@gnu.org>.\"\r\n\r\ncase $1 in \r\n--help)    printf '%s\\n' \"$usage\"   || exit 1; exit;;\r\n--version) printf '%s\\n' \"$version\" || exit 1; exit;;\r\nesac\r\n\r\nexec gzip -cd \"$@\"\r\n\r\n```\r\n\r\n**9.** Use the shell history to run the **date +%r** command again<br>\r\nUse the **history** command to display the list of previous commands and to identify the specific **date** command to be executed. Use **!number** to run the command, where number is the command number to use from the output of the **history** command.<br>\r\nNote that your shell history may be different from the following example. Determine the command number to use based on the output of your own **history** command.<br>\r\n\r\n```bash\r\n[student@workstation ~]$ history\r\n1 date\r\n2 date +%r\r\n3 file zcat\r\n4 wc zcat\r\n5 head zcat\r\n6 tail zcat\r\n7 tail -n 20 zcat\r\n8 history\r\n[student@workstation ~]$ !2\r\ndate +%r\r\n10:49:56 AM\r\n\r\n```\r\n\r\n**Evaluation**<br><br>\r\nOn workstation, run the **lab cli-review grade** script to confirm success on this exercise.\r\n```bash\r\n[student@workstation ~]$ lab cli-review grade\r\n```\r\n\r\n**Finish**<br><br>\r\nOn workstation, run the **lab cli-review finish** script to complete the lab.\r\n```bash\r\n[student@workstation ~]$ lab cli-review finish\r\n```  \r\nThis concludes the lab.", "order": 8, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 179, "fields": {"title": "SUMMARY", "slug": "summary", "content": "", "content_md": "####In this chapter, you learned:\r\n- The Bash shell is a command interpreter that prompts interactive users to specify Linux commands.\r\n- Many commands have a --help option that displays a usage message or screen.\r\n- Using workspaces makes it easier to organize multiple application windows.\r\n- The Activities button located at the upper-left corner of the top bar provides an overview mode that helps a user organize windows and start applications.\r\n- The file command scans the beginning of a file's contents and displays what type it is.\r\n- The head and tail commands display the beginning and end of a file, respectively.\r\n- You can use Tab completion to complete file names when typing them as arguments to commands.", "order": 9, "is_visible": true, "is_task": false, "module": 28, "draft": false, "files": []}}, {"model": "courses.section", "pk": 180, "fields": {"title": "DESCRIBING LINUX FILE SYSTEM HIERARCHY CONCEPTS", "slug": "describing-linux-file-system-hierarchy-concepts", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to describe how Linux organizes files, and the purposes of various directories in the file-system hierarchy.\r\n\r\n##THE FILE-SYSTEM HIERARCHY<br>\r\nAll files on a Linux system are stored on file systems, which are organized into a single inverted tree of directories, known as a file-system hierarchy. This tree is inverted because the root of the tree is said to be at the top of the hierarchy, and the branches of directories and sub directories stretch below the root.\r\n\r\n![](/media/markdownx/ab154f37-5ec3-49b0-99a4-79a760a92d79.png)\r\n\r\nThe `/` directory is the root directory at the top of the file-system hierarchy. The `/` character is also used as a directory separator in file names. For example, if etc is a sub directory of the `/` directory, you could refer to that directory as `/etc`. Likewise, if the `/etc` directory contained a file named issue, you could refer to that file as `/etc/issue`.\r\n\r\nSub directories of `/` are used for standardized purposes to organize files by type and purpose. This makes it easier to find files. For example, in the root directory, the sub directory `/boot` is used for storing files needed to boot the system.  \r\n\r\n> **NOTE**  \r\n> The following terms help to describe file-system directory contents:<br><br>\r\n>     \u2022 static content remains unchanged until explicitly edited or reconfigured.<br>\r\n>     \u2022 dynamic or variable content may be modified or appended by active processes.<br>\r\n>     \u2022 persistent content remains after a reboot, like configuration settings.<br>\r\n>     \u2022 runtime content is process- or system-specific content that is deleted by a reboot.<br><br>\r\n \r\nThe following table lists some of the most important directories on the system by name and purpose.\r\n  \r\n<br>\r\n#### **Important Red Hat Enterprise Linux Directories**\r\n<br>\r\n![](/media/markdownx/7fb239a2-f51b-4daa-b53c-eb32fe4546e7.png)\r\n\r\n> **IMPORTANT**  \r\n>  In Red Hat Enterprise Linux 7 and later, four older directories in / have identical contents to their counterparts located in /usr:<br><br>\r\n\t\u2022 `/bin` and `/usr/bin`<br>\r\n\t\u2022 `/sbin` and `/usr/sbin`<br>\r\n\t\u2022 `/lib` and `/usr/lib`<br>\r\n\t\u2022 `/lib64` and `/usr/lib64`<br><br>\r\n> In earlier versions of Red Hat Enterprise Linux, these were distinct directories containing different sets of files.<br>\r\n> In Red Hat Enterprise Linux 7 and later, the directories in / are symbolic links to the matching directories in /usr.\r\n\r\n<br>\r\n>**REFERENCES**<br>\r\n>**hier**(7) man page\r\n>\r\n>**The UsrMove feature page from Fedora 17**\r\n>https://fedoraproject.org/wiki/Features/UsrMove", "order": 1, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 181, "fields": {"title": "QUIZ : DESCRIBING LINUX FILE SYSTEM HIERARCHY CONCEPTS", "slug": "quiz-describing-linux-file-system-hierarchy-concepts", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/describing-linux-file-systems/](https://course.btech.id/quiz/describing-linux-file-systems/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 182, "fields": {"title": "SPECIFYING FILES BY NAME", "slug": "specifying-files-by-name", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to specify the location of files relative to the\r\ncurrent working directory and by absolute location, determine and change the working directory,\r\nand list the contents of directories.\r\n\r\n\r\n##ABSOLUTE PATHS AND RELATIVE PATHS<br>\r\n\r\n\r\n![](/media/markdownx/83d5a261-3305-4414-8a1f-1e30c8d366b3.png)\r\n\r\nThe path of a file or directory specifies its unique file system location. Following a file path\r\ntraverses one or more named subdirectories, delimited by a forward slash (/), until the destination\r\nis reached. Directories, also called folders, contain other files and other subdirectories. They can be\r\nreferenced in the same manner as files.\r\n\r\n>** IMPORTANT **<br>\r\n>A space character is acceptable as part of a Linux file name. However, spaces are\r\n>also used by the shell to separate options and arguments on the command line. If\r\n>you enter a command that includes a file that has a space in its name, the shell can\r\n>misinterpret the command and assume that you want to start a new file name or\r\n>other argument at the space.<br><br>\r\n>It is possible to avoid this by putting file names in quotes. However, if you do not\r\n>need to use spaces in file names, it can be simpler to simply avoid using them.\r\n\r\n\r\n##Absolute Paths<br>\r\nAn absolute path is a fully qualified name, specifying the files exact location in the file system\r\nhierarchy. It begins at the root (/) directory and specifies each subdirectory that must be\r\ntraversed to reach the specific file. Every file in a file system has a unique absolute path name,\r\nrecognized with a simple rule: A path name with a forward slash (/) as the first character is an\r\nabsolute path name. For example, the absolute path name for the system message log file is **/ var/log/messages**. Absolute path names can be long to type, so files may also be located\r\nrelative to the current working directory for your shell prompt.\r\n\r\n##The Current Working Directory and Relative Paths<bR>\r\nWhen a user logs in and opens a command window, the initial location is normally the user's home\r\ndirectory. System processes also have an initial directory. Users and processes navigate to other\r\ndirectories as needed; the terms working directory or current working directory refer to their\r\ncurrent location.\r\n\r\n\r\nLike an absolute path, a relative path identifies a unique file, specifying only the path necessary to\r\nreach the file from the working directory. Recognizing relative path names follows a simple rule: A\r\npath name with anything other than a forward slash as the first character is a relative path name. A\r\nuser in the **/var** directory could refer to the message log file relatively as **log/messages.**\r\nLinux file systems, including, but not limited to, ext4, XFS, GFS2, and GlusterFS, are case-\r\nsensitive. Creating **FileCase.txt** and **filecase.txt** in the same directory results in two\r\nunique files.\r\n\r\n\r\nNon-Linux file systems might work differently. For example, VFAT, Microsoft's NTFS, and Apple's\r\nHFS+ have case preserving behavior. Although these file systems are not case-sensitive, they do\r\ndisplay file names with the original capitalization used when the file was created. Therefore, if\r\nyou tried to make the files in the preceding example on a VFAT file system, both names would be\r\ntreated as pointing to the same file instead of two different files.\r\n\r\n##NAVIGATING PATHS<br>\r\nThe **pwd** command displays the full path name of the current working directory for that shell. This\r\ncan help you determine the syntax to reach files using relative path names. The **ls** command lists\r\ndirectory contents for the specified directory or, if no directory is given, for the current working\r\ndirectory.\r\n\r\n```bash\r\n[user@host ~]$ pwd\r\n/home/user\r\n[user@host ~]$ ls\r\nDesktop Documents Downloads Music Pictures Public Templates Videos\r\n[user@host ~]$\r\n```\r\n\r\nUse the **cd** command to change your shell's current working directory. If you do not specify any\r\narguments to the command, it will change to your home directory.\r\n\r\n\r\nIn the following example, a mixture of absolute and relative paths are used with the **cd** command\r\nto change the current working directory for the shell.\r\n\r\n```bash\r\n[user@host ~]$ pwd\r\n/home/user\r\n[user@host ~]$ cd Videos\r\n[user@host Videos]$ pwd\r\n/home/user/Videos\r\n[user@host Videos]$ cd /home/user/Documents\r\n[user@host Documents]$ pwd\r\n/home/user/Documents\r\n[user@host Documents]$ cd\r\n[user@host ~]$ pwd\r\n/home/user\r\n```\r\n\r\nAs you can see in the preceding example, the default shell prompt also displays the last\r\ncomponent of the absolute path to the current working directory. For example, for **/home/user/\r\nVideos**, only **Videos** displays. The prompt displays the tilde character (~) when your current\r\nworking directory is your home directory.\r\n\r\nThe **touch** command normally updates a file's timestamp to the current date and time\r\nwithout otherwise modifying it. This is useful for creating empty files, which can be used for\r\npractice, because \"touching\" a file name that does not exist causes the file to be created. In the\r\nfollowing example, the **touch** command creates practice files in the **Documents** and **Videos**\r\nsubdirectories.\r\n\r\n```bash\r\n[user@host ~]$ touch Videos/blockbuster1.ogg\r\n[user@host ~]$ touch Videos/blockbuster2.ogg\r\n[user@host ~]$ touch Documents/thesis_chapter1.odf\r\n[user@host ~]$ touch Documents/thesis_chapter2.odf\r\n[user@host ~]$\r\n```\r\n\r\nThe **ls** command has multiple options for displaying attributes on files. The most common and\r\nuseful are **-l** (long listing format), -**a** (all files, including hidden files), and **-R** (recursive, to include\r\nthe contents of all subdirectories).\r\n\r\n\r\n![](/media/markdownx/16a890f8-fc2d-4770-94b5-659f3ad112e9.png)\r\n\r\nThe two special directories at the top of the listing refer to the current directory (.) and the parent\r\ndirectory (..). These special directories exist in every directory on the system. You will discover\r\ntheir usefulness when you start using file management commands.\r\n\r\n>** IMPORTANT**<br>\r\n>File names beginning with a dot (.) indicate hidden files; you cannot see them in the\r\n>normal view using **ls** and other commands. This is not a security feature. Hidden\r\n>files keep necessary user configuration files from cluttering home directories. Many\r\n>commands process hidden files only with specific command-line options, preventing\r\n>one user's configuration from being accidentally copied to other directories or users.\r\n>To protect file contents from improper viewing requires the use of file permissions.\r\n\r\n![](/media/markdownx/345f442b-5966-441e-9afe-3c98c668874d.png)\r\n\r\nThe **cd** command has many options. A few are so useful as to be worth practicing early and using\r\noften. The command **cd** - changes to the previous directory; where the user was previously to\r\nthe current directory. The following example illustrates this behavior, alternating between two\r\ndirectories, which is useful when processing a series of similar tasks.\r\n\r\n![](/media/markdownx/313b6330-8464-47c2-acdf-4e0b2100f3ca.png)\r\n\r\nThe **cd ..** command uses the **..** hidden directory to move up one level to the parent directory,\r\nwithout needing to know the exact parent name. The other hidden directory (.) specifies the\r\ncurrent directory on commands in which the current location is either the source or destination\r\nargument, avoiding the need to type out the directory's absolute path name.\r\n\r\n```bash\r\n[user@host Videos]$ pwd\r\n/home/user/Videos\r\n[user@host Videos]$ cd .\r\n[user@host Videos]$ pwd\r\n/home/user/Videos\r\n[user@host Videos]$ cd ..\r\n[user@host ~]$ pwd\r\n/home/user\r\n[user@host ~]$ cd ..\r\n[user@host home]$ pwd\r\n/home\r\n[user@host home]$ cd ..\r\n[user@host /]$ pwd\r\n/\r\n[user@host /]$ cd\r\n[user@host ~]$ pwd\r\n/home/user\r\n```\r\n\r\n>**REFERENCES**<br>\r\n>**info libc 'file name resolution'** (GNU C Library Reference Manual)\r\n\r\n>\u2022 Section 11.2.2 File name resolution\r\n\r\n>**bash**(1), **cd**(1), **ls**(1), **pwd**(1), **unicode**(7), and **utf-8**(7) man pages\r\n\r\n>**UTF-8 and Unicode**<br>\r\n>http://www.utf-8.com/", "order": 3, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 183, "fields": {"title": "QUIZ : SPECIFYING FILES BY NAME", "slug": "quiz-specifying-files-by-name", "content": "", "content_md": "## QUIZ\r\n\r\nClick to \r\n[https://course.btech.id/quiz/specifying-files-by-name/](https://course.btech.id/quiz/specifying-files-by-name/)\r\n start working on the quiz", "order": 4, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 184, "fields": {"title": "MANAGING FILES USING COMMAND-LINE TOOLS", "slug": "managing-files-using-command-line-tools", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to create, copy, move, and remove files and\r\ndirectories.\r\n\r\n\r\n##COMMAND-LINE FILE MANAGEMENT<br>\r\nTo manage files, you need to be able to create, remove, copy, and move them. You also need to\r\norganize them logically into directories, which you also need to be able to create, remove, copy,\r\nand move.\r\n\r\n\r\nThe following table summarizes some of the most common file management commands. The\r\nremainder of this section will discuss ways to use these commands in more detail.\r\n\r\n**Common file management commands**\r\n\r\n![](/media/markdownx/ff4e3a1d-8700-441d-8f04-e40ab3aca7ac.png)\r\n\r\n##Creating Directories<br>\r\nThe **mkdir** command creates one or more directories or subdirectories. It takes as arguments a\r\nlist of paths to the directories you want to create.\r\n\r\n\r\nThe **mkdir** command will fail with an error if the directory already exists, or if you are trying to\r\ncreate a subdirectory in a directory that does not exist. The **-p** (parent) option creates missing\r\nparent directories for the requested destination. Use the **mkdir -p** command with caution,\r\nbecause spelling mistakes can create unintended directories without generating error messages.\r\n\r\n\r\nIn the following example, pretend that you are trying to create a directory in the **Videos** directory\r\nnamed **Watched**, but you accidentally left off the letter \"s\" in **Videos** in your **mkdir** command.\r\n\r\n```bash\r\n[user@host ~]$ mkdir Video/Watched\r\nmkdir: cannot create directory `Video/Watched': No such file or directory\r\n```\r\n\r\nThe **mkdir** command failed because **Videos** was misspelled and the directory **Video** does not\r\nexist. If you had used the **mkdir** command with the **-p** option, the directory **Video** would be\r\ncreated, which was not what you had intended, and the subdirectory **Watched** would be created in\r\nthat incorrect directory.\r\n\r\n\r\nAfter correctly spelling the **Videos** parent directory, creating the **Watched** subdirectory will\r\nsucceed.\r\n\r\n```bash\r\n[user@host ~]$ mkdir Videos/Watched\r\n[user@host ~]$ ls -R Videos\r\nVideos/:\r\nblockbuster1.ogg blockbuster2.ogg Watched\r\nVideos/Watched:\r\n```\r\n\r\nIn the following example, files and directories are organized beneath the **/home/user/\r\nDocuments** directory. Use the **mkdir** command and a space-delimited list of the directory names\r\nto create multiple directories.\r\n\r\n```bash\r\n[user@host ~]$ cd Documents\r\n[user@host Documents]$ mkdir ProjectX ProjectY\r\n[user@host Documents]$ ls\r\nProjectX ProjectY\r\n```\r\n\r\nUse the **mkdir -p** command and space-delimited relative paths for each of the subdirectory\r\nnames to create multiple parent directories with subdirectories.\r\n\r\n```bash\r\n[user@host Documents]$ mkdir -p Thesis/Chapter1 Thesis/Chapter2 Thesis/Chapter3\r\n[user@host Documents]$ cd\r\n[user@host ~]$ ls -R Videos Documents\r\nDocuments:\r\nProjectX ProjectY Thesis\r\n\r\nDocuments/ProjectX:\r\n\r\nDocuments/ProjectY:\r\n\r\nDocuments/Thesis:\r\nChapter1 Chapter2 Chapter3\r\n\r\nDocuments/Thesis/Chapter1:\r\nDocuments/Thesis/Chapter2:\r\nDocuments/Thesis/Chapter3:\r\n\r\nVideos:\r\nblockbuster1.ogg blockbuster2.ogg Watched\r\n\r\nVideos/Watched:\r\n```\r\n\r\nThe last **mkdir** command created three ChapterN subdirectories with one command. The **-p**\r\noption created the missing parent directory **Thesis**.\r\n\r\n###Copying Files<br>\r\nThe **cp** command copies a file, creating a new file either in the current directory or in a specified\r\ndirectory. It can also copy multiple files to a directory.\r\n\r\n>**WARNING**<br>\r\n>If the destination file already exists, the cp command overwrites the file.\r\n\r\n![](/media/markdownx/33735fef-b3b3-45d2-9730-98e0e150f1c8.png)\r\n\r\n\r\nWhen copying multiple files with one command, the last argument must be a directory. Copied\r\nfiles retain their original names in the new directory. If a file with the same name exists in the target\r\ndirectory, the existing file is overwritten. By default, the **cp** does not copy directories; it ignores\r\nthem.\r\n\r\n\r\nIn the following example, two directories are listed, **Thesis** and **ProjectX**. Only the last\r\nargument, **ProjectX** is valid as a destination. The **Thesis** directory is ignored.\r\n\r\n```bash\r\n[user@host Videos]$ cd ../Documents\r\n[user@host Documents]$ cp thesis_chapter1.odf thesis_chapter2.odf Thesis ProjectX\r\ncp: omitting directory `Thesis'\r\n\r\n[user@host Documents]$ ls Thesis ProjectX\r\nProjectX:\r\nthesis_chapter1.odf thesis_chapter2.odf\r\n\r\nThesis:\r\nChapter1 Chapter2 Chapter3\r\n```\r\n\r\nIn the first **cp** command, the **Thesis** directory failed to copy, but the **thesis_chapter1.odf**\r\nand **thesis_chapter2.odf** files succeeded.\r\n\r\nIf you want to copy a file to the current working directory, you can use the special . directory:\r\n\r\n```bash\r\n[user@host ~]$ cp /etc/hostname .\r\n[user@host ~]$ cat hostname\r\nhost.example.com\r\n[user@host ~]$\r\n```\r\n\r\nUse the copy command with the **-r** (recursive) option, to copy the **Thesis** directory and its\r\ncontents to the **ProjectX** directory.\r\n\r\n```bash\r\n[user@host Documents]$ cp -r Thesis ProjectX\r\n[user@host Documents]$ ls -R ProjectX\r\nProjectX:\r\nThesis thesis_chapter1.odf thesis_chapter2.odf\r\n\r\nProjectX/Thesis:\r\nChapter1 Chapter2 Chapter3\r\n\r\nProjectX/Thesis/Chapter1:\r\nProjectX/Thesis/Chapter2:\r\nthesis_chapter2.odf\r\n\r\nProjectX/Thesis/Chapter3:\r\n```\r\n\r\n##Moving Files<br>\r\nThe **mv** command moves files from one location to another. If you think of the absolute path to a\r\nfile as its full name, moving a file is effectively the same as renaming a file. File contents remain\r\nunchanged.\r\n\r\n\r\nUse the **mv** command to rename a file.\r\n\r\n```bash\r\n[user@host Videos]$ cd ../Documents\r\n[user@host Documents]$ ls -l thesis*\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter1.odf\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter2.odf\r\n\r\n[user@host Documents]$ mv thesis_chapter2.odf thesis_chapter2_reviewed.odf\r\n[user@host Documents]$ ls -l thesis*\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter1.odf\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter2_reviewed.odf\r\n```\r\n\r\nUse the **mv** command to move a file to a different directory.\r\n\r\n```bash\r\n[user@host Documents]$ ls Thesis/Chapter1\r\n[user@host Documents]$\r\n[user@host Documents]$ mv thesis_chapter1.odf Thesis/Chapter1\r\n[user@host Documents]$ ls Thesis/Chapter1\r\nthesis_chapter1.odf\r\n[user@host Documents]$ ls -l thesis*\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter2_reviewed.odf\r\n```\r\n\r\n##Removing Files and Directories<br>\r\nThe **rm** command removes files. By default, **rm** will not remove directories that contain files, unless\r\nyou add the **-r** or **--recursive** option.\r\n\r\n>**IMPORTANT**<br>\r\n>There is no command-line undelete feature, nor a \"trash bin\" from which you can\r\n>restore files staged for deletion.\r\n\r\nIt is a good idea to verify your current working directory before removing a file or directory.\r\n\r\n```bash\r\n[user@host Documents]$ pwd\r\n/home/student/Documents\r\n```\r\n\r\nUse the **rm** command to remove a single file from your working directory.\r\n\r\n```bash\r\n[user@host Documents]$ ls -l thesis*\r\n-rw-rw-r--. 1 user user 0 Feb 6 21:16 thesis_chapter2_reviewed.odf\r\n[user@host Documents]$ rm thesis_chapter2_reviewed.odf\r\n[user@host Documents]$ ls -l thesis*\r\nls: cannot access 'thesis*': No such file or directory\r\n```\r\n\r\nIf you attempt to use the **rm** command to remove a directory without using the **-r** option, the command will fail.\r\n\r\n```bash\r\n[user@host Documents]$ rm Thesis/Chapter1\r\nrm: cannot remove `Thesis/Chapter1': Is a directory\r\n```\r\n\r\nUse the **rm -r** command to remove a subdirectory and its contents.\r\n\r\n```bash\r\n[user@host Documents]$ ls -R Thesis\r\nThesis/:\r\nChapter1 Chapter2 Chapter3\r\n\r\nThesis/Chapter1:\r\nthesis_chapter1.odf\r\n\r\nThesis/Chapter2:\r\nthesis_chapter2.odf\r\n\r\nThesis/Chapter3:\r\n[user@host Documents]$ rm -r Thesis/Chapter1\r\n[user@host Documents]$ ls -l Thesis\r\ntotal 8\r\ndrwxrwxr-x. 2 user user 4096 Feb 11 12:47 Chapter2\r\ndrwxrwxr-x. 2 user user 4096 Feb 11 12:48 Chapter3\r\n```\r\n\r\nThe **rm -r** command traverses each subdirectory first, individually removing their files before\r\nremoving each directory. You can use the **rm -ri** command to interactively prompt for\r\nconfirmation before deleting. This is essentially the opposite of using the **-f** option, which forces\r\nthe removal without prompting the user for confirmation.\r\n\r\n\r\n```bash\r\n[user@host Documents]$ rm -ri Thesis\r\nrm: descend into directory `Thesis'? y\r\nrm: descend into directory `Thesis/Chapter2'? y\r\nrm: remove regular empty file `Thesis/Chapter2/thesis_chapter2.odf'? y\r\nrm: remove directory `Thesis/Chapter2'? y\r\nrm: remove directory `Thesis/Chapter3'? y\r\nrm: remove directory `Thesis'? y\r\n[user@host Documents]$\r\n```\r\n\r\n>**WARNING**<br>\r\n>If you specify both the **-i** and **-f** options, the **-f** option takes priority and you will\r\n>not be prompted for confirmation before **rm** deletes files.\r\n\r\nIn the following example, the **rmdir** command only removes the directory that is empty. Just\r\nlike the earlier example, you must use the **rm -r** command to remove a directory that contains\r\ncontent.\r\n\r\n```bash\r\n[user@host Documents]$ pwd\r\n/home/student/Documents\r\n[user@host Documents]$ rmdir ProjectY\r\n[user@host Documents]$ rmdir ProjectX\r\nrmdir: failed to remove `ProjectX': Directory not empty\r\n[user@host Documents]$ rm -r ProjectX\r\n[user@host Documents]$ ls -lR\r\n.:\r\ntotal 0\r\n```\r\n\r\n> **NOTE**<br>\r\n>The **rm** command with no options cannot remove an empty directory. You must use\r\n>the **rmdir** command, **rm -d** (which is equivalent to **rmdir**), or **rm -r**.\r\n\r\n<br>\r\n>** REFERENCES**<br>\r\n>**cp**(1), **mkdir**(1), **mv**(1), **rm**(1), and **rmdir**(1) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 185, "fields": {"title": "GUIDED EXERCISE : MANAGING FILES USING COMMAND- LINE TOOLS", "slug": "guided-exercise-managing-files-using-command-line-tools", "content": "", "content_md": "In this exercise you will create, organize, copy, and remove files and directories.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to create, organize, copy, and remove files and directories.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\nOn workstation, run the **lab files-manage start** command. This command runs a\r\nstart script that determines if the servera machine is reachable on the network.\r\n```bash\r\n[student@workstation ~]$ lab files-manage start\r\n\r\n```\r\n\r\n* 1.Use the **ssh** command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, therefore a password is not required.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n* 2.In the student user's home directory, use the **mkdir** command to create three\r\nsubdirectories: **Music**, **Pictures**, and **Videos.**\r\n```bash\r\n[student@servera ~]$ mkdir Music Pictures Videos\r\n```\r\n* 3.Continuing in the student user's home directory, use the **touch** command to create sets\r\nof empty practice files to use during this lab.<br>\r\n\t\u2022 Create six files with names of the form **songX.mp3**.<br>\r\n\t\u2022 Create six files with names of the form **snapX.jpg**.<br>\r\n\t\u2022 Create six files with names of the form **filmX.avi**.<br>\r\nIn each set, replace X with the numbers 1 through 6.<br>\r\n\r\n```bash\r\n[student@servera ~]$ touch song1.mp3 song2.mp3 song3.mp3 song4.mp3 \\\r\nsong5.mp3 song6.mp3\r\n[student@servera ~]$ touch snap1.jpg snap2.jpg snap3.jpg snap4.jpg \\\r\nsnap5.jpg snap6.jpg\r\n[student@servera ~]$ touch film1.avi film2.avi film3.avi film4.avi \\\r\nfilm5.avi film6.avi\r\n```\r\n\r\n![](/media/markdownx/4de8f2bf-9c80-487d-b33f-087a8bf8e777.png)\r\n\r\n* 4.Continuing in the student user's home directory, move the song files to the **Music** subdirectory, the snapshot files to the **Pictures** subdirectory, and the movie files to the\r\n**Videos** subdirectory.\r\n\r\nWhen distributing files from one location to many locations, first change to the directory\r\ncontaining the source files. Use the simplest path syntax, absolute or relative, to reach the\r\ndestination for each file management task.\r\n\r\n![](/media/markdownx/78aeedf1-4e3f-43f7-8efa-0517546b9aa4.png)\r\n\r\n* 5.Continuing in the student user's home directory, create three subdirectories for\r\norganizing your files into projects. Name the subdirectories **friends**, **family**, and **work**.\r\nUse a single command to create all three subdirectories at the same time.\r\nYou will use these directories to rearrange your files into projects.\r\n\r\n```bash\r\n[student@servera ~]$ mkdir friends family work\r\n[student@servera ~]$ ls -l\r\ntotal 0\r\ndrwxrwxr-x. 2 student student   6 feb 4 18:38 family\r\ndrwxrwxr-x. 2 student student   6 feb 4 18:38 friends\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Music\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Pictures\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Videos\r\ndrwxrwxr-x. 2 student student   6 feb 4 18:38 work\r\n```\r\n\r\n* 6.Copy a selection of new files to the project directories **family** and **friends**. Use as\r\nmany commands as needed. You do not have to use only one command as in the example.\r\nFor each project, first change to the project directory, then copy the source files to this\r\ndirectory. Keep in mind that you are making copies, therefore the original files will remain in\r\ntheir original locations after the files are copied to the project directories. <br>\r\n\t\u2022 Copy files (all types) containing the numbers 1 and 2 in to the **friends** subdirectory.<br>\r\n\t\u2022 Copy files (all types) containing the numbers 3 and 4 in to the **family** subdirectory.<br>\r\nWhen copying files from multiple locations into a single location, Red Hat recommends that\r\nyou change to the destination directory prior to copying the files. Use the simplest path\r\nsyntax, absolute or relative, to reach the source for each file management task.\r\n\r\n![](/media/markdownx/e4339786-a27e-470c-b2ad-4de36416a170.png)\r\n\r\n* 7.For your work project, create additional copies.\r\n\r\n![](/media/markdownx/fc3a3793-1423-41e0-aa55-fbb7a5362661.png)\r\n\r\n* 8.Your project tasks are now complete, and it is time to clean up the projects.\r\nChange to the student user's home directory. Attempt to delete both the **family** and\r\n**friends** project directories with a single **rmdir** command.\r\n\r\n```bash\r\n[student@servera work]$ cd\r\n[student@servera ~]$ rmdir family friends\r\nrmdir: failed to remove 'family': Directory not empty\r\nrmdir: failed to remove 'friends': Directory not empty\r\n```\r\n\r\nUsing the **rmdir** command should fail because both subdirectories contain files.\r\n\r\n* 9.Use the **rm -r** command to recursively delete both the **family** and **friends**\r\nsubdirectories and their contents.\r\n\r\n```bash\r\n[student@servera ~]$ rm -r family friends\r\n[student@servera ~]$ ls -l\r\ntotal 0\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Music\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Pictures\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Videos\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:48 work\r\n\r\n```\r\n\r\n* 10.Delete all the files in the work project, but do not delete the work directory.\r\n\r\n```bash\r\n[student@servera ~]$ cd work\r\n[student@servera work]$ rm song5.mp3 song6.mp3 snap5.jpg snap6.jpg \\\r\nfilm5.avi film6.avi\r\n[student@servera work]$ ls -l\r\ntotal 0\r\n```\r\n\r\n* 11.Finally, from the student user's home directory, use the **rmdir** command to delete the\r\n**work** directory. The command should succeed now that it is empty.\r\n\r\n```bash\r\n[student@servera work]$ cd\r\n[student@servera ~]$ rmdir work\r\n[student@servera ~]$ ls -l\r\ntotal 0\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Music\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Pictures\r\ndrwxrwxr-x. 2 student student 108 feb 4 18:36 Videos\r\n```\r\n\r\n* 12.Exit from servera.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run the **lab files-manage finish** script to finish this exercise. The script\r\nwill remove all directories and files created during this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab files-manage finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 186, "fields": {"title": "MAKING LINKS BETWEEN FILES", "slug": "making-links-between-files", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to make multiple file names reference the same\r\nfile using hard links and symbolic (or \"soft\") links.\r\n\r\n##MANAGING LINKS BETWEEN FILES<br>\r\nHard Links and Soft Links\r\nIt is possible to create multiple names that point to the same file. There are two ways to do this:\r\nby creating a hard link to the file, or by creating a soft link (sometimes called a symbolic link) to the\r\nfile. Each has its advantages and disadvantages.\r\n\r\n\r\n###Creating Hard Links<br>\r\nEvery file starts with a single hard link, from its initial name to the data on the file system. When\r\nyou create a new hard link to a file, you create another name that points to that same data. The\r\nnew hard link acts exactly like the original file name. Once created, you cannot tell the difference\r\nbetween the new hard link and the original name of the file.\r\n\r\n\r\nYou can find out if a file has multiple hard links with the **ls -l** command. One of the things it\r\nreports is each file's link count, the number of hard links the file has.\r\n\r\n```bash\r\n[user@host ~]$ pwd\r\n/home/user\r\n[user@host ~]$ ls -l newfile.txt\r\n-rw-r--r--. 1 user user 0 Mar 11 19:19 newfile.txt\r\n```\r\n\r\nIn the preceding example, the link count of **newfile.txt** is 1. It has exactly one absolute path,\r\nwhich is **/home/user/newfile.txt**.\r\n\r\n\r\nYou can use the **ln** command to create a new hard link (another name) that points to an existing\r\nfile. The command needs at least two arguments, a path to the existing file, and the path to the\r\nhard link that you want to create.\r\n\r\n\r\nThe following example creates a hard link named **newfile-link2.txt** for the existing file\r\n**newfile.txt** in the **/tmp** directory.\r\n\r\n```bash\r\n[user@host ~]$ ln newfile.txt /tmp/newfile-hlink2.txt\r\n[user@host ~]$ ls -l newfile.txt /tmp/newfile-hlink2.txt\r\n-rw-rw-r--. 2 user user 12 Mar 11 19:19 newfile.txt\r\n-rw-rw-r--. 2 user user 12 Mar 11 19:19 /tmp/newfile-hlink2.txt\r\n```\r\n\r\nIf you want to find out whether two files are hard links of each other, one way is to use the **-i**\r\noption with the **ls** command to list the files' inode number. If the files are on the same file system\r\n(discussed in a moment) and their inode numbers are the same, the files are hard links pointing to\r\nthe same data.\r\n\r\n```bash\r\n[user@host ~]$ ls -il newfile.txt /tmp/newfile-hlink2.txt\r\n8924107 -rw-rw-r--. 2 user user 12 Mar 11 19:19 newfile.txt\r\n8924107 -rw-rw-r--. 2 user user 12 Mar 11 19:19 /tmp/newfile-hlink2.txt\r\n```\r\n\r\n>** IMPORTANT**<br>\r\n>All hard links that reference the same file will have the same link count, access\r\n>permissions, user and group ownerships, time stamps, and file content. If any of that\r\n>information is changed using one hard link, all other hard links pointing to the same\r\n>file will show the new information as well. This is because each hard link points to the\r\n>same data on the storage device.\r\n\r\nEven if the original file gets deleted, the contents of the file are still available as long as at least\r\none hard link exists. Data is only deleted from storage when the last hard link is deleted.\r\n\r\n```bash\r\n[user@host ~]$ rm -f newfile.txt\r\n[user@host ~]$ ls -l /tmp/newfile-hlink2.txt\r\n-rw-rw-r--. 1 user user 12 Mar 11 19:19 /tmp/newfile-hlink2.txt\r\n[user@host ~]$ cat /tmp/newfile-hlink2.txt\r\nHello World\r\n```\r\n\r\n###Limitations of Hard Links<br>\r\nHard links have some limitations. Firstly, hard links can only be used with regular files. You cannot use **ln** to create a hard link to a directory or special file.\r\n\r\nSecondly, hard links can only be used if both files are on the same file system. The file-system\r\nhierarchy can be made up of multiple storage devices. Depending on the configuration of your\r\nsystem, when you change into a new directory, that directory and its contents may be stored on a different file system.\r\n\r\nYou can use the **df** command to list the directories that are on different file systems. For example, you might see output like the following:\r\n\r\n![](/media/markdownx/deeae700-3110-4f79-b2e3-487197c2a665.png)\r\n\r\nFiles in two different \"Mounted on\" directories and their subdirectories are on different file\r\nsystems. (The most specific match wins.) So, the system in this example, you can create a hard\r\nlink between **/var/tmp/link1** and **/home/user/file** because they are both subdirectories\r\nof **/** but not any other directory on the list. But you cannot create a hard link between **/boot/test/badlink** and **/home/user/file** because the first file is in a subdirectory of **/boot** (on\r\nthe \"Mounted on\" list) and the second file is not.\r\n\r\n###Creating Soft Links<br>\r\nThe **ln -s** command creates a soft link, which is also called a \"symbolic link.\" A soft link is not a regular file, but a special type of file that points to an existing file or directory.\r\nSoft links have some advantages over hard links:<br>\r\n\t\u2022 They can link two files on different file systems.<br>\r\n\t\u2022 They can point to a directory or special file, not just a regular file.<br>\r\nIn the following example, the **ln -s** command is used to create a new soft link for the existing file\r\n**/home/user/newfile-link2.txt** that will be named **/tmp/newfile-symlink.txt.**\r\n\r\n```bash\r\n[user@host ~]$ ln -s /home/user/newfile-link2.txt /tmp/newfile-symlink.txt\r\n[user@host ~]$ ls -l newfile-link2.txt /tmp/newfile-symlink.txt\r\n-rw-rw-r--. 1 user user 12 Mar 11 19:19 newfile-link2.txt\r\nlrwxrwxrwx. 1 user user 11 Mar 11 20:59 /tmp/newfile-symlink.txt -> /home/user/\r\nnewfile-link2.txt\r\n[user@host ~]$ cat /tmp/newfile-symlink.txt\r\nSoft Hello World\r\n```\r\n\r\nIn the preceding example, the first character of the long listing for **/tmp/newfile-\r\nsymlink.txt** is **1** instead of **-**. This indicates that the file is a soft link and not a regular file. (A **d** would indicate that the file is a directory.)\r\nWhen the original regular file gets deleted, the soft link will still point to the file but the target is gone. A soft link pointing to a missing file is called a \"dangling soft link.\"\r\n\r\n```bash\r\n[user@host ~]$ rm -f newfile-link2.txt\r\n[user@host ~]$ ls -l /tmp/newfile-symlink.txt\r\nlrwxrwxrwx. 1 user user 11 Mar 11 20:59 /tmp/newfile-symlink.txt -> /home/user/\r\nnewfile-link2.txt\r\n[user@host ~]$ cat /tmp/newfile-symlink.txt\r\ncat: /tmp/newfile-symlink.txt: No such file or directory\r\n```\r\n\r\n>** IMPORTANT **<br>\r\n>One side-effect of the dangling soft link in the preceding example is that if you later\r\n>create a new file with the same name as the deleted file (/home/user/newfile-\r\n>link2.txt), the soft link will no longer be \"dangling\" and will point to the new file.<br><br>\r\n>Hard links do not work like this. If you delete a hard link and then use normal tools\r\n>(rather than ln) to create a new file with the same name, the new file will not be\r\n>linked to the old file.<br><br>\r\n>One way to compare hard links and soft links that might help you understand how\r\n>they work:<br>\r\n>\t\u2022 A hard link points a name to data on a storage device<br>\r\n>\t\u2022 A soft link points a name to another name, that points to data on a storage device <br>\r\n\r\nA soft link can point to a directory. The soft link then acts like a directory. Changing to the soft\r\nlink with **cd** will make the current working directory the linked directory. Some tools may keep track of the fact that you followed a soft link to get there. For example, by default **cd** will update your current working directory using the name of the soft link rather than the name of the actual directory. (There is an option, **-P**, that will update it with the name of the actual directory instead.)\r\n\r\nIn the following example, a soft link named **/home/user/configfiles** is created that points to\r\nthe **/etc** directory.\r\n\r\n```bash\r\n[user@host ~]$ ln -s /etc /home/user/configfiles\r\n[user@host ~]$ cd /home/user/configfiles\r\n[user@host configfiles]$ pwd\r\n/home/user/configfiles\r\n```\r\n\r\n<br>\r\n>**REFERENCES**<br>\r\n>**ln**(1) man page<br>\r\n>**info ln **(\u2018ln\u2019: Make links between files)", "order": 7, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 187, "fields": {"title": "GUIDED EXERCISE : MAKING LINKS BETWEEN FILES", "slug": "guided-exercise-making-links-between-files", "content": "", "content_md": "In this exercise, you will create hard links and symbolic links and compare the results.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to create hard links and soft links between files.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\n\r\nOn workstation, run the **lab files-make start** command. This command runs a start\r\nscript that determines if the servera host is reachable on the network and creates the files\r\nand working directories on servera.\r\n```bash\r\n[student@workstation ~]$ lab files-make start\r\n```\r\n\r\n* 1.Use the **ssh** command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, and therefore a password is not required.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Create a hard link named **/home/student/backups/source.backup** for the existing\r\nfile, **/home/student/files/source.file**.\r\n\t* 2.1. View the link count for the file, **/home/student/files/source.file.**\r\n\r\n\r\n```bash\r\n[student@servera ~]$ ls -l files/source.file\r\ntotal 4\r\n-rw-r--r--. 1 student student 11 Mar 5 21:19 source.file\r\n```\r\n* 2.2. Create a hard link named **/home/student/backups/source.backup**. Link it to the file, **/home/student/files/source.file**.\r\n\r\n```bash\r\n[student@servera ~]$ ln /home/student/files/source.file \\\r\n/home/student/backups/source.backup\r\n```\r\n\r\n* 2.3. Verify the link count for the original **/home/student/files/source.file** and\r\nthe new linked file, **/home/student/backups/source.backup**. The link count\r\nshould be 2 for both files.\r\n\r\n```bash\r\n[student@servera ~]$ ls -l /home/student/files/\r\n-rw-r--r--. 2 student student 11 Mar 5 21:19 source.file\r\n[student@servera ~]$ ls -l /home/student/backups/\r\n-rw-r--r--. 2 student student 11 Mar 5 21:19 source.backup\r\n```\r\n\r\n* 3.Create a soft link named **/home/student/tempdir** that points to the **/tmp** directory on servera.\r\n\r\n\t* 3.1. Create a soft link named **/home/student/tempdir** and link it to **/tmp**.\r\n```bash\r\n[student@servera ~]$ ln -s /tmp /home/student/tempdir\r\n```\r\n\r\n* 3.2. Use the **ls -l** command to verify the newly created soft link.\r\n\r\n```bash\r\n[student@servera ~]$ ls -l /home/student/tempdir\r\nlrwxrwxrwx. 1 student student 4 Mar 5 22:04 /home/student/tempdir - > /tmp\r\n```\r\n\r\n\r\n* 4.Exit from servera\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run the **lab files-make finish** script to finish this exercise. This script\r\nremoves all files and directories created on servera during the exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab files-make finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 188, "fields": {"title": "MATCHING FILE NAMES WITH SHELL EXPANSIONS", "slug": "matching-file-names-with-shell-expansions", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to efficiently run commands affecting many files\r\nby using pattern matching features of the Bash shell.\r\n\r\n\r\n##COMMAND-LINE EXPANSIONS<br>\r\nThe Bash shell has multiple ways of expanding a command line including pattern matching, home\r\ndirectory expansion, string expansion, and variable substitution. Perhaps the most powerful\r\nof these is the path name-matching capability, historically called globbing. The Bash globbing\r\nfeature, sometimes called \u201cwildcards\u201d, makes managing large numbers of files easier. Using\r\nmetacharacters that \u201cexpand\u201d to match file and path names being sought, commands perform on a\r\nfocused set of files at once.\r\n\r\n\r\n###Pattern Matching<br>\r\nGlobbing is a shell command-parsing operation that expands a wildcard pattern into a list of\r\nmatching path names. Command-line metacharacters are replaced by the match list prior to\r\ncommand execution. Patterns that do not return matches display the original pattern request as\r\nliteral text. The following are common metacharacters and pattern classes.\r\n\r\n**Table of Metacharacters and Matches**\r\n\r\n![](/media/markdownx/3e1f1e81-6267-4673-ab7b-c72e8a797bf9.png)\r\n\r\nFor the next few examples, pretend that you have run the following commands to create some\r\nsample files.\r\n\r\n```bash\r\n[user@host ~]$ mkdir glob; cd glob\r\n[user@host glob]$ touch alfa bravo charlie delta echo able baker cast dog easy\r\n[user@host glob]$ ls\r\nable alfa baker bravo cast charlie delta dog easy echo\r\n[user@host glob]$\r\n\r\n```\r\n\r\nThe first example will use simple pattern matches with the asterisk (*) and question mark (?)\r\ncharacters, and a class of characters, to match some of those file names.\r\n\r\n```bash\r\n[user@host glob]$ ls a*\r\nable alfa\r\n[user@host glob]$ ls *a*\r\nable alfa baker bravo cast charlie delta easy\r\n[user@host glob]$ ls [ac]* able alfa cast charlie\r\n[user@host glob]$ ls ????\r\nable alfa cast easy echo\r\n[user@host glob]$ ls ?????\r\nbaker bravo delta\r\n```\r\n\r\n###Tilde Expansion<br>\r\nThe tilde character (~), matches the current user's home directory. If it starts a string of characters\r\nother than a slash (/), the shell will interpret the string up to that slash as a user name, if one\r\nmatches, and replace the string with the absolute path to that user's home directory. If no user\r\nname matches, then an actual tilde followed by the string of characters will be used instead.\r\n\r\n\r\nIn the following example the **echo** command is used to display the value of the tilde character. The **echo** command can also be used to display the values of brace and variable expansion characters, and others.\r\n\r\n```bash\r\n[user@host glob]$ ls ~root\r\n/root\r\n[user@host glob]$ ls ~user\r\n/home/user\r\n[user@host glob]$ ls ~/glob\r\nable alfa baker bravo cast charlie delta dog easy echo\r\n[user@host glob]$ echo ~/glob\r\n/home/user/glob\r\n[user@host glob]$\r\n```\r\n\r\n###Brace Expansion<br>\r\nBrace expansion is used to generate discretionary strings of characters. Braces contain a comma-separated list of strings, or a sequence expression. The result includes the text preceding or following the brace definition. Brace expansions may be nested, one inside another. Also double-dot syntax (..) expands to a sequence such that **{m..p}** will expand to **m n o p**.\r\n\r\n![](/media/markdownx/eaee8e09-7a77-4787-be28-fbeb559e56c9.png)\r\n\r\n###Variable Expansion<br>\r\nA variable acts like a named container that can store a value in memory. Variables make it easy to access and modify the stored data either from the command line or within a shell script.\r\nYou can assign data as a value to a variable using the following syntax:\r\n```bash\r\n[user@host ~]$ VARIABLENAME=value\r\n```\r\n\r\nYou can use variable expansion to convert the variable name to its value on the command line. If a string starts with a dollar sign ($), then the shell will try to use the rest of that string as a variable name and replace it with whatever value the variable has.\r\n```bash\r\n[user@host ~]$ USERNAME=operator\r\n[user@host ~]$ echo $USERNAME\r\noperator\r\n```\r\n\r\nTo help avoid mistakes due to other shell expansions, you can put the name of the variable in curly braces, for example ${VARIABLENAME}.\r\n```bash\r\n[user@host ~]$ USERNAME=operator\r\n[user@host ~]$ echo ${USERNAME}\r\noperator\r\n```\r\nShell variables and ways to use them will be covered in more depth later in this course.\r\n\r\n###Command Substitution<br>\r\nCommand substitution allows the output of a command to replace the command itself on the\r\ncommand line. Command substitution occurs when a command is enclosed in parentheses, and preceded by a dollar sign ($). The **$(command)** form can nest multiple command expansions inside each other.\r\n\r\n```bash\r\n[user@host glob]$ echo Today is $(date +%A).\r\nToday is Wednesday.\r\n[user@host glob]$ echo The time is $(date +%M) minutes past $(date +%l%p).\r\nThe time is 26 minutes past 11AM.\r\n[user@host glob]$\r\n```\r\n\r\n>** NOTE ** <br>\r\n>An older form of command substitution uses backticks: **command**. Disadvantages\r\n>to the backticks form include: 1) it can be easy to visually confuse backticks with\r\n>single quote marks, and 2) backticks cannot be nested.\r\n\r\n###Protecting Arguments from Expansion<br>\r\nMany characters have special meaning in the Bash shell. To keep the shell from performing shell\r\nexpansions on parts of your command line, you can quote and escape characters and strings.\r\nThe backslash (\\) is an escape character in the Bash shell. It will protect the character immediately\r\nfollowing it from expansion.\r\n\r\n```bash\r\n[user@host glob]$ echo The value of $HOME is your home directory.\r\nThe value of /home/user is your home directory.\r\n[user@host glob]$ echo The value of \\$HOME is your home directory.\r\nThe value of $HOME is your home directory.\r\n[user@host glob]$\r\n```\r\n\r\nIn the preceding example, protecting the dollar sign from expansion caused Bash to treat it as a regular character and it did not perform variable expansion on **$HOME.**\r\n\r\nTo protect longer character strings, single quotes (') or double quotes (\") are used to enclose\r\nstrings. They have slightly different effects. Single quotes stop all shell expansion. Double quotes\r\nstop most shell expansion.\r\n\r\nUse double quotation marks to suppress globbing and shell expansion, but still allow command and variable substitution\r\n\r\n```bash\r\n[user@host glob]$ myhost=$(hostname -s); echo $myhost\r\nhost\r\n[user@host glob]$ echo \"***** hostname is ${myhost} *****\"\r\n***** hostname is host *****\r\n[user@host glob]$\r\n```\r\n\r\nUse single quotation marks to interpret all text literally.\r\n\r\n```bash\r\n[user@host glob]$ echo \"Will variable $myhost evaluate to $(hostname -s)?\"\r\nWill variable myhost evaluate to host?\r\n[user@host glob]$ echo 'Will variable $myhost evaluate to $(hostname -s)?'\r\nWill variable $myhost evaluate to $(hostname -s)?\r\n[user@host glob]$\r\n```\r\n\r\n>** IMPORTANT **<br>\r\n>The single quote (') and the command substitution backtick (`) can be easy to\r\n>confuse, both on the screen and on the keyboard. Using one when you mean to use\r\n>the other will lead to unexpected shell behavior.\r\n\r\n<br>\r\n>** REFERENCE** <br>\r\n>**bash**(1), **cd**(1), **glob**(7), **isalpha**(3), **ls**(1), **path_resolution**(7), and **pwd**(1) man pages", "order": 9, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 189, "fields": {"title": "QUIZ : MATCHING FILE NAMES WITH SHELL EXPANSIONS", "slug": "quiz-matching-file-names-with-shell-expansions", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/maching-file-name/](https://course.btech.id/quiz/maching-file-name/)\r\n to start working on the quiz", "order": 10, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 190, "fields": {"title": "LAB : MANAGING FILES FROM THE COMMAND LINE", "slug": "lab-managing-files-from-the-command-line", "content": "", "content_md": "##PERFORMANCE CHECKLIST<nr>\r\nIn this lab, you will efficiently create, move, and remove files and directories by using the shell\r\nand a variety of file name matching techniques.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:<br>\r\n\t\u2022 Use wildcards to locate and manipulate files.<br>\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\nOn workstation, run the **lab files-review start** command. The command runs a\r\nstart script that determines if the serverb machine is reachable on the network.\r\n```bash\r\n[student@workstation ~]$ lab files-review start\r\n```\r\n\r\n* 1.Use the **ssh** command to log in to serverb as the student user. The systems are\r\nconfigured to use SSH keys for authentication, and therefore a password is not required.\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n* 2.Before you create project files, use the **mkdir** command with brace expansion to create\r\nempty project planning documents in the **/home/student/Documents/project_plans**\r\ndirectory. (Hint: if **~/Documents** does not exist, the **-p** option for the **mkdir** command will create it.)\r\nCreate two empty files in the **~/Documents/project_plans** directory:\r\n**season1_project_plan.odf and season2_project_plan.odf.**\r\n\r\n* 3.Create sets of empty practice files to use in this lab. If you do not immediately recognize\r\nthe intended shell expansion shortcut, use the solution to learn and practice. Use shell tab\r\ncompletion to locate file path names easily.\r\nCreate a total of 12 files with names **tv_seasonX_episodeY.ogg.** Replace X with the\r\nseason number and Y with that season's episode, for two seasons of six episodes each.\r\n\r\n* 4.As the author of a successful series of mystery novels, your next bestseller's\r\nchapters are being edited for publishing. Create a total of eight files with names\r\n**mystery_chapterX.odf.** Replace X with the numbers 1 through 8.\r\n\r\n* 5.Use a single command to create two subdirectories named **season1** and **season2** under the Videos directory, to organize the TV episodes.\r\n\r\n* 6.Move the appropriate TV episodes into the season subdirectories. Use only two commands,\r\nspecifying destinations using relative syntax.\r\n\r\n* 7.Create a 2-level directory hierarchy with a single command to organize the mystery book\r\nchapters. Create **my_bestseller** under the **Documents** directory, and **chapters** under the new **my_bestseller** directory.\r\n\r\n* 8.Create three more subdirectories directly under the **my_bestseller** directory using a single command. Name these subdirectories **editor**, **changes**, and **vacation**. The **-p** option (create parents) is not needed because the my_bestseller parent directory already exists.\r\n\r\n* 9.Change to the **chapters** directory. Using the tilde (~) home directory shortcut to specify\r\nthe source files, move all book chapters to the **chapters** directory, which is now your current directory. What is the simplest syntax to specify the destination directory?\r\n\r\n* 10.You sent the first two chapters to the editor for review. Move only those two chapters to the **editor** directory to avoid modifying them during the review. Starting from the chapters\r\nsubdirectory, use brace expansion with a range to specify the chapter file names to move and\r\na relative path for the destination directory.\r\n\r\n* 11.While on vacation you intend to write chapters 7 and 8. Use a single command to move\r\nthe files from the **chapters** directory to the **vacation** directory. Specify the chapter file\r\nnames using brace expansion with a list of strings and without using wildcard characters.\r\n\r\n* 12.Change your working directory to **~/Videos/season2**, and then copy the first episode of the season to the vacation directory.\r\n\r\n* 13.Use a single **cd** command to change from your working directory to the **~/Documents/my_bestseller/vacation** directory. List its files. Use the previous working directory argument to return to the **season2** directory. (This will succeed if the last directory change with the **cd** command was accomplished with one command rather than several **cd** commands.) From the **season2** directory, copy the episode 2 file into the **vacation** directory. Use the shortcut again to return to the **vacation** directory.\r\n\r\n* 14.The authors of chapters 5 and 6 want to experiment with possible changes. Copy both files\r\nfrom the **~/Documents/my_bestseller/chapters** directory to the **~/Documents/my_bestseller/changes** directory to prevent these changes from modifying original files.\r\nNavigate to the **~/Documents/my_bestseller** directory. Use square-bracket pattern\r\nmatching to specify which chapter numbers to match in the filename argument of the **cp**\r\ncommand.\r\n\r\n* 15.Change your current directory to the changes directory.\r\nUse the **date +%F** command with command substitution to copy **mystery_chapter5.odf**\r\nto a new file which includes the full date. The name should have the form\r\n**mystery_chapter5_YYYY-MM-DD.odf.**\r\nMake another copy of **mystery_chapter5.odf**, appending the current time stamp (as the\r\nnumber of seconds since the epoch, 1970-01-01 00:00 UTC) to ensure a unique file name.\r\nUse command substitution with the **date +%s** command to accomplish this.\r\n\r\n* 16.After further review, you decide that the plot changes are not necessary. Delete the **changes** directory. If necessary, navigate to the **changes** directory and delete all the files within the directory. You cannot delete a directory while it is the current working directory. Change to the parent directory of the **changes** directory. Try to delete the empty directory using the **rm** command without the **-r** recursive option. This attempt should fail. Finally, use the **rmdir** command to delete the empty directory, which will succeed.\r\n\r\n* 17.When the vacation is over, the **vacation** directory is no longer needed. Delete it using the rm command with the recursive option. When finished, return to the student user's home directory.\r\n\r\n* 18.Create a hard link to the **~/Documents/project_plans/season2_project_plan.odf**\r\nfile named **~/Documents/backups/season2_project_plan.odf.back.** A hard link will\r\nprotect against accidental deletion of the original file and will keep the backup file updated as\r\nchanges are made to the original.\r\n\r\n* 19.Exit from serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###valuation<br>\r\nOn workstation, run the **lab files-review grade** script to confirm success on this lab.\r\n```bash\r\n[student@workstation ~]$ lab files-review grade\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run the **lab files-review finish** script to finish this lab. This script\r\nremoves all files and directories created on serverb during the lab exercise.\r\n```bash\r\n[student@workstation ~]$ lab files-review finish\r\n```\r\n\r\nThis concludes the lab.", "order": 11, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 191, "fields": {"title": "SOLUTION: MANAGING FILES FROM THE COMMAND LINE", "slug": "solution-managing-files-from-the-command-line", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will efficiently create, move, and remove files and directories by using the shell\r\nand a variety of file name matching techniques.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:<br>\r\n\u2022 Use wildcards to locate and manipulate files.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run the **lab files-review start** command. The command runs a\r\nstart script that determines if the serverb machine is reachable on the network.\r\n```bash\r\n[student@workstation ~]$ lab files-review start\r\n```\r\n\r\n<br>\r\n1. Use the **ssh** command to log in to serverb as the student user. The systems are\r\nconfigured to use SSH keys for authentication, and therefore a password is not required.\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n<br>\r\n2. Before you create project files, use the **mkdir** command with brace expansion to create\r\nempty project planning documents in the **/home/student/Documents/project_plans**\r\ndirectory. (Hint: if **~/Documents** does not exist, the **-p** option for the **mkdir** command will\r\ncreate it.)\r\nCreate two empty files in the **~/Documents/project_plans** directory:\r\n**season1_project_plan.odf** and **season2_project_plan.odf.**\r\n\r\n```bash\r\n[student@serverb ~]$ mkdir -p ~/Documents/project_plans\r\n[student@serverb ~]$ touch \\\r\n~/Documents/project_plans/{season1,season2}_project_plan.odf\r\n[student@serverb ~]$ ls -lR Documents/\r\nDocuments/:\r\ntotal 0\r\ndrwxrwxr-x. 2 student student 70 Jan 31 18:20 project_plans\r\n\r\nDocuments/project_plans:\r\ntotal 0\r\n-rw-rw-r--. 1 student student 0 Jan 31 18:20 season1_project_plan.odf\r\n-rw-rw-r--. 1 student student 0 Jan 31 18:20 season2_project_plan.odf\r\n```\r\n\r\n<br>\r\n3. Create sets of empty practice files to use in this lab. If you do not immediately recognize\r\nthe intended shell expansion shortcut, use the solution to learn and practice. Use shell tab\r\ncompletion to locate file path names easily.<br>\r\nCreate a total of 12 files with names **tv_seasonX_episodeY.ogg.** Replace X with the\r\nseason number and Y with that season's episode, for two seasons of six episodes each.\r\n\r\n![](/media/markdownx/4687ee3c-b97b-4aad-893b-e73e0e570910.png)\r\n\r\n<br>\r\n4. As the author of a successful series of mystery novels, your next bestseller's\r\nchapters are being edited for publishing. Create a total of eight files with names\r\n**mystery_chapterX.odf.** Replace X with the numbers 1 through 8.\r\n\r\n![](/media/markdownx/0df4b23f-2caf-4965-a094-43104fbdd680.png)\r\n\r\n<br>\r\n5. Use a single command to create two subdirectories named **season1** and **season2** under the **Videos** directory, to organize the TV episodes.\r\n\r\n![](/media/markdownx/a379b39b-a22d-4a38-8ca5-413bebc01cf5.png)\r\n\r\n<br>\r\n6.Move the appropriate TV episodes into the season subdirectories. Use only two commands,\r\nspecifying destinations using relative syntax.\r\n\r\n![](/media/markdownx/90de1921-fb8f-4201-9610-15d01b1f9d8f.png)\r\n\r\n<br>\r\n7. Create a 2-level directory hierarchy with a single command to organize the mystery book\r\nchapters. Create **my_bestseller** under the **Documents** directory, and **chapters** under the new **my_bestseller** directory.\r\n\r\n![](/media/markdownx/4b21ac7b-7bf5-4b19-a77b-ff2ea146df90.png)\r\n\r\n<br>\r\n8. Create three more subdirectories directly under the **my_bestseller** directory using a single command. Name these subdirectories **editor**, **changes**, and **vacation**. The **-p** option (create parents) is not needed because the **my_bestseller** parent directory already exists.\r\n\r\n![](/media/markdownx/07cffe88-9270-47ea-8c45-fe3d6656e62d.png)\r\n\r\n<br>\r\n9. Change to the **chapters** directory. Using the tilde (~) home directory shortcut to specify\r\nthe source files, move all book chapters to the **chapters** directory, which is now your current directory. What is the simplest syntax to specify the destination directory?\r\n\r\n```bash\r\n[student@serverb ~]$ cd Documents/my_bestseller/chapters\r\n[student@serverb chapters]$ mv ~/mystery_chapter* .\r\n[student@serverb chapters]$ ls\r\nmystery_chapter1.odf mystery_chapter4.odf mystery_chapter7.odf\r\nmystery_chapter2.odf mystery_chapter5.odf mystery_chapter8.odf\r\nmystery_chapter3.odf mystery_chapter6.odf\r\n```\r\n\t\r\n<br>\r\n10. You sent the first two chapters to the editor for review. Move only those two chapters to the\r\n**editor** directory to avoid modifying them during the review. Starting from the chapters subdirectory, use brace expansion with a range to specify the chapter file names to move and\r\na relative path for the destination directory.\r\n\r\n```bash\r\n[student@serverb chapters]$ mv mystery_chapter{1..2}.odf ../editor\r\n[student@serverb chapters]$ ls\r\nmystery_chapter3.odf mystery_chapter5.odf mystery_chapter7.odf\r\nmystery_chapter4.odf mystery_chapter6.odf mystery_chapter8.odf\r\n[student@serverb chapters]$ ls ../editor\r\nmystery_chapter1.odf mystery_chapter2.odf\r\n```\r\n\r\n<br>\r\n11. While on vacation you intend to write chapters 7 and 8. Use a single command to move\r\nthe files from the **chapters** directory to the **vacation** directory. Specify the chapter file\r\nnames using brace expansion with a list of strings and without using wildcard characters.\r\n\r\n```bash\r\n[student@serverb chapters]$ mv mystery_chapter{7,8}.odf ../vacation\r\n[student@serverb chapters]$ ls\r\nmystery_chapter3.odf mystery_chapter5.odf\r\nmystery_chapter4.odf mystery_chapter6.odf\r\n[student@serverb chapters]$ ls ../vacation\r\nmystery_chapter7.odf mystery_chapter8.odf\r\n```\r\n\r\n<br>\r\n12. Change your working directory to **~/Videos/season2**, and then copy the first episode of\r\nthe season to the **vacation** directory.\r\n\r\n```bash\r\n[student@serverb chapters]$ cd ~/Videos/season2\r\n[student@serverb season2]$ cp *episode1.ogg ~/Documents/my_bestseller/vacation\r\n```\r\n\r\n<br>\r\n13. Use a single **cd** command to change from your working directory to the **~/Documents/my_bestseller/vacation** directory. List its files. Use the previous working directory\r\nargument to return to the **season2** directory. (This will succeed if the last directory\r\nchange with the **cd** command was accomplished with one command rather than several\r\n**cd** commands.) From the **season2** directory, copy the episode 2 file into the **vacation** directory. Use the shortcut again to return to the **vacation** directory.\r\n\r\n```bash\r\n[student@serverb season2]$ cd ~/Documents/my_bestseller/vacation\r\n[student@serverb vacation]$ ls\r\nmystery_chapter7.odf mystery_chapter8.odf tv_season2_episode1.ogg\r\n[student@serverb vacation]$ cd -\r\n/home/ec2-user/Videos/season2\r\n[student@serverb season2]$ cp *episode2.ogg ~/Documents/my_bestseller/\r\nvacation\r\n[student@serverb vacation]$ cd -\r\n/home/ec2-user/Documents/my_bestseller/vacation\r\n[student@serverb vacation]$ ls\r\nmystery_chapter7.odf tv_season2_episode1.ogg\r\nmystery_chapter8.odf tv_season2_episode2.ogg\r\n```\r\n\r\n<br>\r\n14. The authors of chapters 5 and 6 want to experiment with possible changes. Copy both files\r\nfrom the **~/Documents/my_bestseller/chapters** directory to the **~/Documents/\r\nmy_bestseller/changes** directory to prevent these changes from modifying original files.\r\nNavigate to the **~/Documents/my_bestseller** directory. Use square-bracket pattern matching to specify which chapter numbers to match in the filename argument of the **cp**\r\ncommand.\r\n\r\n```bash\r\n[student@serverb vacation]$ cd ~/Documents/my_bestseller\r\n[student@serverb my_bestseller]$ cp chapters/mystery_chapter[56].odf changes\r\n[student@serverb my_bestseller]$ ls chapters\r\nmystery_chapter3.odf mystery_chapter5.odf\r\nmystery_chapter4.odf mystery_chapter6.odf\r\n[student@serverb my_bestseller]$ ls changes\r\nmystery_chapter5.odf mystery_chapter6.odf\r\n```\r\n\r\n<br>\r\n15. Change your current directory to the **changes** directory.\r\nUse the **date +%F** command with command substitution to copy **mystery_chapter5.odf**\r\nto a new file which includes the full date. The name should have the form\r\n**mystery_chapter5_YYYY-MM-DD.odf.**\r\nMake another copy of **mystery_chapter5.odf**, appending the current time stamp (as the\r\nnumber of seconds since the epoch, 1970-01-01 00:00 UTC) to ensure a unique file name.\r\nUse command substitution with the **date +%s** command to accomplish this.\r\n\r\n```bash\r\n[student@serverb my_bestseller]$ cd changes\r\n[student@serverb changes]$ cp mystery_chapter5.odf \\\r\nmystery_chapter5_$(date +%F).odf\r\n[student@serverb changes]$ cp mystery_chapter5.odf \\\r\nmystery_chapter5_$(date +%s).odf\r\n[student@serverb changes]$ ls\r\nmystery_chapter5_1492545076.odf mystery_chapter5.odf\r\nmystery_chapter5_2017-04-18.odf mystery_chapter6.odf\r\n```\r\n\r\n<br>\r\n16. After further review, you decide that the plot changes are not necessary. Delete the **changes** directory.\r\nIf necessary, navigate to the **changes** directory and delete all the files within the directory.\r\nYou cannot delete a directory while it is the current working directory. Change to the parent\r\ndirectory of the **changes** directory. Try to delete the empty directory using the **rm** command without the **-r** recursive option. This attempt should fail. Finally, use the **rmdir** command to delete the empty directory, which will succeed.\r\n\r\n```bash\r\n[student@serverb changes]$ rm mystery*\r\n[student@serverb changes]$ cd ..\r\n[student@serverb my_bestseller]$ rm changes\r\nrm: cannot remove 'changes': Is a directory\r\n[student@serverb my_bestseller]$ rmdir changes\r\n[student@serverb my_bestseller]$ ls\r\nchapters editor vacation\r\n```\r\n\r\n<br>\r\n17. When the vacation is over, the **vacation** directory is no longer needed. Delete it using the **rm** command with the recursive option.\r\nWhen finished, return to the student user's home directory.\r\n\r\n```bash\t\r\n[student@serverb my_bestseller]$ rm -r vacation\r\n[student@serverb my_bestseller]$ ls\r\nchapters editor\r\n[student@serverb my_bestseller]$ cd\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n18. Create a hard link to the **~/Documents/project_plans/season2_project_plan.odf**\r\nfile named **~/Documents/backups/season2_project_plan.odf.back**. A hard link will\r\nprotect against accidental deletion of the original file and will keep the backup file updated as\r\nchanges are made to the original.\r\nNotice that the link count is **2** for both **season2_project_plan.odf.back** and\r\n**season2_project_plan.odf files.**\r\n\r\n```bash\r\n[student@serverb ~]$ mkdir ~/Documents/backups\r\n[student@serverb ~]$ ln ~/Documents/project_plans/season2_project_plan.odf \\\r\n~/Documents/backups/season2_project_plan.odf.back\r\n[student@serverb ~]$ ls -lR ~/Documents/\r\n/home/student/Documents/:\r\ntotal 0\r\ndrwxrwxr-x. 2 student student 43 Jan 31 18:59 backups\r\ndrwxrwxr-x. 4 student student 36 Jan 31 19:42 my_bestseller\r\ndrwxrwxr-x. 2 student student 70 Jan 31 18:20 project_plans\r\n\r\n/home/student/Documents/backups:\r\ntotal 4\r\n-rw-rw-r--. 2 student student 0 Jan 31 19:05 season2_project_plan.odf.back\r\n\r\n/home/student/Documents/my_bestseller:\r\ntotal 0\r\ndrwxrwxr-x. 2 student student 118 Jan 31 19:39 chapters\r\ndrwxrwxr-x. 2 student student 62 Jan 31 19:38 editor\r\n\r\n/home/student/Documents/my_bestseller/chapters:\r\ntotal 0\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter3.odf\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter4.odf\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter5.odf\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter6.odf\r\n\r\n/home/student/Documents/my_bestseller/editor:\r\ntotal 0\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter1.odf\r\n-rw-rw-r--. 1 student student 0 Jan 31 19:18 mystery_chapter2.odf\r\n\r\n/home/student/Documents/project_plans:\r\ntotal 4\r\n-rw-rw-r--. 1 student student 0 Jan 31 18:20 season1_project_plan.odf\r\n-rw-rw-r--. 2 student student 0 Jan 31 19:05 season2_project_plan.odf\r\n\r\n<br>\r\n19. Exit from serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Evaluation<br>\r\nOn workstation, run the **lab files-review grade** script to confirm success on this lab.\r\n\r\n```bash\r\n[student@workstation ~]$ lab files-review grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run the **lab files-review finish** script to finish this lab. This script\r\nremoves all files and directories created on serverb during the lab exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab files-review finish\r\n```\r\n\r\nThis concludes the lab.", "order": 12, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 192, "fields": {"title": "SUMMARY", "slug": "summary-1", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n\r\n* Files on a Linux system are organized into a single inverted tree of directories, known as a file-\r\nsystem hierarchy.\r\n* Absolute paths start with a / and specify the location of a file in the file-system hierarchy.\r\n* Relative paths do not start with a / and specify the location of a file relative to the current\r\nworking directory.\r\n* Five key commands are used to manage files: mkdir, rmdir, cp, mv, and rm.\r\n* Hard links and soft links are different ways to have multiple file names point to the same data.\r\n* The Bash shell provides pattern matching, expansion, and substitution features to help you\r\nefficiently run commands.", "order": 13, "is_visible": true, "is_task": false, "module": 29, "draft": false, "files": []}}, {"model": "courses.section", "pk": 193, "fields": {"title": "READING MANUAL PAGES", "slug": "reading-manual-pages", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you will be able to find information in local Linux system manual\r\npages.\r\n\r\n##INTRODUCING THE MAN COMMAND<br>\r\nOne source of documentation that is generally available on the local system are system manual pages or man pages These pages are shipped as part of the software packages for which they provide documentation, and can be accessed from the command line by using the **man** command.\r\n\r\nThe historical Linux Programmer's Manual, from which man pages originate, was large enough to be multiple printed sections. Each section contains information about a particular topic.\r\n\r\n**Common Sections of the Linux Manual**\r\n\r\n![](/media/markdownx/05dc38c4-9e0e-4912-b182-74be96905ae8.png)\r\n\r\nTo distinguish identical topic names in different sections, man page references include the section number in parentheses after the topic. For example, **passwd**(1) describes the command to change passwords, while **passwd**(5) explains the **/etc/passwd** file format for storing local user accounts.\r\n\r\nTo read specific man pages, use **man topic**. Contents are displayed one screen at a time. The **man** command searches manual sections in alphanumeric order. For example, **man passwd** displays `passwd`(1) by default. To display the man page topic from a specific section, include the section number argument: **man 5 passwd** displays passwd(5).\r\n\r\n##NAVIGATE AND SEARCH MAN PAGES<br>\r\nThe ability to efficiently search for topics and navigate man pages is a critical administration\r\nskill. GUI tools make it easy to configure common system resources, but using the command-line interface is still more efficient. To effectively navigate the command line, you must be able to find the information you need in man pages.\r\n\r\nThe following table lists basic navigation commands when viewing man pages:\r\n\r\n**Navigating Man Pages**\r\n\r\n![](/media/markdownx/1227590c-e62b-476a-8441-50569521ba0a.png)\r\n\r\n> **IMPORTANT**<br>\r\n>When performing searches, string allows regular expression syntax. While simple\r\n>text (such as **passwd**) works as expected, regular expressions use meta-characters\r\n>(such as **$**,** * **,** .**, and **^**) for more sophisticated pattern matching. Therefore,\r\n>searching with strings that include program expression meta-characters, such as\r\n>**make $$$**, might yield unexpected results.\r\n\r\n>Regular expressions and syntax are discussed in `Red Hat System Administration II`,\r\n>and in the `regex`(7) man topic.\r\n\r\n##Reading Man Pages<br>\r\nEach topic is separated into several parts. Most topics share the same headings and are presented in the same order. Typically a topic does not feature all headings, because not all headings apply for all topics.\r\n\r\nCommon headings are:\r\n\r\n**Headings**\r\n\r\n![](/media/markdownx/28a8e89d-7644-4757-95ce-ac5ccb38a1e4.png)\r\n\r\n##SEARCHING FOR MAN PAGES BY KEYWORD<br>\r\nA keyword search of man pages is performed with **man -k keyword**, which displays a list of\r\nkeyword-matching man page topics with section numbers.\r\n\r\n![](/media/markdownx/81d9b5a7-057c-4a13-9f2f-79dd184b736c.png)\t\r\n\r\nPopular system administration topics are in sections 1 (user commands), 5 (file formats), and 8\r\n(administrative commands). Administrators using certain troubleshooting tools also use section 2 (system calls). The remaining sections are generally for programmer reference or advanced dministration.\r\n\r\n>**NOTE**<br>\r\n>Keyword searches rely on an index generated by the `mandb`(8) command, which\r\n>must be run as `root`. The command runs daily through **cron.daily**, or by\r\n>**anacrontab** within an hour of boot, if out of date.\r\n\r\n<br>\r\n>**IMPORTANT**<br>\r\n>The **man** command **-K** (uppercase) option performs a full-text page search, not\r\n>just titles and descriptions like the **-k** option. A full-text search uses greater system\r\n>resources and take more time.\r\n\r\n<br>\r\n>**REFERENCES**<br>\r\n>**man**(1), **mandb**(8), **man-pages**(7), **less**(1), **intro**(1), **intro**(2), **intro**(5),\r\n>**intro**(7), **intro**(8) man pages", "order": 1, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 194, "fields": {"title": "GUIDED EXERCISE : READING MANUAL PAGES", "slug": "guided-exercise-reading-manual-pages", "content": "", "content_md": "In this exercise, you will practice finding relevant information by using **man** options and arguments.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to use the **man** Linux manual system and find useful information by\r\nsearching and browsing.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to `workstation` as `student` using `student` as the password.\r\n\r\nOn workstation, run the **lab help-manual start** command. It creates a file called \t**manual**.\r\n\r\n```bash\r\n[student@workstation ~]$ lab help-manual start\r\n```\r\n<br>\r\n1. On workstation view the **vim** man page. View the options for editing a specific file\r\nusing **vim** from the command line.\r\nUse one of the options from the **vim** man page to open the **/home/student/manual**\r\nfile using **vim** with the cursor at the end of the file.\r\n\t\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1. View the **vim** man page.\r\n\r\n```bash\r\n[student@workstation ~]$ man gedit\r\n```  \r\n```bash\r\nVIM(1)                                             \r\nNAME\r\n       vim - Vi IMproved, a programmer's text editor\r\n\r\nSYNOPSIS\r\n       vim [options] [file ..]\r\n       vim [options] -\r\n```\r\n  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2. In the **vim** man page, learn the options for editing a specific file from the command line.\r\n\r\n```bash\r\n...output omitted...\r\n       file ..     A list of filenames.  The first one will be the current file and read into the buffer.  The  cursor  will\r\n                   be  positioned on the first line of the buffer.  You can get to the other files with the \":next\" command.\r\n                   To edit a file that starts with a dash, precede the filelist with \"--\".\r\n...output omitted...\r\n```\r\nPress **q** to quit the man page.\r\n\t1.3. Use the **vim +** command to open the **manual** file. The missing line number next to + option opens a file passed as an argument with cursor at the end of the last line.\r\n\r\n```bash\r\n[student@workstation ~]$ vim  + manual\r\n```\r\nPress **i** to switch edit mode   \r\n```bash\r\nthe quick brown fox just came over to greet the lazy poodle!\r\n```\r\nConfirm that the file is opened with the cursor at the end of the last line in the file. Press **:wq** to close the application.\r\n\r\n<br>\r\n2. Read the `su`(1) man page.\r\nNote that when the user is omitted the **su** command assumes the user is `root`. If the **su** command is followed by a single dash (**-**), it starts a child login shell. Without the dash, a non-login child shell is created that matches the user's current environment.\r\n\r\n```bash\r\n[student@workstation ~]$ man 1 su\r\n```\r\n```bash\r\nSU(1)                      User Commands                               SU(1)\r\n\r\nNAME\r\n     su - run a command with substitute user and group ID\r\n\r\nSYNOPSIS\r\n     su [options] [-] [user [argument...]]\r\n\r\nDESCRIPTION\r\n     su allows to run commands with a substitute user and group ID. \r\n     When called without arguments, su defaults to running an interactive shell as root.\r\n...output omitted...\r\n```  \r\n  \r\n```bash\r\nOPTIONS\r\n...output omitted...\r\n       -, -l, --login\r\n              Start the shell as a login shell with an environment similar to a real login:\r\n...output omitted...\r\n```  \r\n\r\n>**NOTE**<br>\r\n>Note that comma-separated options on a single line, such as **-**, **-l**, and **--login**, all\r\n>result in the same behavior.\r\n\r\nPress **q** to quit the man page.\r\n\r\n<br>\r\n3. The **man** command also has its own manual pages.\r\n\r\n```bash\r\n[student@workstation ~]$ man man\r\nMAN(1)                   Manual pager utils                    MAN(1)\r\n\r\nNAME\r\n       man - an interface to the system reference manuals\r\n...output omitted...  \r\nDESCRIPTION\r\n       man  is  the  system's  manual  pager.  Each page argument given to man is normally the name of a \r\n       program, utility or function.  The manual page associated with each of these arguments is then found and \r\n       displayed. \r\n       A section,  if  pro\u2010vided,  will  direct  man  to look only in that section of the manual.\r\n...output omitted...  \r\n```  \r\n\r\nPress **q** to quit the man page.\r\n\r\n<br>\r\n4. All man pages are located in **/usr/share/man**. Locate the binary, source, and manual\r\npages located in the **/usr/share/man** directory by using the **whereis** command.\r\n\r\n```bash\r\n[student@workstation ~]$ whereis passwd\r\npasswd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1.gz /usr/share/man/man5/passwd.5.gz\r\n```\r\n\r\n<br>\r\n5. Use the **man -k zip** command to list detailed information about a ZIP archive.\r\n```bash\r\n...output omitted...  \r\nzipinfo (1)          - list detailed information about a ZIP archive\r\nzipnote (1)          - write the comments in zipfile to stdout, edit comments and rename files in zipfile\r\nzipsplit (1)         - split a zipfile into smaller zipfiles\r\n...output omitted...  \r\n```  \r\n\r\n<br>\r\n6. Use the **man -k boot** to list the man page containing a list of parameters that can be\r\npassed to the kernel at boot time.\r\n```bash\r\n...output omitted...  \r\nbootctl (1)           - Control the firmware and boot manager settings\r\nbootparam (7)   - introduction to boot time parameters of the Linux kernel\r\nbootup (7)           - System bootup process\r\n...output omitted...  \r\n```  \r\n\r\n<br>\r\n7. Use the **man -k ext4** to find the command used to tune ext4 file system parameters.\r\n```bash\r\n...output omitted...  \r\nresize2fs (8)        - ext2/ext3/ext4 file system resizer\r\ntune2fs (8)          - adjust tunable filesystem parameters on ext2/ext3/ext4 filesystems\r\n...output omitted...  \r\n```\r\n\r\n\r\n## Finish<br>\r\nOn workstation, run the **lab help-manual finish** script to complete this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab help-manual finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 2, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 195, "fields": {"title": "READING INFO DOCUMENTATION", "slug": "reading-info-doumentation", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, students should be able to find information from local\r\ndocumentation in GNU Info.\r\n\r\n##INTRODUCING GNU INFO<br>\r\nMan pages have a format useful as a command reference, but less useful as general documentation. For such documents, the GNU Project developed a different online\r\ndocumentation system, known as GNU Info. Info documents are an important resource on a Red Hat Enterprise Linux system because many fundamental components and utilities, such as the coreutils package and glibc standard libraries, are either developed by the GNU Project or utilize the Info document system.\r\n\r\n>**IMPORTANT**<br>\r\n>You might wonder why there are two local documentation systems, man pages and\r\n>Info documents. Some of the reasons for this are practical in nature, and some have\r\n>to do with the way Linux and its applications have been developed by various open\r\n>source communities over the years.\r\n\r\n>Man pages have a much more formal format, and typically document a specific\r\n>command or function from a software package, and are structured as individual text\r\n>files. Info documents typically cover particular software packages as a whole, tend\r\n>to have more practical examples of how to use the software, and are structured as\r\n>hypertext documents.\r\n\r\n>You should be familiar with both systems in order to take maximum advantage of\r\n>the information available to you from the system.\r\n\r\n##Reading Info Documentation<br>\r\nTo launch the Info document viewer, use the **pinfo** command. **pinfo** opens in the top directory.\r\n\r\n![](/media/markdownx/aa3205e7-6208-40b3-be0d-e673726b2d63.png)\r\n\r\nInfo documentation is comprehensive and hyperlinked. It is possible to output info pages to\r\nmultiple formats. By contrast, man pages are optimized for printed output. The Info format is more flexible than man pages, allowing thorough discussion of complex commands and concepts. Like man pages, Info nodes are read from the command line, using the **pinfo** command. \r\n\r\nA typical man page has a small amount of content focusing on one particular topic, command,\r\ntool, or file. The Info documentation is a comprehensive document. Info provides the following improvements:\r\n\r\n\u2022 One single document for a large system containing all the necessary information for that system\r\n\r\n\u2022 Hyperlinks\r\n\r\n\u2022 A complete browsable document index\r\n\r\n\u2022 A full text search of the entire document\r\n\r\nSome commands and utilities have both **man** pages and info documentation; usually, the Info documentation is more in depth. Compare the differences in **tar** documentation using **man** and **pinfo**:\r\n\r\n```bash\r\n[user@host ~]$ man tar\r\n[user@host ~]$ pinfo tar\r\n```\r\n\r\nThe **pinfo** reader is more advanced than the original **info** command. To browse a specific topic, use the **pinfo topic** command. The **pinfo** command without an argument opens the top directory. New documentation becomes available in **pinfo** when their software packages are installed.\r\n\r\n>**NOTE**<br>\r\n>If no Info topic exists in the system for a particular entry that you requested, Info will\r\n>look for a matching man page and display that instead.\r\n\r\n##COMPARING GNU INFO AND MAN PAGE NAVIGATION<br>\r\nThe **pinfo** command and the **man** command use slightly different navigational keystrokes. The following table compares the navigational keystrokes for both commands:\r\n\r\n**pinfo and man, key binding comparison**\r\n![](/media/markdownx/55bbae80-7a6d-4d53-ba7d-2236b7740295.png)\r\n\r\n>**REFERENCES**<br>\r\n>**pinfo info** (Info: An Introduction)<br>\r\n>**pinfo pinfo** (Documentation for **pinfo**)<br>\r\n>The GNU Project<br>\r\n>http://www.gnu.org/gnu/thegnuproject.html<br>\r\n>**pinfo**(1) and **info**(1) man pages", "order": 3, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 196, "fields": {"title": "GUIDED EXERCISE : READING INFO DOCUMENTATION", "slug": "guided-exercise-reading-info-doumentation", "content": "", "content_md": "<br>\r\n<p>In this exercise, you will look up information stored in GNU Info documents by navigating those documents with command-line tools.</p>\r\n<h2>OUTCOMES.</h2>\r\n<p>You should be able to navigate GNU Info documentation with command-line tools.</p>\r\n<h2>BEFORE YOU BEGIN.</h2>\r\n<p>\r\nLog in to <strong><code>workstation</code></strong> as <strong><code>student</code></strong> using <strong><code>student</code></strong> as the password.<br>\r\nOn <strong><code>workstation</code></strong>, run the <strong>lab help-info start</strong> command. It creates a file called <strong><code>manual</code></strong>.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">[student@workstation ~]$ <b>lab help-info start</b></pre>\r\n</p>\r\n<div>\r\n<p>\r\n<b>1.&nbsp;&nbsp;</b>On workstation launch <b>pinfo</b> without any arguments.\r\n</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>pinfo</b>\r\n</pre>\r\n\r\n<b>2.&nbsp;&nbsp;</b> Navigate to the <b>Common options</b> topic. \r\n<br>Use <b>UpArrow</b> or <b>DownArrow</b> until (coreutils) Common options is highlighted.\r\n<p align=\"left\"><img  src=\"/media/markdownx/50695a39-ec33-49dd-bc6b-016f43489064.png\"/></p>\r\n\r\n<p>\r\n<b>3.&nbsp;&nbsp;</b> The <b> man</b>  command also has its own manual pages.\r\n</p>\r\n<p align=\"left\"><img  src=\"/media/markdownx/1aab7591-c784-4ad9-b7d0-e3c690fff6b7.png\"/></p>\r\n\r\n<p>\r\n<b>4.&nbsp;&nbsp;</b>Browse through this Info topic. Learn whether long-style options can be abbreviated.\r\n<br>Use <b>PageUp</b> and <b>PageDown</b> to navigate through the topic. Yes, many programs allow long options to be abbreviated.\r\n</p>\r\n\r\n<p>\r\n<b>5.&nbsp;&nbsp;</b> Determine what the symbols -- signify when used as a command argument.\r\n<br>The symbols -- signify the end of command options and the start of command arguments in complex commands where the shell's \r\n command-line parser might not correctly make the distinction.\r\n</p>\r\n\r\n\r\n\r\n<p>\r\n<b>6.&nbsp;&nbsp;</b>Without exiting <b>pinfo</b>, move up to the <b>GNU Coreutils</b> node. Press <b>u</b> to move up to the top node of the topic.\r\n</p>\r\n\r\n<p>\r\n<b>7.&nbsp;&nbsp;</b> Return to the top level topic. Press <b>u</b> again. Observe that when positioned at the top of a topic node, moving up returns to the directory of topics. Alternately, pressing <b>d</b> from any level or topic moves directly to the directory of topics.\r\n</p>\r\n\r\n<p>\r\n<b>8.&nbsp;&nbsp;</b> Search for the pattern <b>coreutils</b> and select that topic. Press <b>/</b> followed by the search pattern \"coreutils\". With the topic highlighted, press <b>Enter</b>. \r\n</p>\r\n![](/media/markdownx/05e8ba28-2a03-49ca-a415-ec28026db72e.png)\r\n\r\n<p>\r\n<b>9.&nbsp;&nbsp;</b> In the menu at the top, locate and select <b>Output of entire files</b> by pressing <b>n</b>. Browse the topic. Use <b>Enter</b> to select <b>cat invocation</b>. Use the arrow keys to browse the topic.\r\n</p>\r\n\r\n<p>\r\n<b>10.&nbsp;&nbsp;</b>  Move up two levels to return to <b>GNU Coreutils</b>. Move to <b>Summarizing files</b>. Press <b>Enter</b> to select the topic then browse the topic.\r\n</p>\r\n\r\n<p>\r\n<b>11. &nbsp;&nbsp;</b>  Press <b>q</b> to quit pinfo.\r\n</p>\r\n\r\n<p>\r\n<b>12. &nbsp;&nbsp;</b>  Use the <b>pinfo</b> command again, specifying <b>coreutils</b> as the destination topic from the command line.\r\n</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>pinfo coreutils</b>\r\n</pre>\r\n\r\n\r\n<p>\r\n<b>13. &nbsp;&nbsp;</b> Select the <b>Disk usage</b> topic. Press <b>DownArrow </b>to highlight <b>Disk usage</b>, then press <b>Enter</b> to select this topic.\r\n</p>\r\n\r\n\r\n<p>\r\n<b>14. &nbsp;&nbsp;</b>Read the <b>df invocation</b> and <b>du invocation</b> subtopics. Use arrow keys to highlight a topic, <b>PageUp</b> and <b>PageDown</b> to browse the text, then press <b>u</b> to move up one level. Press <b>q</b> to quit when you are finished.\r\n</p>\r\n\r\n\r\n\r\n**Finish**  \r\n<p>On workstation, run the <b>lab help-info finish </b>script to complete this exercise.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab help-info finish</b>\r\n</pre>\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 197, "fields": {"title": "LAB: GETTING HELP IN RED HAT ENTERPRISE LINUX", "slug": "lab-getting-help-in-red-hat-enterprise-linux", "content": "", "content_md": "<h2>PERFORMANCE CHECKLIST.</h2>\r\n<p>In this lab, you will look up information to help you complete tasks in man pages and GNU Info documents.</p>\r\n<h2>OUTCOMES.</h2>\r\nYou should be able to :     \r\n\r\n\r\n<ul>\r\n<li>Locate relevant commands by searching man pages and Info nodes.  \r\n<li>Learn new options for commonly used documentation commands.  \r\n<li>Use appropriate tools to view and print documentation and other non-text formatted files.    \r\n</ul>\r\n\r\n<h2>BEFORE YOU BEGIN.</h2>\r\n<p>\r\nLog in to <strong><code>workstation</code></strong> as <strong><code>student</code></strong> using <strong><code>student</code></strong> as the password.<br>\r\nOn <strong><code>workstation</code></strong>, run the <strong>lab help-review start</strong> command. It creates a file called <strong><code>manual</code></strong>.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">[student@workstation ~]$ <b>lab help-review start</b></pre>\r\n</p>\r\n<div>\r\n<p>\r\n<b>1.&nbsp;&nbsp;</b>On workstation, determine how to prepare a man page for printing. Specifically, find what format or rendering language is used for printing.\r\n</p>\r\n<b>2.&nbsp;&nbsp;</b>Create a formatted output file of the passwd man page. Call the file passwd.ps.  <br>\r\nDetermine the file content format. Inspect the contents of the passwd.ps file.\r\n</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation $]$ <b>man -t passwd > passwd.ps</b>\r\n</pre>\r\n</p>\r\n<b>3.&nbsp;&nbsp;</b>Using man, learn the commands used for viewing and printing PostScript files.\r\n</p>\r\n</p>\r\n<b>4.&nbsp;&nbsp;</b>Learn how to use the evince(1) viewer in preview mode. Also, determine how to open a document starting on a specific page.\r\n</p>\r\n</p>\r\n<b>5.&nbsp;&nbsp;</b>View your PostScript file using the various evince options you researched. Close your document file when you are finished.\r\n</p>\r\n\r\n\r\n**Evaluation**  \r\n<p>On workstation, run the <b>lab help-review grade</b> script to confirm success of this exercise.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab help-review grade</b>\r\n</pre>\r\n\r\n<br>\r\n**Finish**  \r\n<p>On workstation, run the <b>lab help-review finish </b>script to complete this exercise.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab help-review finish</b>\r\n</pre>\r\nThis concludes the guided exercise.", "order": 5, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 198, "fields": {"title": "SOLUTION: GETTING HELP IN RED HAT ENTERPRISE LINUX", "slug": "solution-getting-help-in-red-hat-enterprise-linux", "content": "", "content_md": "<br>\r\n<h2>PERFORMANCE CHECKLIST.</h2>\r\n<p>In this lab, you will look up information to help you complete tasks in man pages and GNU Info documents.</p>\r\n<h2>OUTCOMES.</h2>\r\nYou should be able to :     \r\n\r\n\r\n<ul>\r\n<li>Locate relevant commands by searching man pages and Info nodes.  \r\n<li>Learn new options for commonly used documentation commands.  \r\n<li>Use appropriate tools to view and print documentation and other non-text formatted files.    \r\n</ul>\r\n\r\n<h2>BEFORE YOU BEGIN.</h2>\r\n<p>\r\nLog in to <strong><code>workstation</code></strong> as <strong><code>student</code></strong> using <strong><code>student</code></strong> as the password.<br>\r\nOn <strong><code>workstation</code></strong>, run the <strong>lab help-review start</strong> command. It creates a file called <strong><code>manual</code></strong>.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">[student@workstation ~]$ <b>lab help-review start</b></pre>\r\n</p>\r\n<div>\r\n<p>\r\n<b>1.&nbsp;&nbsp;</b>On workstation, determine how to prepare a man page for printing. Specifically, find what format or rendering language is used for printing.\r\n</p>\r\n<p>1.1.&nbsp;&nbsp;Use the man man command to determine how to prepare a man page for printing.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation $]$ <b>man -t passwd > passwd.ps</b>\r\n</pre>\r\n\r\n\r\n<b>2.&nbsp;&nbsp;</b>Create a formatted output file of the passwd man page. Call the file passwd.ps.  <br>\r\nDetermine the file content format. Inspect the contents of the passwd.ps file.\r\n</p>\r\n<p>2.1.&nbsp;&nbsp;Use the man man command to determine how to prepare a man page for printing.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>man man</b>\r\n[student@workstation ~]$ <b>ls -al</b>\r\n...output omitted...\r\n-rw-rw-r--. 1 student student\r\n...output omitted...\r\n</pre>\r\n\r\n</p>2.2.&nbsp;&nbsp;Use the file command to determine the file content format.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>file /home/student/passwd.ps</b>\r\npasswd.ps: <b>PostScript</b> document text conforming DSC level 3.0\r\n</pre>\r\n\r\n</p>2.3.&nbsp;&nbsp;Use the less command to view the /home/student/passwd.ps file.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>less /home/student/passwd.ps</b>\r\n%!PS-Adobe-3.0\r\n%%Creator: groff version 1.22.3\r\n%%CreationDate: Tue Feb 26 11:14:40 2019\r\n%%DocumentNeededResources: font Times-Roman\r\n%%+ font Times-Bold\r\n%%+ font Times-Italic\r\n%%+ font Symbol\r\n%%DocumentSuppliedResources: procset grops 1.22 3\r\n</pre>\r\n\r\n\r\n<p><b>3.&nbsp;&nbsp;</b>Using man, learn the commands used for viewing and printing PostScript files.</p>\r\n</p>3.1.&nbsp;&nbsp;Using man learn the commands used for viewing and printing PostScript files.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]# man -k postscript viewer\r\nevince (1)           - GNOME document viewer\r\nevince-previewer (1) - show a printing preview of PostScript and PDF documents\r\nevince-thumbnailer (1) - create png thumbnails from PostScript and PDF documents\r\ngcm-viewer (1)       - GNOME Color Manager Profile Viewer Tool\r\ngnome-logs (1)       - log viewer for the systemd journal\r\ngrops (1)            - PostScript driver for groff\r\npango-view (1)       - Pango text viewer\r\npluginviewer (8)     - list loadable SASL plugins and their properties\r\n</pre>\r\n\r\n<p><b>4.&nbsp;&nbsp;</b>Learn how to use the evince(1) viewer in preview mode. Also, determine how to open a document starting on a specific page.</p>\r\n</p>4.1.&nbsp;&nbsp;Use the man evince command to learn how to use the viewer in preview mode.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ man evince\r\n...output omitted...\r\n</pre>\r\nPress q to quit the man page.\r\n\r\n<p><b>5.&nbsp;&nbsp;</b>View your PostScript file using the various evince options you researched. Close your\r\ndocument file when you are finished.<p>  \r\n</p>5.1.&nbsp;&nbsp;Use the evince command to open /home/student/passwd.ps</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ evince /home/student/passwd.ps\r\n</pre>\r\n</p>5.2.&nbsp;&nbsp;Use the evince -w /home/student/passwd.ps command to open the file in preview mode.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ evince -w /home/student/passwd.ps\r\n</pre>\r\n</p>5.3.&nbsp;&nbsp;Use the evince -i 3 /home/student/passwd.ps command to open the file at page 3.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ evince -i 3 /home/student/passwd.ps\r\n</pre>\r\n\r\n\r\n**Evaluation**  \r\n<p>On workstation, run the <b>lab help-review grade</b> script to confirm success of this exercise.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab help-review grade</b>\r\n</pre>\r\n\r\n<br>\r\n**Finish**  \r\n<p>On workstation, run the <b>lab help-review finish </b>script to complete this exercise.</p>\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab help-review finish</b>\r\n</pre>\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 30, "draft": false, "files": []}}, {"model": "courses.section", "pk": 199, "fields": {"title": "REDIRECTING OUTPUT TO A FILE OR PROGRAM", "slug": "redirecting-output-to-a-file-or-program", "content": "", "content_md": "<br>\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to save output or errors to a file with shell\r\nredirection, and process command output through multiple command-line programs with pipes.\r\n\r\n## STANDARD INPUT, STANDARD OUTPUT, AND STANDARD ERROR\r\nA running program, or process, needs to read input from somewhere and write output to somewhere. A command run from the shell prompt normally reads its input from the keyboard and sends its output to its terminal window.   <br> <br>\r\nA process uses numbered channels called file descriptors to get input and send output. All processes start with at least three file descriptors.  Standard input (channel 0) reads input from the keyboard.   Standard output (channel 1) sends normal output to the terminal. Standard error (channel 2) sends error messages to the terminal. If a program opens separate connections to other files, it may use higher-numbered file descriptors.\r\n<p align=\"center\"><img  src=\"/media/markdownx/f2143d80-f793-449a-8a99-5b92e5548d8c.png\"/></p>\r\n\r\n## REDIRECTING OUTPUT TO A FILE    \r\nI/O redirection changes how the process gets its input or output. Instead of getting input from the keyboard, or sending output and errors to the terminal, the process reads from or writes to files. Redirection lets you save messages to a file that are normally sent to the terminal window. Alternatively, you can use redirection to discard output or errors, so they are not displayed on the terminal or saved. <br><br>\r\nRedirecting stdout suppresses process output from appearing on the terminal. As seen in the following table, redirecting only stdout does not suppress stderr error messages from displaying on the terminal. If the file does not exist, it will be created. If the file does exist and the redirection is not one that appends to the file, the file's contents will be overwritten. <br><br>\r\nIf you want to discard messages, the special file /dev/null quietly discards channel output redirected to it and is always an empty file.\r\n\r\n<b>Output Redirection Operators</b>\r\n<p align=\"center\"><img  src=\"/media/markdownx/8c67c516-642a-40d7-98ea-7a1c8c131e5e.png\"/></p>\r\n\r\n<b>IMPORTANT</b><br>\r\n<hr>\r\nThe order of redirection operations is important. The following sequence redirects standard output to file and then redirects standard error to the same place as standard output (file).\r\n```bash\r\n > file 2>&1\r\n```\r\nHowever, the next sequence does redirection in the opposite order. This redirects standard error to the default place for standard output (the terminal window, so no change) and then redirects only standard output to file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n 2>&1 > file\r\n</pre>\r\n\r\nBecause of this, some people prefer to use the merging redirection operators:  <br>\r\n<p align=\"left\"><img  src=\"/media/markdownx/441674f6-1cf5-43f1-9377-f4471daa3915.png\"/></p>\r\n\r\nHowever, other system administrators and programmers who also use other shells related to bash (known as Bourne-compatible shells) for scripting commands think that the newer merging redirection operators should be avoided, because they are not standardized or implemented in all of those shells and have other limitations. <br>\r\nThe authors of this course take a neutral stance on this topic, and both syntaxes are likely to be encountered in the field.\r\n<hr><br>\r\n<b>Examples for Output Redirection.</b><br>  \r\nMany routine administration tasks are simplified by using redirection. Use the previous table to assist while considering the following examples:\r\n\r\n\u2022 Save a time stamp for later reference. <br>\r\n```bash\r\n[user@host ~]$ date > /tmp/saved-timestamp\r\n```\r\n\u2022 Copy the last 100 lines from a log file to another file.<br>\r\n```bash\r\n[user@host ~]$ tail -n 100 /var/log/dmesg > /tmp/last-100-boot-messages\r\n```\r\n\u2022 Concatenate four files into one.<br>\r\n```bash\r\n[user@host ~]$ cat file1 file2 file3 file4 > /tmp/all-four-in-one\r\n```\r\n\u2022 List the home directory's hidden and regular file names into a file.<br>\r\n```bash\r\n[user@host ~]$ ls -a > /tmp/my-file-names\r\n```\r\n\u2022 Append output to an existing file. <br>\r\n```bash\r\n[user@host ~]$ echo \"new line of information\" >> /tmp/many-lines-of-information\r\n[user@host ~]$ diff previous-file current-file >> /tmp/tracking-changes-made\r\n```\r\n\u2022 The next few commands generate error messages because some system directories are inaccessible to normal users. Observe as the error messages are redirected. Redirect errors to a file while viewing normal command output on the terminal.<br>\r\n```bash\r\n[user@host ~]$ find /etc -name passwd 2> /tmp/errors\r\n```\r\n\u2022 Save process output and error messages to separate files.<br>\r\n```bash\r\n[user@host ~]$ find /etc -name passwd > /tmp/output 2> /tmp/errors\r\n```\r\n\u2022 Ignore and discard error messages.<br>\r\n```bash\r\n[user@host ~]$ find /etc -name passwd > /tmp/output 2> /dev/null\r\n```\r\n\u2022 Store output and generated errors together.<br>\r\n```bash\r\n[user@host ~]$ find /etc -name passwd &> /tmp/save-both\r\n```\r\n\u2022 Append output and generated errors to an existing file.<br>\r\n```bash\r\n[user@host ~]$ find /etc -name passwd >> /tmp/save-both 2>&1\r\n```\r\n<br><br>\r\n## CONSTRUCTING PIPELINES  \r\n<hr>\r\nA pipeline is a sequence of one or more commands separated by the pipe character (|). A pipe connects the standard output of the first command to the standard input of the next command.<br>\r\n<p align=\"center\"><img  src=\"/media/markdownx/8360eba8-bf16-4eac-ac92-fa28a772fd1d.png\"/></p><br>\r\nPipelines allow the output of a process to be manipulated and formatted by other processes before it is output to the terminal. One useful mental image is to imagine that data is \"flowing\" through the pipeline from one process to another, being altered slightly by each command in the pipeline through which it flows.<br>\r\n<br>\r\n**NOTE**  \r\n<hr>\r\nPipelines and I/O redirection both manipulate standard output and standard input. Redirection sends standard output to files or gets standard input from files. Pipes send the standard output from one process to the standard input of another process.\r\n<hr><br><br>\r\n\r\n<b>Pipeline Examples.</b><br>  \r\nThis example takes the output of the **ls** command and uses **less** to display it on the terminal one screen at a time.\r\n```bash\r\n[user@host ~]$ ls -l /usr/bin | less\r\n```\r\nThe output of the **ls** command is piped to **wc -l**, which counts the number of lines received from **ls** and prints that to the terminal.\r\n```bash\r\n[user@host ~]$ ls | wc -l\r\n```\r\nIn this pipeline, **head** will output the first 10 lines of output from **ls -t**, with the final result redirected to a file.\r\n```bash\r\n[user@host ~]$ ls -t | head -n 10 > /tmp/ten-last-changed-files  \r\n```\r\n\r\n<br><br>\r\n<b>Pipelines, Redirection, and the tee Command</b><br>  \r\nWhen redirection is combined with a pipeline, the shell sets up the entire pipeline first, then it redirects input/output. If output redirection is used in the middle of a pipeline, the output will go to the file and not to the next command in the pipeline.<br>\r\nIn this example, the output of the **ls** command goes to the file, and less displays nothing on the terminal.<br>\r\n```bash\r\n[user@host ~]$ ls > /tmp/saved-output | less\r\n```\r\nThe **tee** command overcomes this limitation. In a pipeline, **tee** copies its standard input to its standard output and also redirects its standard output to the files named as arguments to the command. If you imagine data as water flowing through a pipeline, **tee** can be visualized as a \"T\" joint in the pipe which directs output in two directions.<br>\r\n<p align=\"center\"><img  src=\"/media/markdownx/c042b2bc-8928-4e3f-86fc-5f80ccfc5ee2.png\"/></p><br>  \r\n\r\n<b>Pipeline Examples Using the tee Command.</b><br>  \r\nThis example redirects the output of the **ls** command to the file and passes it to **less** to be displayed on the terminal one screen at a time.<br>\r\n```bash\r\n[user@host ~]$ ls -l | tee /tmp/saved-output | less\r\n```\r\nIf  **tee** is used at the end of a pipeline, then the final output of a command can be saved and output to the terminal at the same time.<br>\r\n```bash\r\n[user@host ~]$ ls -t | head -n 10 | tee /tmp/ten-last-changed-files\r\n```\r\n<br><br>\r\n<b>IMPORTANT</b><hr>\r\nStandard error can be redirected through a pipe, but the merging redirection operators (**&>** and **&>>**) cannot be used to do this. The following is the correct way to redirect both standard output and standard error through a pipe:\r\n```bash\r\n[user@host ~]$ find -name / passwd 2>&1 | less\r\n```\r\n<hr>\r\n<b>REFERENCES</b><hr>\r\n**Info bash** (*The GNU Bash Reference Manual*)    \r\n\u2022 Section 3.2.2: Pipelines  \r\n\u2022 Section 3.6: Redirections  \r\n<br>\r\n**Info coreutils 'tee invocation'** (*The GNU coreutils Manual*)  \r\n\u2022 Section 17.1: Redirect output to multiple files or processes\r\n<br><br>\r\n**bash**(1), **cat**(1), **head**(1), **less**(1), **mail**(1), **tee**(1), **tty**(1), **wc**(1) man pages\r\n<hr>\r\n<br><br>", "order": 1, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 200, "fields": {"title": "QUIZ : REDIRECTING OUTPUT TO A FILE OR PROGRAM", "slug": "quiz-redirecting-output-to-a-file-or-program", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/redirecting-output/](https://course.btech.id/quiz/redirecting-output/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 201, "fields": {"title": "EDITING TEXT FILES FROM THE SHELL PROMPT", "slug": "editing-text-files-from-the-shell-prompt", "content": "", "content_md": "<br>\r\n## OBJECTIVES  \r\nAfter completing this section, you should be able to create and edit text files from the command line using the vim editor.\r\n## EDITING FILES WITH VIM  \r\nA key design principle of Linux is that information and configuration settings are commonly stored in text-based files. These files can be structured in various ways, as lists of settings, in INI-like formats, as structured XML or YAML, and so on. However, the advantage of text files is that they can be viewed and edited using any simple text editor. <br><br>\r\nVim is an improved version of the vi editor distributed with Linux and UNIX systems. Vim is highly configurable and efficient for practiced users, including such features as split screen editing, color formatting, and highlighting for editing text.<br><br>\r\n#### **Why Learn Vim?  **<br>\r\nYou should know how to use at least one text editor that can be used from a text-only shell prompt. If you do, you can edit text-based configuration files from a terminal window, or from remote logins through ssh or the Web Console. Then you do not need access to a graphical desktop in order to edit files on a server, and in fact that server might not need to run a graphical desktop environment at all.<br><br>\r\nBut then, why learn Vim instead of other possible options? The key reason is that Vim is almost always installed on a server, if any text editor is present. This is because vi was specified by the POSIX standard that Linux and many other UNIX-like operating systems comply with in large part.<br><br>\r\nIn addition, Vim is often used as the vi implementation on other common operating systems or distributions. For example, macOS currently includes a lightweight installation of Vim by default. So Vim skills learned for Linux might also help you get things done elsewhere.<br>\r\n#### **Starting Vim.  **<br>\r\nVim may be installed in RedHat Enterprise Linux in two different ways. This can affect the features and Vim commands available to you.<br>\r\nYour server might only have the vim-minimal package installed. This is a very lightweight installation that includes only the core feature set and the basic vi command. In this case, you can open a file for editing with vi filename, and all the core features discussed in this section will be available to you.<br><br>\r\nAlternatively, your server might have the vim-enhanced package installed. This provides a much more comprehensive set of features, an on-line help system, and a tutorial program. In order to start Vim in this enhanced mode, you use the vim command.<br>\r\n```bash\r\n[user@host ~]$ vim filename\r\n```\r\nEither way, the core features that we will discuss in this section will work with both commands.  \r\n<br><br>\r\n\r\n<b>NOTE</b><hr>\r\nIf vim-enhanced is installed, regular users will have a shell alias set so that if they run the **vi** command, they will automatically get the **vim** command instead. This does not apply to root and other users with UIDs below 200 (which are used by system services).<br><br>\r\nIf you are editing files as the root user and you expect **vi** to run in enhanced mode, this can be a surprise. Likewise, if vim-enhanced is installed and a regular user wants the simple **vi** for some reason, they might need to use **\\vi** to override the alias temporarily.\r\nAdvanced users can use \\vi --version and vim --version to compare the feature sets of the two commands.<br>\r\n<hr>\r\n<br><br>\r\n\r\n#### **Vim Operating Modes. ** <br> \r\nAn unusual characteristic of Vim is that it has several modes of operation, including command mode, extended command mode, edit mode, and visual mode. Depending on the mode, you may be issuing commands, editing text, or working with blocks of text. As a new Vim user, you should always be aware of your current mode as keystrokes have different effects in different modes.<br> <br> \r\n<p align=\"center\"><img  src=\"/media/markdownx/756918f5-5c35-4f11-b1e2-3b8474ee6f79.png\"/></p>\r\n<br>\r\nWhen you first open Vim, it starts in command mode, which is used for navigation, cut and paste, and other text manipulation. Enter each of the other modes with single character keystrokes to access specific editing functionality:  <br><br>\r\n\u2022 An **i** keystroke enters insert mode, where all text typed becomes file content. Pressing **Esc** returns to command mode.<br><br>\r\n\u2022 A **v** keystroke enters visual mode, where multiple characters may be selected for text manipulation. Use **Shift+V** for multiline and **Ctrl+V** for block selection. The same keystroke used to enter visual mode (**v**, **Shift+V** or **Ctrl+V**) is used to exit.<br><br>\r\n\u2022 The **:** keystroke begins extended command mode for tasks such as writing the file (to save it), and quitting the Vim editor.<br><br>\r\n<br><br>\r\n<b>NOTE</b><hr>\r\nIf you are not sure what mode Vim is in, you can try pressing **Esc** a few times to get back into command mode. Pressing **Esc** in command mode is harmless, so a few extra key presses are okay.\r\n<hr><br><br>\r\n\r\n\r\n#### **The Minimum, Basic Vim Workflow.  **<br>\r\nVim has efficient, coordinated keystrokes for advanced editing tasks. Although considered useful with practice, Vim's capabilities can overwhelm new users.<br><br>\r\nThe **i** key puts Vim into insert mode. All text entered after this is treated as file contents until you exit insert mode. The **Esc** key exits insert mode and returns Vim to command mode. The **u** key will undo the most recent edit. Press the **x** key to delete a single character. The **:w** command writes (saves) the file and remains in command mode for more editing. The **:wq** command writes (saves) the file and quits Vim. The **:q!** command quits Vim, discarding all file changes since the last write. The Vim user must learn these commands to accomplish any editing task.<br><br>\r\n\r\n#### **Rearranging Existing Text. ** \r\nIn Vim, copy and paste is known as yank and put, using command characters **y** and **p**. Begin by positioning the cursor on the first character to be selected, and then enter visual mode. Use the arrow keys to expand the visual selection. When ready, press **y** to yank the selection into memory. Position the cursor at the new location, and then press **p** to put the selection at the cursor.<br><br>\r\n\r\n#### **Visual Mode in Vim**  \r\nVisual mode is a great way to highlight and manipulate text. There are three keystrokes:<br><br>\r\n\u2022 Character mode: ** v** <br><br>\r\n\u2022 Line mode: ** Shift+v** <br><br>\r\n\u2022 Block mode: ** Ctrl+v** <br><br>\r\nCharacter mode highlights sentences in a block of text. The word ** VISUAL**   will appear at the bottom of the screen. Press ** v**   to enter visual character mode. **Shift+v** enters line mode. **VISUAL LINE** will appear at the bottom of the screen.<br><br>\r\nVisual block mode is perfect for manipulating data files. From the cursor, press the **Ctrl+v** to enter visual block. **VISUAL BLOCK** will appear at the bottom of the screen. Use the arrow keys to highlight the section to change.<br><br>\r\n\r\n\r\n<br>\r\n<b>NOTE</b><hr>\r\nVim has a lot of capabilities, but you should master the basic workflow first. You do not need to quickly understand the entire editor and its capabilities. Get comfortable with those basics through practice and then you can expand your Vim vocabulary by learning additional Vim commands (keystrokes).<br><br>\r\nThe exercise for this section will introduce you to the **vimtutor** command. This tutorial, which ships with vim-enhanced, is an excellent way to learn the core functionality of Vim.\r\n<hr>\r\n\r\n<br>\r\n<b>REFERENCES</b><hr>\r\n**vim**(1) man page.<br><br>\r\nThe **:help** command in vim (if the *vim-enhanced* package is installed).<br><br>\r\n**Vim the editor** - http://www.vim.org/<br><br>\r\n**Getting Started with Vim visual mode** -  https://opensource.com/article/19/2/getting-started-vim-visual-mode<br><br>\r\n\r\n<hr><br><br>", "order": 3, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 202, "fields": {"title": "GUIDED EXERCISE : EDITING TEXT FILES FROM THE SHELL PROMPT", "slug": "guided-exercise-editing-text-files-from-the-shell-prompt", "content": "", "content_md": "<br>\r\n<h2>OUTCOMES.</h2>\r\nYou should be able to :     \r\n\u2022 Edit files using Vim.  \r\n\u2022 Gain competency in Vim using vimtutor.  \r\n<br><h2>BEFORE YOU BEGIN.</h2>\r\n<p>\r\nLog in to <strong><code>workstation</code></strong> as <strong><code>student</code></strong> using <strong><code>student</code></strong> as the password.<br>\r\nOn <strong><code>workstation</code></strong>, run the <strong>lab edit-vim start</strong> command. It creates a file called <strong><code>manual</code></strong>.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">[student@workstation ~]$ <b>lab edit-vim start</b></pre>\r\n</p>\r\n\r\n**1.&nbsp;&nbsp;** Use the **ssh** command to log in to servera.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n**2.&nbsp;&nbsp;** Open **vimtutor**. Read the Welcome screen and perform *Lesson 1.1*.\r\n```bash\r\n[student@servera ~]$ vimtutor\r\n```\r\nIn the presentation, keyboard arrow keys are used for navigation. When **vi** was first developed, users could not rely on having arrow keys or working keyboard mappings for arrow keys to move the cursor. Therefore, **vi** was originally designed to move the cursor using commands using standard character keys, such as the conveniently grouped **H**, **J**, **K**, and **L**.<br>\r\nHere is one way to remember them:<br>\r\n**h**ang *back*, **j**ump *down*, **kick** *up*, **l**eap *forward*.<br><br>\r\n**3.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1.2*.  \r\nThis lesson teaches users how to quit without keeping unwanted changes. All changes are lost. Sometimes this is preferable to leaving a critical file in an incorrect state.  <br><br>\r\n**4.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1.3*.  \r\nVim has fast, efficient keystrokes to delete an exact amount of words, lines, sentences, and paragraphs. However, any editing job can be accomplished using x for single character deletion.<br><br>\r\n\r\n**5.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1.4*.  \r\nFor most editing tasks, the first key pressed is **i**.<br><br>\r\n\r\n**6.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1.5*.  \r\nIn the lecture, only the **i** (*insert*) command was taught as the keystroke to enter edit mode. This **vimtutor** lesson demonstrates other available keystrokes to change the cursor placement when insert mode is entered. In insert mode, all typed text is file content.<br><br>\r\n\r\n**7.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1.6*.    \r\nType **:wq** to save the file and quit the editor.<br><br>\r\n\r\n**8.&nbsp;&nbsp;**In the **vimtutor** window, perform *Lesson 1 Summary*.    \r\nThe **vimtutor** command includes six more multistep lessons. These lessons are not assigned as part of this course but feel free to explore them on your own to learn more.<br><br>\r\n\r\n**9.&nbsp;&nbsp;**Exit from *servera*.    <br><br>\r\n\r\n**Finish**  \r\nOn workstation, run the **lab edit-vim finish** script to complete this exercise.<br>\r\n```bash\r\n[student@workstation ~]$ lab edit-vim finish\r\n```  \r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 203, "fields": {"title": "CHANGING THE SHELL ENVIRONMENT", "slug": "changing-the-shell-enviroment", "content": "", "content_md": "<br>\r\n## OBJECTIVES  \r\nAfter completing this section, you should be able to set shell variables to help run commands, and edit Bash startup scripts to set shell and environment variables to modify the behavior of the shell and programs run from the shell.<br><br>\r\n## EDITING FILES WITH VIM  \r\nThe Bash shell allows you to set shell variables that you can use to help run commands or to modify the behavior of the shell. You can also export shell variables as environment variables, which are automatically copied to programs run from that shell when they start. You can use variables to help make it easier to run a command with a long argument, or to apply a common setting to commands run from that shell.<br><br>\r\nShell variables are unique to a particular shell session. If you have two terminal windows open, or two independent login sessions to the same remote server, you are running two shells. Each shell has its own set of values for its shell variables.\r\n<br><br>\r\n\r\n#### **Assigning Values to Variables.**<br>\r\nAssign a value to a shell variable using the following syntax:  \r\n```bash\r\nVARIABLENAME=value\r\n```\r\nVariable names can contain uppercase or lowercase letters, digits, and the underscore character (_). For example, the following commands set shell variables:  \r\n```bash\r\n[user@host ~]$ COUNT=40\r\n[user@host ~]$ first_name=John\r\n[user@host ~]$ file1=/tmp/abc\r\n[user@host ~]$ _ID=RH123\r\n```\r\nRemember, this change only affects the shell in which you run the command, not any other shells you may be running on that server.<br><br>\r\nYou can use the **set** command to list all shell variables that are currently set. (It also lists all shell functions, which you can ignore.) This list is long enough that you may want to pipe the output into the **less** command so that you can view it one page at a time.  \r\n```bash\r\n[user@host ~]$ set | less\r\nBASH=/usr/bin/bash\r\nBASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:progcomp:promptvars:sourcepath\r\nBASHRCSOURCED=Y\r\n...output omitted...\r\n```\r\n<br><br>\r\n#### **Retrieving Values with Variable Expansion**<br>\r\nYou can use variable expansion to refer to the value of a variable that you have set. To do this, precede the name of the variable with a dollar sign ($). In the following example, the echo command prints out the rest of the command line entered, but after variable expansion is performed.<br><br>\r\nFor example, the following command sets the variable COUNT to 40.\r\n```bash\r\n[user@host ~]$ COUNT=40\r\n```\r\nIf you enter the command echo COUNT, it will print out the string COUNT.  \r\n```bash\r\n[user@host ~]$ echo COUNT\r\nCOUNT\r\n```\r\n\r\nBut if you enter the command echo $COUNT, it will print out the value of the variable COUNT.\r\n```bash\r\n[user@host ~]$ echo $COUNT\r\n40\r\n```\r\nA more practical example might be to use a variable to refer to a long file name for multiple commands.\r\n```bash\r\n[user@host ~]$ file1=/tmp/tmp.z9pXW0HqcC\r\n[user@host ~]$ ls -l $file1\r\n-rw-------. 1 student student 1452 Jan 22 14:39 /tmp/tmp.z9pXW0HqcC\r\n[user@host ~]$ rm $file1\r\n[user@host ~]$ ls -l $file1\r\ntotal 0\r\n```\r\n\r\n<br><br>\r\n<br><br>\r\n<b>IMPORTANT</b><hr>\r\nIf there are any trailing characters adjacent to the variable name, you might need to protect the variable name with curly braces. You can always use curly braces in variable expansion, but you will also see many examples in which they are not needed and are omitted.<br><br>\r\nIn the following example, the first echo command tries to expand the nonexistent variable COUNTx, which does not cause an error but instead returns nothing.<br>\r\n```bash\r\n[user@host ~]$ echo Repeat $COUNTx\r\nRepeat\r\n[user@host ~]$ echo Repeat ${COUNT}x\r\nRepeat 40x\r\n```\r\n<hr><br><br>\r\n\r\n#### **Configuring Bash with Shell Variables**<br>\r\nSome shell variables are set when Bash starts but can be modified to adjust the shell's behavior.<br><br>\r\nFor example, two shell variables that affect the shell history and the history command are HISTFILE and HISTFILESIZE. If HISTFILE is set, it specifies the location of a file to save the shell history in when it exits. By default this is the user's ~/.bash_history file. The HISTFILESIZE variable specifies how many commands should be saved in that file from the history.<br><br>\r\nAnother example is PS1, which is a shell variable that controls the appearance of the shell prompt. If you change this value, it will change the appearance of your shell prompt. A number of special character expansions supported by the prompt are listed in the \"PROMPTING\" section of the bash(1) man page.<br><br>\r\n```bash\r\n[user@host ~]$ PS1=\"bash\\$ \"\r\nbash$ PS1=\"[\\u@\\h \\W]\\$ \"\r\n[user@host ~]$\r\n```\r\nTwo items to note about the above example: first, because the value set by PS1 is a prompt, it is virtually always desirable to end the prompt with a trailing space. Second, whenever the value of a variable contains some form of space, including a space, a tab, or a return, the value must be surrounded by quotes, either single or double; this is not optional. Unexpected results will occur if the quotes are omitted. Examine the PS1 example above and note that it conforms to both the recommendation (trailing space) and the rule (quotes).  \r\n\r\n## CONFIGURING PROGRAMS WITH ENVIRONMENT VARIABLES  <br>\r\nThe shell provides an environment to the programs you run from that shell. Among other things, this environment includes information on the current working directory on the file system, the command-line options passed to the program, and the values of environment variables. The programs may use these environment variables to change their behavior or their default settings.<br><br>\r\nShell variables that are not environment variables can only be used by the shell. Environment variables can be used by the shell and by programs run from that shell.<br><br>\r\n\r\n<b>NOTE</b><hr>\r\nHISTFILE, HISTFILESIZE, and PS1, learned in the previous section, do not need to be exported as environment variables because they are only used by the shell itself, not by the programs that you run from the shell.\r\n<hr><br><br>\r\n\r\nYou can make any variable defined in the shell into an environment variable by marking it for export with the export command.\r\n```bash\r\n[user@host ~]$ EDITOR=vim\r\n[user@host ~]$ export EDITOR\r\n```\r\nYou can set and export a variable in one step:\r\n```bash\r\n[user@host ~]$ export EDITOR=vim\r\n```\r\nApplications and sessions use these variables to determine their behavior. For example, the shell automatically sets the HOME variable to the file name of the user's home directory when it starts. This can be used to help programs determine where to save files.<br>\r\n\r\nAnother example is LANG, which sets the locale. This adjusts the preferred language for program output; the character set; the formatting of dates, numbers, and currency; and the sort order for programs. If it is set to en_US.UTF-8, the locale will use US English with UTF-8 Unicode character encoding. If it is set to something else, for example fr_FR.UTF-8, it will use French UTF-8 Unicode encoding.<br>\r\n```bash\r\n[user@host ~]$ date\r\nTue Jan 22 16:37:45 CST 2019\r\n[user@host ~]$ export LANG=fr_FR.UTF-8\r\n[user@host ~]$ date\r\nmar. janv. 22 16:38:14 CST 2019\r\n```\t\t\r\nAnother important environment variable is PATH. The PATH variable contains a list of colon-separated directories that contain programs:\r\n```bash\r\n[user@host ~]$ echo $PATH\r\n/home/user/.local/bin:/home/user/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin\r\n```  \r\n\r\nWhen you run a command such as ls, the shell looks for the executable file ls in each of those directories in order, and runs the first matching file it finds. (On a typical system, this is /usr/bin/ls.)<br><br>\r\nYou can easily add additional directories to the end of your PATH. For example, perhaps you have executable programs or scripts that you want to run like regular commands in /home/user/sbin. You can add /home/user/sbin to the end of your PATH for the current session like this:<br>\r\n```bash\r\n[user@host ~]$ export PATH=${PATH}:/home/user/sbin\r\n```\r\nTo list all the environment variables for a particular shell, run the env command:<br>\r\n```bash\r\n[user@host ~]$ env\r\n...output omitted...\r\nLANG=en_US.UTF-8\r\nHISTCONTROL=ignoredups\r\nHOSTNAME=host.example.com\r\nXDG_SESSION_ID=4\r\n...output omitted...\r\n```  \r\n<br><br>\r\n#### **Setting the Default Text Editor**<br>\r\nThe EDITOR environment variable specifies the program you want to use as your default text editor for command-line programs. Many programs use vi or vim if it is not specified, but you can override this preference if required:  \r\n```bash\r\n[user@host ~]$ export EDITOR=nano\r\n```  \r\n\r\n<br><br>\r\n<b>IMPORTANT</b><hr>\r\nBy convention, environment variables and shell variables that are automatically set by the shell have names that use all uppercase characters. If you are setting your own variables, you may want to use names made up of lowercase characters to help avoid naming collisions.\r\n<hr><br><br>\r\n\r\n<br>\r\n\r\n## SETTING VARIABLES AUTOMATICALLY  <br>\r\n\r\nIf you want to set shell or environment variables automatically when your shell starts, you can edit the Bash startup scripts. When Bash starts, several text files containing shell commands are run which initialize the shell environment.<br><br>\r\nThe exact scripts that run depend on how the shell was started, whether it is an interactive login shell, an interactive non-login shell, or a shell script.<br><br>\r\nAssuming the default **/etc/profile**, **/etc/bashrc**, and **~/.bash_profile** files, if you want to make a change to your user account that affects all your interactive shell prompts at startup, edit your **~/.bashrc** file. For example, you could set that account's default editor to **nano** by editing the file to read:<br><br>\r\n```bash\r\n# .bashrc\r\n# Source global definitions\r\nif [ -f /etc/bashrc ]; then\r\n. /etc/bashrc\r\nfi\r\n# User specific environment\r\nPATH=\"$HOME/.local/bin:$HOME/bin:$PATH\"\r\nexport PATH\r\n# User specific aliases and functions\r\n```\r\n<br><br>\r\n\r\n<b>NOTE</b><hr>\r\nThe best way to adjust settings that affect all user accounts is by adding a file with a name ending in .sh containing the changes to the /etc/profile.d directory. To do this, you need to be logged in as the root user.\r\n<hr><br><br>\r\n\r\n<br>\r\n\r\n## UNSETTING AND UNEXPORTING VARIABLES <br>\r\nTo unset and unexport a variable entirely, use the **unset** command: <br>\r\n```bash\r\n[user@host ~]$ echo $file1\r\n/tmp/tmp.z9pXW0HqcC\r\n[user@host ~]$ unset file1\r\n[user@host ~]$ echo $file1\r\n[user@host ~]$\r\n```\r\n<br>\r\nTo unexport a variable without unsetting it, use the **export -n** command:  \r\n```bash\r\n[user@host ~]$ export -n PS1\r\n```\r\n<br><br>\r\n\r\n<b>REFERENCES</b><hr>\r\n**bash**(1), **env**(1), and **builtins**(1) man pages\r\n<hr><br><br>", "order": 5, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 204, "fields": {"title": "GUIDED EXERCISE : CHANGING THE SHELL ENVIRONMENT", "slug": "guided-exercise-changing-the-shell-enviroment", "content": "", "content_md": "<br>\r\nIn this exercise, you will use shell variables and variable expansion to run commands and set an environment variable to adjust the default editor for new shells.  \r\n## OUTCOMES:  \r\nYou should be able to:  <br>\r\n\u2022 Edit user profile.  \r\n\u2022 Create a shell variable.  \r\n\u2022 Create an environment variable.    \r\n\r\n## BEFORE YOU BEGIN  <br>\r\nLog in to `workstation` as `student` using `student `as the password.  \r\nOn `workstation`, run the **lab edit-shell start** command.  This script verifies that the target server is running.  \r\n\r\n```bash\r\n[student@workstation ~]$ lab edit-shell start\r\n```  \r\n\r\n**1. ** Change the student user's PS1 shell variable to **[\\u@\\h \\t \\w]$** (remember to put the value of PS1 in quotes and put in a trailing space after the dollar sign). This will add the time to the prompt. <br><br>\r\n1.1 On workstation, use the **ssh** command to log in to servera.  \r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n1.2 Use Vim to edit the **~/.bashrc** configuration file.  \r\n```bash\r\n[student@servera ~]$ vim ~/.bashrc\r\n```\r\n1.3 Add the PS1 shell variable and its value to the **~/.bashrc** file. Remember to include a trailing space at the end of the value that you set and put the entire value in quotes, including the trailing space.  \r\n```bash\r\n...output omitted...\r\n# User specific environment and startup programs\r\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\r\nPS1='[\\u@\\h \\t \\w]$ '\r\nexport PATH\r\n```\r\n1.4  Exit from servera and log in again using the **ssh** command to update the command prompt.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera 14:45:05 ~]$\r\n```\r\n<br>\r\n\r\n**2. **Assign a value to a local shell variable. Variable names can contain uppercase or lowercase letters, digits, and the underscore character. Retrieve the variable value. <br>\r\n2.1  Create a new variable called file with a value of **tmp.zdkei083**. The **tmp.zdkei083** file exists in the student home directory.\r\n```bash\r\n[student@servera 14:47:05 ~]$ file=tmp.zdkei083\r\n```\r\n2.2  Retrieve the value of the file variable.  \r\n```bash\r\n[student@servera 14:48:35 ~]$ echo $file\r\ntmp.zdkei083\r\n```\r\n2.3  Use the variable name file and the **ls -l** command to list the **tmp.zdkei083** file. Use the **rm** command and the file variable name to delete the **tmp.zdkei083** file. Confirm it has been deleted.\r\n```bash\r\n[student@servera 14:59:07 ~]$ ls -l $file\r\n-rw-rw-r--. 1 student student 0 Jan 23 14:59 tmp.zdkei083\r\n[student@servera 14:59:10 ~]$ rm $file\r\n[student@servera 14:59:15 ~]$ ls -l $file\r\nls: cannot access 'tmp.zdkei083': No such file or directory\r\n```\r\n<br>\r\n**3. ** Assign a value to the editor variable. Use one command to make the variable an environment variable.\r\n```bash\r\n[student@servera 14:46:40 ~]$ export EDITOR=vim\r\n[student@servera 14:46:55 ~]$ echo $EDITOR\r\nvim\r\n```\r\n**4. ** Exit from servera.\r\n```bash\r\n[student@servera 14:47:11 ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```  \r\n<br>\r\n**Finish**   \r\nOn workstation, run the **lab edit-shell finish** script to complete this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab edit-shell finish\r\n```  \r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 205, "fields": {"title": "LAB : CREATING, VIEWING, AND EDITING TEXT FILES", "slug": "lab-creating-iewing-and-editing-text-files", "content": "", "content_md": "<br>\r\n## PERFORMANCE CHECKLIST    \r\nIn this lab you will edit a text file, using the vim editor.\r\n## OUTCOMES:  \r\nYou should be able to: <br>\r\n\u2022 Use Vim to perform file editing.  \r\n\u2022 Use visual mode to simplify file editing. \r\n  \r\n## BEFORE YOU BEGIN  <br>\r\nLog in to `workstation` as `student` using `student `as the password.  \r\nOn `workstation`, run the **lab edit-review start** command.  This script verifies that the target server is running.  \r\n\r\n```bash\r\n[student@workstation ~]$ lab edit-review start\r\n```  \r\n\r\n**1. ** Redirect a long listing of all content in the student's home directory, including hidden directories and files, into a file named **editing_final_lab.txt**.  \r\n**2. ** Edit the file using **Vim**.  \r\n**3. ** Remove the first three lines. Enter line-based visual mode with uppercase **V**.  \r\n**4. ** Remove columns on the first line. Enter visual mode with lowercase **v**. Lowercase **v** selects characters on a single line only. The columns after **-rw-** should be deleted.   \r\n**5. ** Remove columns, and the subsequent dot (\".\") on the remaining lines. Use the visual block mode. Enter visual block with the control sequence **Ctrl+V**. Use this key sequence to select lock of characters on multiple lines. The columns after **-rw-**  should be deleted.  \r\n**6. ** Use visual block mode to remove the fourth column.  \r\n**7. ** Use visual block mode to remove the time column, leaving the month and day on all lines.  \r\n**8. ** Remove the **Desktop** and **Public** rows. Enter visual line mode with uppercase **V**.  \r\n**9. ** Use the **:wq** command to save and exit the file. Make a backup, using the date (in seconds) to create a unique file name.  \r\n**10.** Append a dashed line to the file. The dashed line should contain at least 12 dashes.  \r\n**11.** Append a directory listing of the **Documents** directory. List the directory listing on the terminal and send it to the **editing_final_lab.txt** file with one command line.  \r\n**12.** Confirm that the directory listing is at the bottom of the lab file.  \r\n<br>\r\n\r\n**Evaluation**  \r\nOn workstation, run the **lab edit-review grade** command to confirm success of this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab edit-review grade\r\n```\r\n<br>\r\n**Finish**  \r\nOn workstation, run the **llab edit-review**l finish script to complete this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab edit-review finish\r\n```\r\nThis concludes the lab.", "order": 7, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 206, "fields": {"title": "SOLUTION : CREATING, VIEWING, AND EDITING TEXT FILES", "slug": "solution-creating-iewing-and-editing-text-files", "content": "", "content_md": "<br>\r\n## PERFORMANCE CHECKLIST    \r\nIn this lab you will edit a text file, using the vim editor.\r\n## OUTCOMES:  \r\nYou should be able to: <br>\r\n\u2022 Use Vim to perform file editing.  \r\n\u2022 Use visual mode to simplify file editing. \r\n  \r\n## BEFORE YOU BEGIN  <br>\r\nLog in to `workstation` as `student` using `student `as the password.  \r\nOn `workstation`, run the **lab edit-review start** command.  This script verifies that the target server is running.  \r\n\r\n```bash\r\n[student@workstation ~]$ lab edit-review start\r\n```  \r\n\r\n**1. ** Redirect a long listing of all content in the student's home directory, including hidden directories and files, into a file named **editing_final_lab.txt**.  \r\nOn workstation, from the student home directory, use the ls -al command to redirect a long listing of all content to a file named editing_final_lab.txt.  \r\n```bash\r\n[student@workstation ~]$ ls -al > editing_final_lab.txt\r\n```\r\n**2. ** Edit the file using **Vim**.    \r\n```bash\r\n[student@workstation ~]$ vim editing_final_lab.txt\r\n```  \r\n\r\n**3. ** Remove the first three lines. Enter line-based visual mode with uppercase **V**.   \r\nUse the arrow keys to position the cursor at the first character in the first row. Enter line-based visual mode with Shift+V. Move down using the down arrow key twice to select the first three rows. Delete the rows with x.  <br>\r\n![](/media/markdownx/649e0a0e-7301-4884-868e-8fb4305cd197.png)  \r\n\r\n**4. ** Remove columns on the first line. Enter visual mode with lowercase **v**. Lowercase **v** selects characters on a single line only. The columns after **-rw-** should be deleted.   \r\nUse the arrow keys to position the cursor at the first character. Enter visual mode using lowercase v. Use the arrow keys to position the cursor at the last character. Delete the selection with x.  <br><br>\r\n![](/media/markdownx/b03b0a6b-d125-4246-89c9-64538d3a865a.png)   \r\n<br>\r\n**5. ** Remove columns, and the subsequent dot (\".\") on the remaining lines. Use the visual block mode. Enter visual block with the control sequence **Ctrl+V**. Use this key sequence to select lock of characters on multiple lines. The columns after **-rw-**  should be deleted.   <br><br>\r\nUse the arrow keys to position the cursor at the first character. Enter visual mode using the control sequence Ctrl+V. Use the arrow keys to position the cursor at the last character of the column on the last line. Delete the selection with x.  <br>\r\n![](/media/markdownx/943a33e4-afbb-4ff4-9f6a-bd72f69ba945.png)  \r\n<br>\r\n\r\n**6. ** Use visual block mode to remove the fourth column.  \r\nUse the arrow keys to position the cursor at the first character of the fourth column. Enter visual block mode using Ctrl+V. Use the arrow keys to position the cursor at the last character and row of the fourth column. Delete the selection with x.<br><br>\r\n![](/media/markdownx/4e380016-0c05-4b20-a8ea-23fdb729e12f.png)  \r\n<br>\r\n\r\n\r\n**7. ** Use visual block mode to remove the time column, leaving the month and day on all lines.  \r\nUse the arrow keys to position the cursor at the first character. Enter visual block mode using Ctrl+V. Use the arrow keys to position the cursor at the last character and row of the time column. Delete the selection with x.  <br><br>\r\n![](/media/markdownx/d03fff11-5375-4d5b-b5fe-475a289cd28a.png)<br><br>\r\n\r\n\r\n**8. ** Remove the **Desktop** and **Public** rows. Enter visual line mode with uppercase **V**.  \r\nUse the arrow keys to position the cursor at any character on the Desktop row. Enter visual mode with uppercase V. The full line is selected. Delete the selection with x. Repeat for the Public row.<br>\r\n<br><br>\r\n![](/media/markdownx/03c783fe-c489-4e37-8e3f-fedff419a675.png)  \r\n<br>\r\n\r\n\r\n**9. ** Use the **:wq** command to save and exit the file. Make a backup, using the date (in seconds) to create a unique file name.  \r\n![](/media/markdownx/2bd51104-7d4d-4eb3-9362-0239795e4e83.png)  <br>\r\n```bash\r\n[student@workstation ~]$ cp editing_final_lab.txt \\\r\nediting_final_lab_$(date +%s).txt\r\n```  \r\n\r\n**10.** Append a dashed line to the file. The dashed line should contain at least 12 dashes.  \r\n```bash\r\n[student@workstation ~]$ echo \"----------------------------------------\" \\\r\n>> editing_final_lab.txt\r\n```  \r\n\r\n**11.** Append a directory listing of the **Documents** directory. List the directory listing on the terminal and send it to the **editing_final_lab.txt** file with one command line.    \r\n```bash\r\n[student@workstation ~]$ ls Documents/ | tee -a editing_final_lab.txt\r\nlab_review.txt\r\n```  \r\n\r\n**12.** Confirm that the directory listing is at the bottom of the lab file.  <br>\r\n```bash\r\n[student@workstation ~]$ cat editing_final_lab.txt\r\n-rw-  1 student   310 Jan 21  .bash_history\r\n-rw-  1 student    18 Oct 12  .bash_logout\r\n-rw-  1 student   141 Oct 12  .bash_profile\r\n-rw-  1 student   312 Oct 12  .bashrc\r\ndrwx  8 student   201 Jan 14  .cache\r\ndrwx 10 student   203 Jan 14  .config\r\ndrwx  2 student     6 Jan 14  Documents\r\ndrwx  2 student     6 Jan 14  Downloads\r\n-rw-  1 student     0 Jan 22  editing_final_lab.txt\r\n-rw-  1 student    16 Jan 14  .esd_auth\r\n-rw-  1 student   310 Jan 14  .ICEauthority\r\ndrwx  3 student    19 Jan 14  .local\r\ndrwx  2 student     6 Jan 14  Music\r\ndrwx  2 student     6 Jan 14  Pictures\r\ndrwx  3 student    19 Jan 14  .pki\r\ndrwx  2 student    73 Jan 14  .ssh\r\ndrwx  2 student     6 Jan 14  Templates\r\ndrwx  2 student     6 Jan 14  Videos\r\n-rw-  1 student  1095 Jan 14  .viminfo\r\n------------------------------------\r\nlab_review.txt\r\n```\r\n<br><br>\r\n**Evaluation**  \r\nOn workstation, run the **lab edit-review grade** command to confirm success of this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab edit-review grade\r\n```\r\n<br>\r\n**Finish**  \r\nOn workstation, run the **llab edit-review**l finish script to complete this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab edit-review finish\r\n```\r\nThis concludes the lab.", "order": 8, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 207, "fields": {"title": "SUMMARY", "slug": "summary-creating-viewing-and-editing-text-files", "content": "", "content_md": "In this chapter, you learned:  <br>\r\n\u2022 Running programs, or processes, have three standard communication channels, standard input, standard output, and standard error.  \r\n\u2022 You can use I/O redirection to read standard input from a file or write the output or errors from a process to a file.  \r\n\u2022 Pipelines can be used to connect standard output from one process to standard input of another process, and can be used to format output or build complex commands.  \r\n\u2022 You should know how to use at least one command-line text editor, and Vim is generally installed.  \r\n\u2022 Shell variables can help you run commands and are unique to a particular shell session.  \r\n\u2022 Environment variables can help you configure the behavior of the shell or the processes it starts.", "order": 9, "is_visible": true, "is_task": false, "module": 31, "draft": false, "files": []}}, {"model": "courses.section", "pk": 208, "fields": {"title": "DESCRIBING USER AND GROUP CONCEPTS", "slug": "describing-user-and-group-concepts", "content": "", "content_md": "<br>\r\n##OBJECTIVES\r\nAfter completing this section, you should be able to describe the purpose of users and groups on a Linux system.\r\n\r\n##WHAT IS A USER?\r\nA user account is used to provide security boundaries between different people and programs that can run commands.<br><br>\r\nUsers have user names to identify them to human users and make them easier to work with. Internally, the system distinguishes user accounts by the unique identification number assigned to them, the user ID or UID. If a user account is used by humans, it will generally be assigned a secret password that the user will use to prove that they are the actual authorized user when logging in.<br><br>\r\nUser accounts are fundamental to system security. Every process (running program) on the system runs as a particular user. Every file has a particular user as its owner. File ownership helps the system enforce access control for users of the files. The user associated with a running process determines the files and directories accessible to that process.<br><br>\r\nThere are three main types of user account: the superuser, system users, and regular users.<br><br>\r\n\u2022 The superuser account is for administration of the system. The name of the superuser is **root** and the account has UID 0. The superuser has full access to the system.<br><br>\r\n\u2022 The system has system user accounts which are used by processes that provide supporting services. These processes, or daemons, usually do not need to run as the superuser. They are assiged non-privileged accounts that allow them to secure their files and other resources from each other and from regular users on the system. Users do not interactively log in using a system user account.<br><br>\r\n\u2022 Most users have regular user accounts which they use for their day-to-day work. Like system users, regular users have limited access to the system.<br><br>\r\nYou can use the<b> id</b> command to show information about the currently logged-in user.\r\n\r\n``` bash\r\n[user01@host ~]$ id\r\nuid=1000(user01) gid=1000(user01) groups=1000(user01)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\nTo view basic information about another user, pass the username to the<b> id</b> command as an<br>\r\nargument.\r\n``` bash\r\n[user01@host]$ id user02\r\nuid=1002(user02) gid=1001(user02) groups=1001(user02)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\nTo view the owner of a file use the <b>ls -l</b> command. To view the owner of a directory use the <b>ls<br>\r\n-ld</b> command. In the following output, the third column shows the username.\r\n``` bash\r\n[user01@host ~]$ ls -l file1\r\n-rw-rw-r--. 1 user01 user01 0 Feb 5 11:10 file1\r\n[user01@host]$ ls -ld dir1\r\ndrwxrwxr-x. 2 user01 user01 6 Feb 5 11:10 dir1\r\n```\r\nTo view process information, use the <b>ps </b>command. The default is to show only processes in the<br>\r\ncurrent shell. Add the <b>a</b>option to view all processes with a terminal. To view the user associated<br>\r\nwith a process, include the <b>u</b> option. In the following output, the first column shows the username.<br>\r\n\r\n![](/media/markdownx/d3a62cdd-231c-4335-b22f-43db6db89143.png)\r\n<br><br>\r\nThe output of the preceding command displays users by name, but internally the operating system uses the UIDs to track users. The mapping of usernames to UIDs is defined in databases of account information. By default, systems use the <b>/etc/passwd</b> file to store information about local users.<br><br>\r\nEach line in the<b> /etc/passwd</b> file contains information about one user. It is divided up into seven colon-separated fields. Here is an example of a line from <b>/etc/passwd</b>:\r\n![](/media/markdownx/17cb5a03-dd50-460e-907d-ff88462348c3.png)\r\n\r\n1. Username for this user (user01).<br>\r\n2. The user's password used to be stored here in encrypted format. That has been moved to the<br>\r\n<b>/etc/shadow </b>file, which will be covered later. This field should always be x.<br>\r\n3. The UID number for this user account (1000).<br>\r\n4. The GID number for this user account's primary group (1000). Groups will be discussed later<br>\r\nin this section.<br>\r\n5. The real name for this user (User One).<br>\r\n6. The home directory for this user (<b>/home/user01</b>). This is the initial working directory when<br>\r\nthe shell starts and contains the user's data and configuration settings.<br>\r\n7. The default shell program for this user, which runs on login (<b>/bin/bash</b>). For a regular user,<br>\r\nthis is normally the program that provides the user's command-line prompt. A system user<br>\r\nmight use <b>/sbin/nologin</b> if interactive logins are not allowed for that user.<br>\r\n\r\n##WHAT IS A GROUP?\r\nA group is a collection of users that need to share access to files and other system resources.<br>\r\nGroups can be used to grant access to files to a set of users instead of just a single user.<br>\r\nLike users, groups have group names to make them easier to work with. Internally, the system<br>\r\ndistinguishes groups by the unique identification number assigned to them, the group ID or GID.<br>\r\nThe mapping of group names to GIDs is defined in databases of group account information. By<br>\r\ndefault, systems use the <b>/etc/group</b>file to store information about local groups.<br><br>\r\n\r\nEach line in the<b> /etc/group</b> file contains information about one group. Each group entry is<br>\r\ndivided into four colon-separated fields. Here is an example of a line from <b>/etc/group</b>:\r\n![](/media/markdownx/9b3e83da-86f3-4900-8863-08db4c7a60eb.png)\r\n\r\n1. Group name for this group (group01).<br>\r\n2. Obsolete group password field. This field should always be x.<br>\r\n3. The GID number for this group (10000).<br>\r\n4. A list of users who are members of this group as a supplementary group (user01, user02,<br>\r\nuser03). Primary (or default) and supplementary groups are discussed later in this section.<br><br>\r\n\r\n<b>Primary Groups and Supplementary Groups</b><hr>\r\nEvery user has exactly one primary group. For local users, this is the group listed by GID number in<br>\r\nthe <b>/etc/passwd</b> file. By default, this is the group that will own new files created by the user.<br>\r\nNormally, when you create a new regular user, a new group with the same name as that user<br>\r\nis created. That group is used as the primary group for the new user, and that user is the only<br>\r\nmember of this User Private Group. It turns out that this helps make management of file<br>\r\npermissions simpler, which will be discussed later in this course.<br><br>\r\nUsers may also have supplementary groups. Membership in supplementary groups is determined<br>\r\nby the <b>/etc/group</b> file. Users are granted access to files based on whether any of their<br>\r\ngroups have access. It doesn't matter if the group or groups that have access are primary or<br><br>\r\nsupplementary for the user.\r\nFor example, if the user user01 has a primary group user01 and supplementary groups wheel<br>\r\nand webadmin, then that user can read files readable by any of those three groups.<br><br>\r\nThe <b>id</b> command can also be used to find out about group membership for a user.\r\n``` bash\r\n[user03@host ~]$ id\r\nuid=1003(user03) gid=1003(user03) groups=1003(user03),10(wheel),10000(group01)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\nIn the preceding example, user03 has the group user03 as their primary group (<b>gid</b>). The<br>\r\n<b>groups</b> item lists all groups for this user, and other than the primary group user03, the user has<br>\r\ngroups wheel and group01 as supplementary groups.<br>\r\n\r\n>**REFERENCES**<hr>\r\n><b>id</b>(1), <b>passwd</b>(5), and <b>group</b>(5) man pages<br>\r\n><b>info libc</b> (GNU C Library Reference Manual)<br>\r\n>\u2022 Section 30: Users and groups<br>\r\n>(Note that the glibc-devel package must be installed for this info node to be<br>\r\n>available.)", "order": 1, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 209, "fields": {"title": "QUIZ : DESCRIBING USER AND GROUP CONCEPTS", "slug": "quiz-describing-user-and-group-concepts", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/describing-user-group-concept/](https://course.btech.id/quiz/describing-user-group-concept/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 210, "fields": {"title": "GAINING SUPERUSER ACCESS", "slug": "gaining-superuser-access", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you will be able to switch to the superuser account to manage a\r\nLinux system, and grant other users superuser access through the <b>sudo</b> command.<br>\r\n\r\n##THE SUPERUSER\r\nMost operating systems have some sort of superuser, a user that has all power over the system.<br>\r\nIn Red Hat Enterprise Linux this is the root user. This user has the power to override normal<br>\r\nprivileges on the file system, and is used to manage and administer the system. To perform tasks<br>\r\nsuch as installing or removing software and to manage system files and directories, users must<br>\r\nescalate their privileges to the root user.<br>\r\n\r\nThe root user only among normal users can control most devices, but there are a few exceptions.<br>\r\nFor example, normal users can control removable devices, such as USB devices. Thus, normal users<br>\r\ncan add and remove files and otherwise manage a removable device, but only root can manage<br>\r\n\"fixed\" hard drives by default.<br>\r\n\r\nThis unlimited privilege, however, comes with responsibility. The root user has unlimited power to<br>\r\ndamage the system: remove files and directories, remove user accounts, add back doors, and so<br>\r\non. If the root user's account is compromised, someone else would have administrative control of<br>\r\nthe system. Throughout this course, administrators are encouraged to log in as a normal user and<br>\r\nescalate privileges to root only when needed.<br>\r\n\r\nThe root account on Linux is roughly equivalent to the local Administrator account on Microsoft<br>\r\nWindows. In Linux, most system administrators log in to the system as an unprivileged user and use<br>\r\nvarious tools to temporarily gain root privileges.<br>\r\n\r\n>**WARNING**<br><hr>\r\n>One common practice on Microsoft Windows in the past was for the local\r\n>Administrator user to log in directly to perform system administrator duties.\r\n>Although this is possible on Linux, Red Hat recommends that system administrators\r\n>do not log in directly as root. Instead, system administrators should log in as a\r\n>normal user and use other mechanisms (su, sudo, or PolicyKit, for example) to\r\n>temporarily gain superuser privileges.\r\n>\r\n>By logging in as the superuser, the entire desktop environment unnecessarily runs\r\n>with administrative privileges. In that situation, any security vulnerability which would\r\n>normally only compromise the user account has the potential to compromise the\r\n>entire system.\r\n\r\n<br>\r\n##SWITCHING USERS\r\nThe su command allows users to switch to a different user account. If you run su from a regular<br>\r\nuser account, you will be prompted for the password of the account to which you want to switch.<br>\r\nWhen root runs su, you do not need to enter the user's password.<br>\r\n\r\n``` bash\r\n[user01@host ~]$ su - user02\r\nPassword:\r\n[user02@host ~]$\r\n```\r\nIf you omit the user name, the su or su - command attempts to switch to root by default.\r\n``` bash\r\n[user01@host ~]$ su -\r\nPassword:\r\n[root@host ~]#\r\n```\r\nThe command su starts a non-login shell, while the command su - (with the dash option) starts<br>\r\na login shell. The main distinction between the two commands is that su - sets up the shell<br>\r\nenvironment as if it were a new login as that user, while su just starts a shell as that user, but uses<br>\r\nthe original user's environment settings.<br>\r\n\r\nIn most cases, administrators should run su - to get a shell with the target user's normal<br>\r\nenvironment settings. For more information, see the bash(1) man page.<br>\r\n\r\n>**NOTE**<br><hr>\r\n>The su command is most frequently used to get a command-line interface (shell \r\n>prompt) which is running as another user, typically root. However, with the -c\r\n>option, it can be used like the Windows utility runas to run an arbitrary program as\r\n>another user. Run info su to view more details.\r\n\r\n<br>\r\n##RUNNING COMMANDS WITH SUDO\r\n\r\nIn some cases, the root user's account may not have a valid password at all for security reasons.<br>\r\nIn this case, users cannot log in to the system as root directly with a password, and su cannot be<br>\r\nused to get an interactive shell. One tool that can be used to get root access in this case is <b>sudo</b>.<br>\r\n\r\nUnlike su, <b>sudo</b> normally requires users to enter their own password for authentication, not<br>\r\nthe password of the user account they are trying to access. That is, users who use <b>sudo</b>to<br>\r\nrun commands as root do not need to know the root password. Instead, they use their own<br>\r\npasswords to authenticate access.<br>\r\n\r\nAdditionally, <b>sudo</b> can be configured to allow specific users to run any command as some other<br>\r\nuser, or only some commands as that user.<br>\r\n\r\nFor example, when <b>sudo</b> is configured to allow the user01 user to run the command usermod as<br>\r\nroot, user01 could run the following command to lock or unlock a user account:\r\n``` bash\r\n[user01@host ~]$ sudo usermod -L user02\r\n[sudo] password for user01:\r\n[user01@host ~]$ su - user02\r\nPassword:\r\nsu: Authentication failure\r\n[user01@host ~]$\r\n```\r\nIf a user tries to run a command as another user, and the <b>sudo</b> configuration does not permit it,<br>\r\nthe command will be blocked, the attempt will be logged, and by default an email will be sent to<br>\r\nthe root user.\r\n``` bash\r\n[user02@host ~]$ sudo tail /var/log/secure\r\n[sudo] password for user02:\r\nuser02 is not in the sudoers file. This incident will be reported.\r\n[user02@host ~]$ \r\n```\r\nOne additional benefit to using <b>sudo</b> is that all commands executed are logged by default to /<br>\r\nvar/log/secure.\r\n``` bash\r\n[user01@host ~]$ sudo tail /var/log/secure\r\n...output omitted...\r\nFeb 6 20:45:46 host sudo[2577]: user01 : TTY=pts/0 ; PWD=/home/user01 ;\r\nUSER=root ; COMMAND=/sbin/usermod -L user02\r\n...output omitted...\r\n```\r\nIn Red Hat Enterprise Linux 7 and Red Hat Enterprise Linux 8, all members of the wheel group<br>\r\ncan use <b>sudo</b> to run commands as any user, including root. The user is prompted for their own<br>\r\npassword. This is a change from Red Hat Enterprise Linux 6 and earlier, where users who were<br>\r\nmembers of the wheel group did not get this administrative access by default.<br>\r\n\r\n>**WARNING**<br><hr>\r\n>RHEL 6 did not grant the wheel group any special privileges by default. Sites that\r\n>have been using this group for a non-standard purpose might be surprised when\r\n>RHEL 7 and RHEL 8 automatically grants all members of wheel full sudo privileges.\r\n>This could lead to unauthorized users getting administrative access to RHEL 7 and\r\n>RHEL 8 systems.\r\n>\r\n>Historically, UNIX-like systems use membership in the wheel group to grant or<br>\r\n>control superuser access.\r\n\r\n<br>\r\n<b>Getting an Interactive Root Shell with Sudo</b><hr>\r\nIf there is a nonadministrative user account on the system that can use <b>sudo</b> to run the su<br>\r\ncommand, you can run <b>sudo su</b> - from that account to get an interactive root user shell. This<br>\r\nworks because <b>sudo</b> will run su - as root, and root does not need to enter a password to use<br>\r\nsu.<br>\r\n\r\nAnother way to access the root account with <b>sudo</b> is to use the <b>sudo -i</b> command. This will<br>\r\nswitch to the root account and run that user's default shell (usually bash) and associated shell<br>\r\nlogin scripts. If you just want to run the shell, you can use the <b>sudo -s</b> command.<br>\r\n\r\nFor example, an administrator might get an interactive shell as root on an AWS EC2 instance by<br>\r\nusing SSH public-key authentication to log in as the normal user ec2-user, and then by running<br>\r\n<b>sudo -i</b> to get the root user's shell.\r\n```bash\r\n[ec2-user@host ~]$ sudo -i\r\n[sudo] password for ec2-user:\r\n[root@host ~]#\r\n```\r\nThe <b>sudo su</b> - command and <b>sudo -i</b> do not behave exactly the same. This will be discussed<br>\r\nbriefly at the end of the section.\r\n\r\n<b>Configuring Sudo</b><hr>\r\nThe main configuration file for <b>sudo</b> is <b>/etc/sudoers</b>. To avoid problems if multiple<br>\r\nadministrators try to edit it at the same time, it should only be edited with the special visudo<br>\r\ncommand.<br>\r\n\r\nFor example, the following line from the <b>/etc/sudoers</b> file enables <b>sudo</b> access for members of<br>\r\ngroup wheel.\r\n```bash\r\n%wheel      ALL=(ALL)       ALL\r\n```\r\nIn this line, %wheel is the user or group to whom the rule applies. A % specifies that this is a group,<br>\r\ngroup wheel. The ALL=(ALL) specifies that on any host that might have this file, wheel can run<br>\r\nany command. The final ALL specifies that wheel can run those commands as any user on the<br>\r\nsystem.<br>\r\n\r\nBy default, <b>/etc/sudoers</b> also includes the contents of any files in the <b>/etc/sudoers.d</b><br>\r\ndirectory as part of the configuration file. This allows an administrator to add <b>sudo</b> access for a<br>\r\nuser simply by putting an appropriate file in that directory.<br>\r\n\r\n>**NOTE**<br><hr>\r\n>Using supplementary files under the /etc/sudoers.d directory is convenient\r\n>and simple. You can enable or disable sudo access simply by copying a file into the\r\n>directory or removing it from the directory.\r\n>\r\n>In this course, you will create and remove files in the /etc/sudoers.d directory to<br>\r\n>configure sudo access for users and groups.\r\n\r\n<br>\r\nTo enable full <b>sudo</b> access for the user user01, you could create <b>/etc/sudoers.d/user01</b><br>\r\nwith the following content:\r\n```bash\r\nuser01      ALL=(ALL)       ALL\r\n```\r\nTo enable full <b>sudo</b> access for the group group01, you could create <b>/etc/sudoers.d/group01</b><br>\r\nwith the following content:\r\n```bash\r\n%group01        ALL=(ALL)       ALL\r\n```\r\nIt is also possible to set up <b>sudo</b> to allow a user to run commands as another user without entering<br>\r\ntheir password:\r\n```bash\r\nansible     ALL=(ALL)       NOPASSWD:ALL\r\n```\r\nWhile there are obvious security risks to granting this level of access to a user or group, it is<br>\r\nfrequently used with cloud instances, virtual machines, and provisioning systems to help configure<br>\r\nservers. The account with this access must be carefully protected and might require SSH public-<br>\r\nkey authentication in order for a user on a remote system to access it at all.<br>\r\n\r\nFor example, the official AMI for Red Hat Enterprise Linux in the Amazon Web Services<br>\r\nMarketplace ships with the root and the ec2-user users' passwords locked. The ec2-user user<br>\r\naccount is set up to allow remote interactive access through SSH public-key authentication. The<br>\r\n\r\nuser ec2-user can also run any command as root without a password because the last line of<br>\r\nthe AMI's <b>/etc/sudoers</b> file is set up as follows:\r\n```bash\r\nec2-user        ALL=(ALL)       NOPASSWD: ALL\r\n```\r\nThe requirement to enter a password for sudo can be re-enabled or other changes may be made<br>\r\nto tighten security as part of the process of configuring the system.<br><br>\r\n\r\n>**NOTE**<br><hr>\r\n>In this course, you will frequently see <b>sudo su</b> - used instead of <b>sudo -i</b>. >Both<br>\r\n>commands work, but there are some subtle differences between them.<br>\r\n>\r\n>The <b>sudo su</b> - command sets up the root environment exactly like a normal login<br>\r\n>because the <b>su</b> - command ignores the settings made by <b>sudo</b> and sets up >the<br>\r\n>environment from scratch.<br>\r\n\r\n>The default configuration of the <b>sudo -i</b> command actually sets up some details<br>\r\n>of the root user's environment differently than a normal login. For example, it sets<br>\r\n>the PATH environment variable slightly differently. This affects where the shell will<br>\r\n>look to find commands.<br>\r\n\r\n>You can make <b>sudo -i</b> behave more like <b>su</b> - by editing <b>/etc/sudoers</b> >with<br>\r\n>visudo. Find the line\r\n\r\n>![](/media/markdownx/c118fd98-daa1-4b03-83cb-b54efc460eb1.png)\r\n\r\n>and replace it with the following two lines:\r\n\r\n>![](/media/markdownx/1bd58fe6-305c-40ba-86b8-02f445081005.png)\r\n\r\n>For most purposes, this is not a major difference. However, for consistency of PATH<br>\r\n>settings on systems with the default <b>/etc/sudoers</b> file, the authors of this course<br>\r\n>mostly use <b>sudo su - </b>in examples.<br>\r\n\r\n<br>\r\n>**REFERENCES**<br><hr>\r\n><b>su</b>(1), <b>sudo</b>(8), <b>visudo</b>(8) and <b>sudoers</b>(5) man pages<br>\r\n><b>info libc persona</b> (GNU C Library Reference Manual)<br>\r\n>\u2022 Section 30.2: The Persona of a Process<br>\r\n>(Note that the glibc-devel package must be installed for this info node to be<br>\r\n>available.)", "order": 3, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 211, "fields": {"title": "GUIDED EXERCISE : GAINING SUPERUSER ACCESS", "slug": "guided-exercise-gaining-superuser-access", "content": "", "content_md": "In this exercise, you will practice switching to the root account and running commands as\r\nroot.\r\n##OUTCOMES\r\nYou should be able to:<br>\r\n\r\n\u2022 Use sudo to switch to root and access the interactive shell as root without knowing the<br>\r\npassword of the superuser.<br>\r\n\r\n\u2022 Explain how su and su - can affect the shell environment through running or not running<br>\r\nthe login scripts.<br>\r\n\r\n\u2022 Use sudo to run other commands as root.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run lab users-sudo start to start the exercise. This script creates<br>\r\nthe necessary user accounts and files to set up the environment correctly.<br>\r\n``` bash\r\n[student@workstation ~]$ lab users-sudo start\r\n```\r\n\r\n<b>1.</b> From workstation, open an SSH session to servera as student.\r\n``` bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n<b>2.</b> Explore the shell environment of student. View the current user and group information\r\nand display the current working directory. Also view the environment variables that specify\r\nthe user's home directory and the locations of the user's executables.<br>\r\n2.1. Run <b>id</b> to view the current user and group information.\r\n```bash\r\n[student@servera ~]$ id\r\nuid=1000(student) gid=1000(student) groups=1000(student),10(wheel)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\n2.2. Run <b>pwd</b> to display the current working directory.\r\n```bash\r\n[student@servera ~]$ pwd\r\n/home/student\r\n```\r\n2.3. Print the values of the HOME and PATH variables to determine the home directory<br>\r\nand user executables' path, respectively.\r\n```bash\r\n[student@servera ~]$ echo $HOME\r\n/home/student\r\n[student@servera ~]$ echo $PATH\r\n/home/student/.local/bin:/home/student/bin:/usr/local/bin:/usr/bin:/\r\nusr/local/sbin:/usr/sbin\r\n```\r\n<b>3.</b> Switch to root in a non-login shell and explore the new shell environment.<br>\r\n3.1. Run sudo su at the shell prompt to become the root user.\r\n```bash\r\n[student@servera ~]$ sudo su\r\n[sudo] password for student: student\r\n[root@servera student]#\r\n```\r\n3.2. Run id to view the current user and group information.\r\n```bash\r\n[root@servera student]# id\r\nuid=0(root) gid=0(root) groups=0(root)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\n3.3. Run pwd to display the current working directory.\r\n```bash\r\n[root@servera student]# pwd\r\n/home/student\r\n```\r\n3.4. Print the values of the HOME and PATH variables to determine the home directory<br>\r\nand user executables' path, respectively.\r\n```bash\r\n[root@servera student]# echo $HOME\r\n/root\r\n[root@servera student]# echo $PATH\r\n/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\r\n```\r\nIf you already have some experience with Linux and the su command, you may have<br>\r\nexpected that using su without the dash (-) option to become root would cause<br>\r\nyou to keep the current PATH of student. That did not happen. As you will see in<br>\r\nthe next step, this is not the usual PATH for root either.<br>\r\n\r\nWhat happened? The difference is that you did not run su directly. Instead, you ran<br>\r\nsu as root using sudo because you did not possess the password of the superuser.<br>\r\nThe sudo command initially overrides the PATH variable from the initial environment<br>\r\nfor security reasons. Any command that runs after the initial override can still update<br>\r\nthe PATH variable, as you will see in the following steps.<br>\r\n\r\n3.5. Exit the root user's shell to return to the student user's shell.\r\n```bash\r\n[root@servera student]# exit\r\nexit\r\n[student@servera ~]$\r\n```\r\n\r\n<b>4.</b> Switch to root in a login shell and explore the new shell environment.<br>\r\n4.1. Run sudo su - at the shell prompt to become the root user.\r\n```bash\r\n[student@servera ~]$ sudo su -\r\n[root@servera ~]#\r\n```\r\nNotice the difference in the shell prompt compared to that of sudo su in the<br>\r\npreceding step.<br>\r\n\r\nsudo may or may not prompt you for the student password, depending on the<br>\r\ntime-out period of sudo. The default time-out period is five minutes. If you have<br>\r\nauthenticated to sudo within the last five minutes, sudo will not prompt you for the<br>\r\npassword. If it has been more than five minutes since you authenticated to sudo,<br>\r\nyou need to enter student as the password to get authenticated to sudo.<br>\r\n4.2. Run id to view the current user and group information.\r\n```bash\r\n[root@servera ~]# id\r\nuid=0(root) gid=0(root) groups=0(root)\r\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n```\r\n4.3. Run pwd to display the current working directory.\r\n```bash\r\n[root@servera ~]# pwd\r\n/root\r\n```\r\n4.4. Print the values of the HOME and PATH variables to determine the home directory<br>\r\nand the user executables' path, respectively.\r\n```bash\r\n[root@servera ~]# echo $HOME\r\n/root\r\n[root@servera ~]# echo $PATH\r\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\r\n```\r\nAs in the preceding step, after sudo reset the PATH variable from the settings in the<br>\r\nstudent user's shell environment, the su - command ran the shell login scripts for<br>\r\nroot and set the PATH variable to yet another value. The su command without the<br>\r\ndash (-) option did not do that.<br>\r\n4.5. Exit the root user's shell to return to the student user's shell.\r\n```bash\r\n[root@servera ~]# exit\r\nlogout\r\n[student@servera ~]$\r\n```\r\n<b>5.</b> Verify that the operator1 user is configured as to run any command as any user using<br>\r\nsudo.\r\n```bash\r\n[student@servera ~]$ sudo cat /etc/sudoers.d/operator1\r\noperator1 ALL=(ALL) ALL\r\n```\r\n<b>6.</b> Become operator1 and view the contents of /var/log/messages. Copy /etc/motd to<br>\r\n/etc/motdOLD and remove it (/etc/motdOLD). These operations require administrative<br>\r\nrights and so use sudo to run those commands as the superuser. Do not switch to root<br>\r\nusing sudo su or sudo su -. Use redhat as the password of operator1.<br>\r\n\r\n6.1.Switch to operator1.\r\n```bash\r\n[student@servera ~]$ su - operator1\r\nPassword: redhat\r\n[operator1@servera ~]$\r\n```\r\n6.2. Attempt to view the last five lines of /var/log/messages without using sudo. This<br>\r\nshould fail.\r\n```bash\r\n[operator1@servera ~]$ tail -5 /var/log/messages\r\ntail: cannot open '/var/log/messages' for reading: Permission denied\r\n```\r\n6.3. Attempt to view the last five lines of /var/log/messages with sudo. This should<br>\r\nsucceed.\r\n```bash\r\n[operator1@servera ~]$ sudo tail -5 /var/log/messages\r\n[sudo] password for operator1: redhat\r\nJan 23 15:53:36 servera su[2304]: FAILED SU (to operator1) student on\r\npts/1\r\nJan 23 15:53:51 servera su[2307]: FAILED SU (to operator1) student on\r\npts/1\r\nJan 23 15:53:58 servera su[2310]: FAILED SU (to operator1) student on\r\npts/1\r\nJan 23 15:54:12 servera su[2322]: (to operator1) student on pts/1\r\nJan 23 15:54:25 servera su[2353]: (to operator1) student on pts/1\r\n```\r\n\r\n\r\n\r\n>**NOTE**<br><hr>\r\n>The preceding output may differ on your system.<br>\r\n\r\n<br>\r\n6.4. Attempt to make a copy of /etc/motd as /etc/motdOLD without using sudo. This<br>\r\nshould fail.\r\n```bash\r\n[operator1@servera ~]$ cp /etc/motd /etc/motdOLD\r\ncp: cannot create regular file '/etc/motdOLD': Permission denied\r\n```\r\n6.5. Attempt to make a copy of /etc/motd as /etc/motdOLD with sudo. This should<br>\r\nsucceed.\r\n```bash\r\n[operator1@servera ~]$ sudo cp /etc/motd /etc/motdOLD\r\n[operator1@servera ~]$\r\n```\r\n6.6. Attempt to delete /etc/motdOLD without using sudo. This should fail.<br>\r\n```bash\r\n[operator1@servera ~]$ rm /etc/motdOLD\r\nrm: remove write-protected regular empty file '/etc/motdOLD'? y\r\nrm: cannot remove '/etc/motdOLD': Permission denied\r\n[operator1@servera ~]$\r\n```\r\n6.7. Attempt to delete /etc/motdOLD with sudo. This should succeed.<br>\r\n```bash\r\n[operator1@servera ~]$ sudo rm /etc/motdOLD\r\n[operator1@servera ~]$\r\n```\r\n6.8. Exit the operator1 user's shell to return to the student user's shell.<br>\r\n```bash\r\n[operator1@servera ~]$ exit\r\nlogout\r\n[student@servera ~]$\r\n```\r\n6.9. Log off from servera.<br>\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<b>Finish</b><hr>\r\nOn workstation, run lab users-sudo finish to complete this exercise. This script deletes<br>\r\nthe user accounts and files created at the start of the exercise to ensure that the environment is<br>\r\nclean.\r\n```bash\r\n[student@workstation ~]$ lab users-sudo finish\r\n```\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 212, "fields": {"title": "MANAGING LOCAL USER ACCOUNTS", "slug": "managing-local-user-accounts", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to create, modify, and delete local user accounts.<br>\r\n\r\n##MANAGING LOCAL USERS\r\nA number of command-line tools can be used to manage local user accounts.<br>\r\n\r\n<b>Creating Users from the Command Line</b><hr>\r\n\r\n\u2022 The useradd username command creates a new user named username. It sets up the<br>\r\nuser's home directory and account information, and creates a private group for the user named<br>\r\nusername. At this point the account does not have a valid password set, and the user cannot log<br>\r\nin until a password is set.<br>\r\n\r\n\u2022 The useradd --help command displays the basic options that can be used to override the<br>\r\ndefaults. In most cases, the same options can be used with the usermod command to modify an<br>\r\nexisting user.<br>\r\n\u2022 Some defaults, such as the range of valid UID numbers and default password aging rules, are<br>\r\nread from the /etc/login.defs file. Values in this file are only used when creating new users.<br>\r\nA change to this file does not affect existing users.<br>\r\n\r\n<b>Modifying Existing Users from the Command Line</b><hr>\r\n\u2022 The usermod --help command displays the basic options that can be used to modify an<br>\r\naccount. Some common options include:<br>\r\n\r\n![](/media/markdownx/b87c26d0-8c03-4efc-9f91-e44e3a3e6358.png)\r\n![](/media/markdownx/e3fd1bc4-8667-444d-8551-0790b7afd8d0.png)\r\n\r\n<b>Deleting Users from the Command Line</b><hr>\r\n\r\n\u2022 The userdel username command removes the details of username from /etc/passwd, but<br>\r\nleaves the user's home directory intact.<br>\r\n\r\n\u2022 The userdel -r username command removes the details of username from /etc/passwd<br>\r\nand also deletes the user's home directory.\r\n\r\n>**WARNING**<br><hr>\r\n>When a user is removed with userdel without the -r option specified, the system<br>\r\n>will have files that are owned by an unassigned UID. This can also happen when a<br>\r\n>file, having a deleted user as its owner, exists outside that user's home directory.<br>\r\n>This situation can lead to information leakage and other security issues.<br>\r\n\r\n>In Red Hat Enterprise Linux 7 and Red Hat Enterprise Linux 8, the useradd<br>\r\n>command assigns new users the first free UID greater than or equal to 1000, unless<br>\r\n>you explicitly specify one using the -u option.<br>\r\n\r\n>This is how information leakage can occur. If the first free UID had been previously<br>\r\n>assigned to a user account which has since been removed from the system, the old<br>\r\n>user's UID will get reassigned to the new user, giving the new user ownership of the<br>\r\n>old user's remaining files.<br>\r\n\r\n>The following scenario demonstrates this situation.\r\n\r\n> ![](/media/markdownx/6931b1e0-f5e1-454c-8ca5-c374275aa06f.png)\r\n\r\n>Notice that user02 now owns all files that user01 previously owned.<br>\r\n\r\n>Depending on the situation, one solution to this problem is to remove all unowned<br>\r\n>files from the system when the user that created them is deleted. Another solution<br>\r\n>is to manually assign the unowned files to a different user. The root user can use<br>\r\n>the find / -nouser -o -nogroup command to find all unowned files and<br>\r\n>directories.\r\n\r\n<b>Setting Passwords from the Command Line</b><hr>\r\n\r\n\u2022 The passwd username command sets the initial password or changes the existing password of\r\nusername.<br>\r\n\r\n\u2022 The root user can set a password to any value. A message is displayed if the password does\r\nnot meet the minimum recommended criteria, but is followed by a prompt to retype the new\r\npassword and all tokens are updated successfully.<br>\r\n```bash\r\n[root@host ~]# passwd user01\r\nChanging password for user user01.\r\nNew password: redhat\r\nBAD PASSWORD: The password fails the dictionary check - it is based on a\r\ndictionary word\r\nRetype new password: redhat\r\npasswd: all authentication tokens updated successfully.\r\n[root@host ~]#\r\n```\r\n\u2022 A regular user must choose a password at least eight characters long and is also not based on a\r\ndictionary word, the username, or the previous password.<br>\r\n\r\n<b>UID Ranges</b><hr>\r\n\r\nSpecific UID numbers and ranges of numbers are used for specific purposes by Red Hat<br>\r\nEnterprise Linux.<br>\r\n\r\n\u2022 UID 0 is always assigned to the superuser account, root.<br>\r\n\u2022 UID 1-200 is a range of \"system users\" assigned statically to system processes by Red Hat.<br>\r\n\r\n\u2022 UID 201-999 is a range of \"system users\" used by system processes that do not own files on the<br>\r\nfile system. They are typically assigned dynamically from the available pool when the software<br>\r\nthat needs them is installed. Programs run as these \"unprivileged\" system users in order to limit<br>\r\ntheir access to only the resources they need to function.<br>\r\n\r\n\u2022 UID 1000+ is the range available for assignment to regular users.<br>\r\n\r\n>**NOTE**<br><hr>\r\n>Prior to RHEL 7, the convention was that UID 1-499 was used for system users and\r\n>UID 500+ for regular users. Default ranges used by useradd and groupadd can be\r\n>changed in the /etc/login.defs file.\r\n\r\n<br>\r\n>**REFERENCES**<br><hr>\r\n>useradd</b>(8), <b>usermod</b>(8), <b>userdel</b>(8) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 213, "fields": {"title": "GUIDED EXERCISE : MANAGING LOCAL USER ACCOUNTS", "slug": "guided-exercise-managing-local-user-accounts", "content": "", "content_md": "In this exercise, you will create several users on your system and set passwords for those\r\nusers.\r\n##OUTCOMES\r\nYou should be able to configure a Linux system with additional user accounts.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run lab users-manage start to start the exercise. This script<br>\r\nensures that the environment is set up correctly.\r\n```bash\r\n[student@workstation ~]$ lab users-manage start\r\n```\r\n<b>1.</b> From workstation, open an SSH session to servera as student.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n<b>2.</b> On servera, switch to root using sudo, converting to the root user's shell environment.\r\n```bash\r\n[student@servera ~]$ sudo su -\r\n[sudo] password for student: student\r\n[root@servera ~]#\r\n```\r\n<b>3.</b> Create the operator1 user and confirm that it exists in the system.\r\n```bash\r\n[root@servera ~]# useradd operator1\r\n[root@servera ~]# tail /etc/passwd\r\n...output omitted...\r\noperator1:x:1001:1001::/home/operator1:/bin/bash\r\n```\r\n<b>4.</b> Set the password for operator1 to redhat.\r\n```bash\r\n[root@servera ~]# passwd operator1\r\nChanging password for user operator1.\r\nNew password: redhat\r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: redhat\r\npasswd: all authentication tokens updated successfully.\r\n```\r\n<b>5.</b> Create the additional users called operator2 and operator3. Set their passwords to<br>\r\nredhat.<br>\r\n5.1. Add the operator2 user. Set the password for operator2 to redhat.\r\n```bash\r\n[root@servera ~]# useradd operator2\r\n[root@servera ~]# passwd operator2\r\nChanging password for user operator2.\r\nNew password: redhat\r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: redhat\r\npasswd: all authentication tokens updated successfully.\r\n```\r\n5.2. Add the operator3 user. Set the password for operator3 to redhat.\r\n```bash\r\n[root@servera ~]# useradd operator3\r\n[root@servera ~]# passwd operator3\r\nChanging password for user operator3.\r\nNew password: redhat\r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: redhat\r\npasswd: all authentication tokens updated successfully.\r\n```\r\n<b>6.</b> Update the operator1 and operator2 user accounts to include the Operator One and<br>\r\nOperator Two comments, respectively. Verify that the comments are successfully added.<br>\r\n\r\n6.1. Run usermod -c to update the comments of the operator1 user account.\r\n```bash\r\n[root@servera ~]# usermod -c \"Operator One\" operator1\r\n```\r\n6.2. Run usermod -c to update the comments of the operator2 user account.\r\n```bash\r\n[root@servera ~]# usermod -c \"Operator Two\" operator2\r\n```\r\n6.3. Confirm that the comments for each of the operator1 and operator2 users are<br>\r\nreflected in the user records.\r\n```bash\r\n[root@servera ~]# tail /etc/passwd\r\n...output omitted...\r\noperator1:x:1001:1001:Operator One:/home/operator1:/bin/bash\r\noperator2:x:1002:1002:Operator Two:/home/operator2:/bin/bash\r\noperator3:x:1003:1003::/home/operator3:/bin/bash\r\n```\r\n<b>7.</b> Delete the operator3 user along with any personal data of the user. Confirm that the user<br>\r\nis successfully deleted.<br>\r\n7.1. Remove the operator3 user from the system.\r\n```bash\r\n[root@servera ~]# userdel -r operator3\r\n```\r\n7.2. Confirm that operator3 is successfully deleted.\r\n```bash\r\n[root@servera ~]# tail /etc/passwd\r\n...output omitted...\r\noperator1:x:1001:1001:Operator One:/home/operator1:/bin/bash\r\noperator2:x:1002:1002:Operator Two:/home/operator2:/bin/bash\r\n```\r\nNotice that the preceding output does not display the user account information of<br>\r\noperator3.<br>\r\n\r\n7.3. Exit the root user's shell to return to the student user's shell.\r\n```bash\r\n[root@servera ~]# exit\r\nlogout\r\n[student@servera ~]$\r\n```\r\n7.4. Log off from servera.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n<b>Finish</b><hr>\r\nOn workstation, run <b>lab users-manage finish</b> to complete this exercise. This script<br>\r\nensures that the environment is clean.<br>\r\n```bash\r\n[student@workstation ~]$ lab users-manage finish\r\n```\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 214, "fields": {"title": "MANAGING LOCAL GROUP ACCOUNTS", "slug": "managing-local-group-accounts", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, students should be able to create, modify, and delete local group<br>\r\naccounts.<br>\r\n\r\n##MANAGING LOCAL GROUPS\r\nA group must exist before a user can be added to that group. Several command-line tools are used<br>\r\nto manage local group accounts.<br>\r\n\r\n<b>Creating Groups from the Command Line</b><hr>\r\n\u2022 The groupadd command creates groups. Without options the groupadd command uses the<br>\r\nnext available GID from the range specified in the /etc/login.defs file while creating the<br>\r\ngroups.<br>\r\n\r\n\u2022 The -g option specifies a particular GID for the group to use.\r\n```bash\r\n[user01@host ~]$ sudo groupadd -g 10000 group01\r\n[user01@host ~]$ tail /etc/group\r\n...output omitted...\r\ngroup01:x:10000:\r\n```\r\n>**NOTE**<br><hr>\r\n>Given the automatic creation of user private groups (GID 1000+), it is generally\r\n>recommended to set aside a range of GIDs to be used for supplementary groups. A\r\n>higher range will avoid a collision with a system group (GID 0-999).\r\n\r\n<br>\r\n\u2022 The -r option creates a system group using a GID from the range of valid system GIDs listed<br>\r\nin the /etc/login.defs file. The SYS_GID_MIN and SYS_GID_MAX configuration items in /<br>\r\netc/login.defs define the range of system GIDs.\r\n```bash\r\n[user01@host ~]$ sudo groupadd -r group02\r\n[user01@host ~]$ tail /etc/group\r\n...output omitted...\r\ngroup01:x:10000:\r\ngroup02:x:988:\r\n```\r\n<b>Modifying Existing Groups from the Command Line</b><hr>\r\n\u2022 The groupmod command changes the properties of an existing group. The -n option specifies a<br>\r\nnew name for the group.\r\n```bash\r\n[user01@host ~]$ sudo groupmod -n group0022 group02\r\n[user01@host ~]$ tail /etc/group\r\n...output omitted...\r\ngroup0022:x:988:\r\n```\r\nNotice that the group name is updated to group0022 from group02.<br>\r\n\r\n\u2022 The -g option specifies a new GID.\r\n```bash\r\n[user01@host ~]$ sudo groupmod -g 20000 group0022\r\n[user01@host ~]$ tail /etc/group\r\n...output omitted...\r\ngroup0022:x:20000:\r\n```\r\nNotice that the GID is updated to 20000 from 988.<br>\r\n\r\n<b>Deleting Groups from the Command Line</b><hr>\r\n\u2022 The groupdel command removes groups.\r\n```bash\r\n[user01@host ~]$ sudo groupdel group0022\r\n```\r\n>**NOTE**<br><hr>\r\n>You cannot remove a group if it is the primary group of any existing user. As with\r\n>userdel, check all file systems to ensure that no files remain on the system that are\r\n>owned by the group.\r\n\r\n<b>Changing Group Membership from the Command Line</b><hr>\r\n\u2022 The membership of a group is controlled with user management. Use the usermod -g<br>\r\ncommand to change a user's primary group.\r\n```bash\r\n[user01@host ~]$ id user02\r\nuid=1006(user02) gid=1008(user02) groups=1008(user02)\r\n[user01@host ~]$ sudo usermod -g group01 user02\r\n[user01@host ~]$ id user02\r\nuid=1006(user02) gid=10000(group01) groups=10000(group01)\r\n```\r\n\u2022 Use the usermod -aG command to add a user to a supplementary group.\r\n```bash\r\n[user01@host ~]$ id user03\r\nuid=1007(user03) gid=1009(user03) groups=1009(user03)\r\n[user01@host ~]$ sudo usermod -aG group01 user03\r\n[user01@host ~]$ id user03\r\nuid=1007(user03) gid=1009(user03) groups=1009(user03),10000(group01)\r\n```\r\n>**IMPORTANT**<br><hr>\r\n>The use of the -a option makes usermod function in append mode. Without -a, the\r\n>user will be removed from any of their current supplementary groups that are not\r\n>included in the -G options list.\r\n\r\n<br>\r\n>**REFERENCES**<br><hr>\r\n><b>group</b>(5), <b>groupadd</b>(8),<b>groupdel</b>(8), and <b>usermod</b>(8) man >pages", "order": 7, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 215, "fields": {"title": "GUIDED EXERCISE : MANAGING LOCAL GROUP ACCOUNTS", "slug": "guided-exercise-managing-local-group-accounts", "content": "", "content_md": "In this exercise, you will create groups, use them as supplementary groups for some users<br>\r\nwithout changing those users' primary groups, and configure one of the groups with sudo<br>\r\naccess to run commands as root.<br>\r\n\r\n##OUTCOMES\r\nYou should be able to:<br>\r\n\r\n\u2022 Create groups and use them as supplementary groups.<br>\r\n\r\n\u2022 Configure sudo access for a group.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run lab users-group-manage start to start the exercise. This<br>\r\nscript creates the necessary user accounts to set up the environment correctly.<br>\r\n```bash\r\n[student@workstation ~]$ lab users-group-manage start\r\n```\r\n<b>1.</b> From workstation, open an SSH session to servera as student.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n<b>2.</b> On servera, switch to root using sudo, inheriting the full environment of the root user.\r\n```bash\r\n[student@servera ~]$ sudo su -\r\n[sudo] password for student: student\r\n[root@servera ~]#\r\n```\r\n<b>3.</b> Create the operators supplementary group with the GID of 30000.\r\n```bash\r\n[root@servera ~]# groupadd -g 30000 operators\r\n```\r\n<b>4.</b> Create admin as an additional supplementary group.\r\n```bash\r\n[root@servera ~]# groupadd admin\r\n```\r\n<b>5.</b> Verify that both the operators and admin supplementary groups exist.\r\n```bash\r\n[root@servera ~]# tail /etc/group\r\n...output omitted...\r\noperators:x:30000:\r\nadmin:x:30001:\r\n```\r\n<b>6.</b> Ensure that the users operator1, operator2 and operator3 belong to the group<br>\r\noperators.<br>\r\n\r\n6.1. Add operator1, operator2, and operator3 to operators.\r\n```bash\r\n[root@servera ~]# usermod -aG operators operator1\r\n[root@servera ~]# usermod -aG operators operator2\r\n[root@servera ~]# usermod -aG operators operator3\r\n```\r\n6.2. Confirm that the users are successfully added to the group.\r\n```bash\r\n[root@servera ~]# id operator1\r\nuid=1001(operator1) gid=1001(operator1)\r\ngroups=1001(operator1),30000(operators)\r\n[root@servera ~]# id operator2\r\nuid=1002(operator2) gid=1002(operator2)\r\ngroups=1002(operator2),30000(operators)\r\n[root@servera ~]# id operator3\r\nuid=1003(operator3) gid=1003(operator3)\r\ngroups=1003(operator3),30000(operators)\r\n```\r\n<b>7.</b> Ensure that the users sysadmin1, sysadmin2 and sysadmin3 belong to the group<br>\r\nadmin. Enable administrative rights for all the group members of admin. Verify that any<br>\r\nmember of admin can run administrative commands.<br>\r\n\r\n7.1. Add sysadmin1, sysadmin2, and sysadmin3 to admin.\r\n```bash\r\n[root@servera ~]# usermod -aG admin sysadmin1\r\n[root@servera ~]# usermod -aG admin sysadmin2\r\n[root@servera ~]# usermod -aG admin sysadmin3\r\n```\r\n7.2. Confirm that the users are successfully added to the group.\r\n```bash\r\n[root@servera ~]# id sysadmin1\r\nuid=1004(sysadmin1) gid=1004(sysadmin1)\r\ngroups=1004(sysadmin1),30001(admin)\r\n[root@servera ~]# id sysadmin2\r\nuid=1005(sysadmin2) gid=1005(sysadmin2)\r\ngroups=1005(sysadmin2),30001(admin)\r\n[root@servera ~]# id sysadmin3\r\nuid=1006(sysadmin3) gid=1006(sysadmin3)\r\ngroups=1006(sysadmin3),30001(admin)\r\n```\r\n7.3. Examine /etc/group to verify the supplemental group memberships.\r\n```bash\r\n[root@servera ~]# tail /etc/group\r\n...output omitted...\r\noperators:x:30000:operator1,operator2,operator3\r\nadmin:x:30001:sysadmin1,sysadmin2,sysadmin3\r\n```\r\n7.4. Create the /etc/sudoers.d/admin file such that the members of admin have full<br>\r\nadministrative privileges.\r\n```bash\r\n[root@servera ~]# echo \"%admin ALL=(ALL) ALL\" >> /etc/sudoers.d/admin\r\n```\r\n7.5. Switch to sysadmin1 (a member of admin) and verify that you can run a sudo<br>\r\ncommand as sysadmin1.\r\n```bash\r\n[root@servera ~]# su - sysadmin1\r\n[sysadmin1@servera ~]$ sudo cat /etc/sudoers.d/admin\r\n[sudo] password for sysadmin1: redhat\r\n%admin ALL=(ALL) ALL\r\n```\r\n7.6. Exit the sysadmin1 user's shell to return to the root user's shell.\r\n```bash\r\n[sysadmin1@servera ~]$ exit\r\nlogout\r\n[root@servera ~]#\r\n```\r\n7.7. Exit the root user's shell to return to the student user's shell.\r\n```bash\r\n[root@servera ~]# exit\r\nlogout\r\n[student@servera ~]$\r\n```\r\n7.8. Log off from servera.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n<b>Finish</b><hr>\r\nOn workstation, run <b>lab users-group-manage finish</b> to complete this exercise. This<br>\r\nscript deletes the user accounts created at the start of the exercise.\r\n```bash\r\n[student@workstation ~]$ lab users-group-manage finish\r\n```\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 216, "fields": {"title": "MANAGING USER PASSWORDS", "slug": "managing-user-passwords", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to set a password management policy for users,\r\nand manually lock and unlock user accounts.<br>\r\n\r\n##SHADOW PASSWORDS AND PASSWORD POLICY\r\nAt one time, encrypted passwords were stored in the world-readable /etc/passwd file. This<br>\r\nwas thought to be reasonably secure until dictionary attacks on encrypted passwords became<br>\r\ncommon. At that point, the encrypted passwords were moved to a separate /etc/shadow file<br>\r\nwhich is readable only by root. This new file also allowed password aging and expiration features<br>\r\nto be implemented.<br>\r\n\r\nLike /etc/passwd, each user has a line in the /etc/shadow file. A sample line from /etc/<br>\r\nshadow with its nine colon-separated fields is shown below.\r\n\r\n![](/media/markdownx/45b32088-4105-4677-89e6-d87fa3ce755a.png)\r\n\r\n1. Username of the account this password belongs to.<br>\r\n2. The encrypted password of the user. The format of encrypted passwords is discussed later in<br>\r\n   this section.<br>\r\n3. The day on which the password was last changed. This is set in days since 1970-01-01, and is<br>\r\n   calculated in the UTC time zone.<br>\r\n4. The minimum number of days that have to elapse since the last password change before the<br>\r\n   user can change it again.<br>\r\n5. The maximum number of days that can pass without a password change before the password<br>\r\n   expires. An empty field means it does not expire based on time since the last change.<br>\r\n6. Warning period. The user will be warned about an expiring password when they login for this<br>\r\n   number of days before the deadline.<br>\r\n7. Inactivity period. Once the password has expired, it will still be accepted for login for this<br>\r\n   many days. After this period has elapsed, the account will be locked.<br>\r\n8. The day on which the password expires. This is set in days since 1970-01-01, and is calculated<br>\r\n   in the UTC time zone. An empty field means it does not expire on a particular date.<br>\r\n9. The last field is usually empty and is reserved for future use.<br>\r\n\r\n<b>Format of an Encrypted Password</b><hr>\r\nThe encrypted password field stores three pieces of information: the hashing algorithm used, the<br>\r\nsalt, and the encrypted hash. Each piece of information is delimited by the $ sign.\r\n\r\n![](/media/markdownx/10767df4-50ac-4844-88ea-dd52dcc6b65e.png)\r\n\r\n1. The hashing algorithm used for this password. The number 6 indicates it is a SHA-512 hash,<br>\r\n   which is the default in Red Hat Enterprise Linux 8. A 1 would indicate MD5, a 5 SHA-256.<br>\r\n2. The salt used to encrypt the password. This is originally chosen at random.<br>\r\n3. The encrypted hash of the user's password. The salt and the unencrypted password are<br>\r\n   combined and encrypted to generate the encrypted hash of the password.<br>\r\n\r\nThe use of a salt prevents two users with the same password from having identical entries in the /<br>\r\netc/shadow file. For example, even if user01 and user02 both use redhat as their passwords,<br>\r\ntheir encrypted passwords in /etc/shadow will be different if their salts are different.<br>\r\n\r\n<b>Password Verification</b><hr>\r\nWhen a user tries to log in, the system looks up the entry for the user in /etc/shadow, combines<br>\r\nthe salt for the user with the unencrypted password that was typed in, and encrypts them using<br>\r\nthe hashing algorithm specified. If the result matches the encrypted hash, the user typed in the<br>\r\nright password. If the result does not match the encrypted hash, the user typed in the wrong<br>\r\npassword and the login attempt fails. This method allows the system to determine if the user<br>\r\ntyped in the correct password without storing that password in a form usable for logging in.<br>\r\n\r\n##CONFIGURING PASSWORD AGING\r\nThe following diagram relates the relevant password aging parameters, which can be adjusted<br>\r\nusing the chage command to implement a password aging policy.\r\n\r\n![](/media/markdownx/c120a35b-f88e-4849-a549-0439a04a7773.png)\r\n```bash\r\n[user01@host ~]$ sudo chage -m 0 -M 90 -W 7 -I 14 user03\r\n```\r\nThe preceding chage command uses the -m, -M, -W, and -I options to set the minimum age,<br>\r\nmaximum age, warning period, and inactivity period of the user's password, respectively.<br>\r\n\r\nThe <b>chage -d 0 user03</b> command forces the user03 user to update its password on the next<br>\r\nlogin.<br>\r\n\r\nThe <b>chage -l user03</b> command displays the password aging details of user03.<br>\r\n\r\nThe <b>chage -E 2019-08-05 user03</b> command causes the user03 user's account to expire on<br>\r\n2019-08-05 (in YYYY-MM-DD format).<br>\r\n\r\n>**NOTE**<br><hr>\r\n>The date command can be used to calculate a date in the future. The -u option<br>\r\n>reports the time in UTC.\r\n> ![](/media/markdownx/32908136-1919-4585-9d13-f8e16833472c.png)\r\n\r\n<br>\r\nEdit the password aging configuration items in the /etc/login.defs file to set the default<br>\r\npassword aging policies. The PASS_MAX_DAYS sets the default maximum age of the password.<br>\r\nThe PASS_MIN_DAYS sets the default minimum age of the password. The PASS_WARN_AGE sets<br>\r\nthe default warning period of the password. Any change in the default password aging policies<br>\r\nwill be effective for new users only. The existing users will continue to use the old password aging<br>\r\nsettings rather than the new ones.<br>\r\n\r\n##RESTRICTING ACCESS\r\nYou can use the chage command to set account expiration dates. When that date is reached, the<br>\r\nuser cannot log in to the system interactively. The usermod command can lock an account with<br>\r\nthe -L option.\r\n```bash\r\n[user01@host ~]$ sudo usermod -L user03\r\n[user01@host ~]$ su - user03\r\nPassword: redhat\r\nsu: Authentication failure\r\n```\r\nIf a user leaves the company, the administrator may lock and expire an account with a single<br>\r\nusermod command. The date must be given as the number of days since 1970-01-01, or in the<br>\r\nYYYY-MM-DD format.\r\n```bash\r\n[user01@host ~]$ sudo usermod -L -e 2019-10-05 user03\r\n```\r\nThe preceding usermod command uses the -e option to set the account expiry date for the given<br>\r\nuser account. The -L option locks the user's password.<br>\r\n\r\nLocking the account prevents the user from authenticating with a password to the system. It is<br>\r\nthe recommended method of preventing access to an account by an employee who has left the<br>\r\ncompany. If the employee returns, the account can later be unlocked with usermod -U. If the<br>\r\naccount was also expired, be sure to also change the expiration date.<br>\r\n\r\n<b>The nologin Shell</b><hr>\r\nThe nologin shell acts as a replacement shell for the user accounts not intended to interactively<br>\r\nlog into the system. It is wise from the security standpoint to disable the user account from<br>\r\nlogging into the system when the user acount serves a responsibility that does not require the<br>\r\nuser to log into the system. For example, a mail server may require an account to store mail and a<br>\r\npassword for the user to authenticate with a mail client used to retrieve mail. That user does not<br>\r\nneed to log directly into the system.<br>\r\n\r\nA common solution to this situation is to set the user's login shell to /sbin/nologin. If the user<br>\r\nattempts to log in to the system directly, the nologin shell closes the connection.\r\n```bash\r\n[user01@host ~]$ usermod -s /sbin/nologin user03\r\n[user01@host ~]$ su - user03\r\nLast login: Wed Feb 6 17:03:06 IST 2019 on pts/0\r\nThis account is currently not available.\r\n```\r\n>**IMPORTANT**<br><hr>\r\n>The nologin shell prevents interactive use of the system, but does not prevent\r\n>all access. Users might be able to authenticate and upload or retrieve files through\r\n>applications such as web applications, file transfer programs, or mail readers if they\r\n>use the users password for authentication.\r\n\r\n<br>\r\n>**REFERENCES**<br><hr>\r\n><b>chage</b>(1), <b>usermod</b>(8), <b>shadow</b>(5), <b>crypt</b>(3) man pages", "order": 9, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 217, "fields": {"title": "GUIDED EXERCISE : MANAGING USER PASSWORDS", "slug": "guided-exercise-managing-user-passwords", "content": "", "content_md": "In this exercise, you will set password policies for several users.\r\n##OUTCOMES\r\nYou should be able to:<br>\r\n\u2022 Force a password change when the user logs in to the system for the first time.<br>\r\n\r\n\u2022 Force a password change every 90 days.<br>\r\n\r\n\u2022 Set the account to expire 180 days from the current day.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run lab users-pw-manage start to start the exercise. This script<br>\r\ncreates the necessary user accounts and files to ensure that the environment is set up<br>\r\ncorrectly.\r\n```bash\r\n[student@workstation ~]$ lab users-pw-manage start\r\n```\r\n<b>1.</b> From workstation, open an SSH session to servera as student.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n<b>2.</b> On servera, explore locking and unlocking user accounts as student.<br>\r\n\r\n2.1. As student, lock the operator1 account using administrative rights.\r\n```bash\r\n[student@servera ~]$ sudo usermod -L operator1\r\n[sudo] password for student: student\r\n```\r\n2.2. Attempt to log in as operator1. This should fail.\r\n```bash\r\n[student@servera ~]$ su - operator1\r\nPassword: redhat\r\nsu: Authentication failure\r\n```\r\n2.3. Unlock the operator1 account.\r\n```bash\r\n[student@servera ~]$ sudo usermod -U operator1\r\n```\r\n2.4. Attempt to log in as operator1 again. This should succeed.\r\n```bash\r\n[student@servera ~]$ su - operator1\r\nPassword: redhat\r\n...output omitted...\r\n[operator1@servera ~]$\r\n```\r\n2.5. Exit out of the operator1 user's shell to return to the student user's shell.\r\n```bash\r\n[operator1@servera ~]$ exit\r\nlogout\r\n```\r\n<b>3.</b> Change the password policy for operator1 to require a new password every 90 days.<br>\r\nConfirm that the password age is successfully set.<br>\r\n\r\n3.1. Set the maximum age of the operator1 user's password to 90 days.\r\n```bash\r\n[student@servera ~]$ sudo chage -M 90 operator1\r\n```\r\n3.2. Verify that the operator1 user's password expires 90 days after it is changed.\r\n```bash\r\n[student@servera ~]$ sudo chage -l operator1\r\nLast password change    : Jan 25, 2019\r\nPassword expires        : Apr 25, 2019\r\nPassword inactive       : never\r\nAccount expires         : never\r\nMinimum number of days between password change : 0\r\nMaximum number of days between password change : 90\r\nNumber of days of warning before password expires : 7\r\n```\r\n<b>4.</b> Force a password change on the first login for the operator1 account.\r\n```bash\r\n[student@servera ~]$ sudo chage -d 0 operator1\r\n```\r\n<b>5.</b> Log in as operator1 and change the password to forsooth123. After setting the<br>\r\npassword, return to the student user's shell.<br>\r\n\r\n5.1. Log in as operator1 and change the password to forsooth123 when prompted.\r\n```bash\r\n[student@servera ~]$ su - operator1\r\nPassword: redhat\r\nYou are required to change your password immediately (administrator\r\nenforced)\r\nCurrent password: redhat\r\nNew password: forsooth123\r\nRetype new password: forsooth123\r\n...output omitted...\r\n[operator1@servera ~]$\r\n```\r\n5.2. Exit the operator1 user's shell to return to the student user's shell.\r\n```bash\r\n[operator1@servera ~]$ exit\r\nlogout\r\n```\r\n<b>6. </b>Set the operator1 account to expire 180 days from the current day. Hint: The date -d<br>\r\n\"+180 days\" gives you the date and time 180 days from the current date and time.<br>\r\n\r\n6.1. Determine a date 180 days in the future. Use the format %F with the date command<br>\r\nto get the exact value.\r\n```bash\r\n[student@servera ~]$ date -d \"+180 days\" +%F\r\n2019-07-24\r\n    ```\r\nYou may get a different value to use in the following step based on the current date<br>\r\nand time in your system.<br>\r\n\r\n6.2. Set the account to expire on the date displayed in the preceding step.\r\n```bash\r\n[student@servera ~]$ sudo chage -E 2019-07-24 operator1\r\n ```\r\n6.3. Verify that the account expiry date is successfully set.\r\n```bash\r\n[student@servera ~]$ sudo chage -l operator1\r\nLast password change    : Apr 25, 2019\r\nPassword expires        : Jan 25, 2019\r\nPassword inactive       : never\r\nAccount expires         : Jul 24, 2019\r\nMinimum number of days between password change    : 0\r\nMaximum number of days between password change    : 90\r\nNumber of days of warning before password expires : 7\r\n```\r\n<b>7. </b>Set the passwords to expire 180 days from the current date for all users. Use administrative<br>\r\nrights to edit the configuration file.<br>\r\n\r\n7.1. Set PASS_MAX_DAYS to 180 in /etc/login.defs. Use administrative rights<br>\r\nwhen opening the file with the text editor. You can use the sudo vim /etc/<br>\r\nlogin.defs command to perform this step.<br>\r\n![](/media/markdownx/61ce7ff9-0ef9-41fc-a743-be3686ca223b.png)\r\n\r\n>**IMPORTANT**<br><hr>\r\n>The default password and account expiry settings will be effective for new users but\r\n>not for existing users.\r\n\r\n7.2. Log off from servera.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n<b>Finish</b><hr>\r\nOn workstation, run lab users-pw-manage finish to complete this exercise. This<br>\r\nscript deletes the user accounts and files created at the start of the exercise to ensure that the<br>\r\nenvironment is clean.\r\n```bash\r\n[student@workstation ~]$ lab users-pw-manage finish\r\n```\r\nThis concludes the guided exercise.", "order": 10, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 218, "fields": {"title": "LAB : MANAGING LOCAL USERS AND GROUPS", "slug": "lab-managing-local-users-and-groups", "content": "", "content_md": "##PERFORMANCE CHECKLIST\r\nIn this lab you will set a default local password policy, create a supplementary group for three<br>\r\nusers, allow that group to use sudo to run commands as root, and modify the password<br>\r\npolicy for one user.<br>\r\n\r\n##OUTCOMES\r\nYou should be able to:<br>\r\n\u2022 Set a default password aging policy of the local user's password.<br>\r\n\r\n\u2022 Create a group and use the group as a supplementary group for new users.<br>\r\n\r\n\u2022 Create three new users with the new group as their supplementary group.<br>\r\n\r\n\u2022 Configure the group members of the supplementary group to run any command as any<br>\r\nuser using sudo.<br>\r\n\r\n\u2022 Set a user-specific password aging policy.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run lab users-review start to start the exercise. This script creates<br>\r\nthe necessary files to ensure that the environment is set up correctly.\r\n```bash\r\n[student@workstation ~]$ lab users-review start\r\n```\r\n<hr>\r\n1. From workstation, open an SSH session to serverb as student.<br>\r\n2. On serverb, ensure that newly created users have passwords that must be changed every<br>\r\n   30 days.\r\n3. Create the new group called consultants with a GID of 35000.<br>\r\n4. Configure administrative rights for all members of consultants to be able to execute any<br>\r\n   command as any user.<br>\r\n5. Create the consultant1, consultant2, and consultant3 users with consultants as<br>\r\n   their supplementary group.<br>\r\n6. Set the consultant1, consultant2, and consultant3 accounts to expire in 90 days<br>\r\n   from the current day.<br>\r\n7. Change the password policy for the consultant2 account to require a new password every<br>\r\n   15 days.<br>\r\n8. Additionally, force the consultant1, consultant2, and consultant3 users to change<br>\r\n   their passwords on the first login.<br>\r\n\r\n<b>Evaluation</b><hr>\r\nOn workstation, run the <b>lab users-review grade</b> command to confirm success of this<br>\r\nexercise.\r\n[student@workstation ~]$ lab users-review grade\r\n<b>Finish</b><hr>\r\nOn workstation, run <b>lab users-review finish</b> to complete this lab. This script deletes the<br>\r\nuser accounts and files created throughout the lab to ensure that the environment is clean.<br>\r\n[student@workstation ~]$ lab users-review finish\r\nThis concludes the lab.", "order": 11, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 219, "fields": {"title": "SOLUTION: MANAGING LOCAL USERS AND GROUPS", "slug": "solution-managing-local-users-and-groups", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab you will set a default local password policy, create a supplementary group for three users, allow that group to use **sudo** to run commands as root, and modify the password policy for one user.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\u2022 Set a default password aging policy of the local user's password.\r\n\u2022 Create a group and use the group as a supplementary group for new users.\r\n\u2022 Create three new users with the new group as their supplementary group.\r\n\u2022 Configure the group members of the supplementary group to run any command as any\r\nuser using **sudo**.\r\n\u2022 Set a user-specific password aging policy.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run **lab users-review start** to start the exercise. This script creates\r\nthe necessary files to ensure that the environment is set up correctly.\r\n\r\n```bash\r\n[student@workstation ~]$ lab users-review start\r\n```\r\n<br>\r\n1. From **workstation**, open an SSH session to **serverb** as **student**.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n<br>\r\n2. On serverb, ensure that newly created users have passwords that must be changed every\r\n30 days.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Set `PASS_MAX_DAYS` to **30** in **/etc/login.defs**. Use administrative rights while\r\nopening the file with the text editor. You can use the **sudo vim /etc/login.defs**\r\ncommand to perform this step. Use student as the password when **sudo** prompts\r\nyou to enter the student user's password.\r\n\r\n![](/media/markdownx/25c8bcd6-5588-436c-92ae-93f530d7812e.png)\r\n\r\n<br>\r\n3. Create the new group called consultants with a GID of **35000**.\r\n```bash\r\n[student@serverb ~]$ sudo groupadd -g 35000 consultants\r\n```\r\n<br>\r\n4. Configure administrative rights for all members of consultants to be able to execute any\r\ncommand as any user.\r\n\t\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Create the new file **/etc/sudoers.d/consultants** and add the following content\r\nto it. You can use the **sudo vim /etc/sudoers.d/consultants** command to\r\nperform this step.\r\n```bash\r\n%consultants ALL=(ALL) ALL\r\n```\r\n<br>\r\n5. Create the consultant1, consultant2, and consultant3 users with consultants as\r\ntheir supplementary group.\r\n```bash\r\n[student@serverb ~]$ sudo useradd -G consultants consultant1\r\n[student@serverb ~]$ sudo useradd -G consultants consultant2\r\n[student@serverb ~]$ sudo useradd -G consultants consultant3\r\n```\r\n<br>\r\n6. Set the **consultant1**, **consultant2**, and **consultant3** accounts to expire in 90 days\r\nfrom the current day.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. Determine the date 90 days in the future. You may get a different value as compared\r\nto the following output based on the current date and time of your system.\r\n\r\n```bash\r\n[student@serverb ~]$ date -d \"+90 days\" +%F\r\n2019-04-28\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2. Set the account expiry date of the **consultant1**, **consultant2**, and **consultant3**\r\naccounts to the same value as determined in the preceding step.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo chage -E 2019-04-28 consultant1\r\n[student@serverb ~]$ sudo chage -E 2019-04-28 consultant2\r\n[student@serverb ~]$ sudo chage -E 2019-04-28 consultant3\r\n```\r\n\r\n<br>\r\n7. Change the password policy for the consultant2 account to require a new password every\r\n15 days.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo chage -M 15 consultant2\r\n```\r\n\r\n<br>\r\n8. Additionally, force the **consultant1**, **consultant2**, and **consultant3** users to change\r\ntheir passwords on the first login.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1. Set the last day of the password change to **0** so that the users are forced to change\r\nthe password whenever they log in to the system for the first time.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo chage -d 0 consultant1\r\n[student@serverb ~]$ sudo chage -d 0 consultant2\r\n[student@serverb ~]$ sudo chage -d 0 consultant3\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2. Log off from serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n```\r\n\r\n>**Evaluation**<br><hr>\r\n>On workstation, run the **lab users-review grade** command to confirm success of this\r\n>exercise.\r\n>\r\n>```bash\r\n[student@workstation ~]$ lab users-review grade\r\n>```\r\n\r\n<br>\r\n>**Finish**<br><hr>\r\n>On workstation, run **lab users-review finish** to complete this lab. This script deletes the\r\n>user accounts and files created throughout the lab to ensure that the environment is clean.\r\n>\r\n>```bash\r\n[student@workstation ~]$ lab users-review finish\r\n>```\r\n\r\n<br>\r\nThis concludes the lab.", "order": 12, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 220, "fields": {"title": "SUMMARY", "slug": "summary-6", "content": "", "content_md": "##SUMMARY<hr>\r\nIn this chapter, you learned:<br>\r\n\r\n\u2022 There are three main types of user account: the superuser, system users, and regular users.<br>\r\n\r\n\u2022 A user must have a primary group and may be a member of one or more supplementary groups.<br>\r\n\r\n\u2022 The three critical files containing user and group information are /etc/passwd, /etc/group,<br>\r\nand /etc/shadow.\r\n\r\n\u2022 The su and sudo commands can be used to run commands as the superuser.<br>\r\n\r\n\u2022 The useradd, usermod, and userdel commands can be used to manage users.<br>\r\n\r\n\u2022 The groupadd, groupmod, and groupdel commands can be used to manage groups.<br>\r\n\r\n\u2022 The chage command can be used to configure and view password expiration settings for users.", "order": 13, "is_visible": true, "is_task": false, "module": 32, "draft": false, "files": []}}, {"model": "courses.section", "pk": 221, "fields": {"title": "INTERPRETING LINUX FILE SYSTEM PERMISSIONS", "slug": "interpreting-linux-file-system-permissions", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to list file-system permissions on files and directories, and interpret the effect of those permissions on access by users and groups.\r\n\r\n##LINUX FILE-SYSTEM PERMISSIONS\r\nFile permissions control access to files. Linux file permissions are simple but flexible, easy to understand and apply, yet still able to handle most normal permission cases easily.\r\n\r\nFiles have three user categories to which permissions apply. The file is owned by a user, normally the one who created the file. The file is also owned by a single group, usually the primary group of the user who created the file, but this can be changed. Different permissions can be set for the owning user, the owning group, and for all other users on the system that are not the user or a member of the owning group.\r\n\r\nThe most specific permissions take precedence. User permissions override group permissions, which override other permissions. In Figure 7.1, joshua is a member of the groups joshua and web, and allison is a member of allison, wheel, and web. When joshua and allison need to collaborate, the files should be associated with the group web and group permissions should allow the desired access.\r\n\r\n![](/media/markdownx/52c95376-269c-4f21-9f95-ceb2836be622.png)  \r\n\r\nThree permission categories apply: read, write, and execute. The following table explains how these permissions affect access to files and directories.\r\n\r\n![](/media/markdownx/bcdccf4e-81be-4cdd-b394-54200116d183.png)  \r\n\r\nUsers normally have both read and execute permissions on read-only directories so that they can list the directory and have full read-only access to its contents. If a user only has read access on a directory, the names of the files in it can be listed, but no other information, including permissions or time stamps, are available, nor can they be accessed. If a user only has execute access on a directory, they cannot list file names in the directory. If they know the name of a file that they have permission to read, they can access the contents of that file from outside the directory by explicitly specifying the relative file name.\r\n\r\nA file may be removed by anyone who has ownership of, or write permission to, the directory in which the file resides, regardless of the ownership or permissions on the file itself. This can be overridden with a special permission, the sticky bit, discussed later in this chapter.\r\n\r\n> ** NOTE **\r\n>\r\n> Linux file permissions work differently than the permissions system used by the\r\nNTFS file system for Microsoft Windows.\r\n>\r\n> On Linux, permissions apply only to the file or directory on which they are set. That\r\nis, permissions on a directory are not inherited automatically by the subdirectories\r\nand files within it. However, permissions on a directory can block access to the\r\ncontents of the directory depending on how restrictive they are.\r\n>\r\n> The <b>read</b> permission on a directory in Linux is roughly equivalent to <b>List folder\r\ncontents</b> in Windows.\r\n>\r\n> The <b>write</b> permission on a directory in Linux is equivalent to <b>Modify</b> in Windows; it implies the ability to delete files and subdirectories. In Linux, if <b>write</b> and the <b>sticky bit</b> are both set on a directory, then only the file or subdirectory owner may delete it, which is similar to the Windows <b>Write</b> permission behavior.\r\n>\r\n> The Linux root user has the equivalent of the Windows <b>Full Control</b> permission on all files. However, root may have access restricted by the system's SELinux policy using\r\nprocess and file security contexts. SELinux will be discussed in a later course.\r\n>\r\n\r\n##VIEWING FILE AND DIRECTORY PERMISSIONS AND\r\nOWNERSHIP\r\n\r\nThe <b>-l</b> option of the ls command shows detailed information about permissions and ownership:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host~]$ <b> ls -l test</b>\r\n-rw-rw-r--. 1 student student 0 Feb 8 17:36 test\r\n</pre>\r\n\r\nUse the <b>-d</b> option to show detailed information about a directory itself, and not its contents.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host~]$ <b> ls -ld /home</b>\r\ndrwxr-xr-x. 5 root root 4096 Jan 31 22:00 /home\r\n</pre>\r\n\r\nThe first character of the long listing is the file type, interpreted like this:\r\n<ul>\r\n<li> <b>-</b>is a regular file.\r\n<li> <b>d</b> is a directory.\r\n<li><b> l</b> is a soft link.\r\n<li> Other characters represent hardware devices (<b>b</b> and <b>c</b>) or other special-purpose files (<b>p</b> and <b>s</b>).\r\n</ul>\r\n\r\nThe next nine characters are the file permissions. These are in three sets of three characters:\r\npermissions that apply to the user that owns the file, the group that owns the file, and all other users. If the set shows <b>rwx</b>, that category has all three permissions, read, write, and execute. If a letter has been replaced by -, then that category does not have that permission.\r\n\r\nAfter the link count, the first name specifies the user that owns the file, and the second name the group that owns the file. \r\n\r\nSo in the example above, the permissions for user student are specified by the first set of three\r\ncharacters. User student has read and write on test, but not execute.\r\n\r\nGroup student is specified by the second set of three characters: it also has read and write on\r\n<b>test</b>, but not execute.\r\n\r\nAny other user's permissions are specified by the third set of three characters: they only have read permission on <b>test</b>.\r\n\r\nThe most specific set of permissions apply. So if user student has different permissions than\r\ngroup student, and user student is also a member of that group, then the user permissions will\r\nbe the ones that apply.\r\n\r\n##EXAMPLES OF PERMISSION EFFECTS\r\n\r\nThe following examples will help illustrate how file permissions interact. For these examples, we have four users with the following group memberships:\r\n\r\n![](/media/markdownx/5dd70ed7-e19e-4f05-9d80-ffd33360e410.png)  \r\n\r\nThose users will be working with files in the <b>dir</b> directory. This is a long listing of the files in that directory:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[database1@host dir]$ <b>ls -la</b>\r\ntotal 24\r\ndrwxrwxr-x. 2 database1 consultant1 4096 Apr 4 10:23 .\r\ndrwxr-xr-x. 10 root root 4096 Apr 1 17:34 ..\r\n-rw-rw-r--. 1 operator1 operator1 1024 Apr 4 11:02 lfile1\r\n-rw-r--rw-. 1 operator1 consultant1 3144 Apr 4 11:02 lfile2\r\n-rw-rw-r--. 1 database1 consultant1 10234 Apr 4 10:14 rfile1\r\n-rw-r-----. 1 database1 consultant1 2048 Apr 4 10:18 rfile2\r\n</pre>\r\n\r\nThe <b>-a</b> option shows the permissions of hidden files, including the special files used to represent the directory and its parent. In this example, . reflects the permissions of dir itself, and .. the permissions of its parent directory. \r\n\r\nWhat are the permissions of <b>rfile1</b>? The user that owns the file (database1) has read and write but not execute. The group that owns the file (consultant1) has read and write but not execute. All other users have read but not write or execute.\r\n\r\nThe following table explores some of the effects of this set of permissions for these users:\r\n\r\n![](/media/markdownx/9ca169ea-9157-45b1-9fc2-f940d28a0969.png)\r\n![](/media/markdownx/1b854b47-346a-407d-a2e9-7954e100814e.png)\r\n\r\n> **REFERENCES**\r\n>\r\n> <b>ls</b>(1) man page<br>\r\n> <b>info coreutils</b> (GNU Coreutils)<br>\r\n> \u2022 Section 13: Changing file attributes", "order": 1, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 222, "fields": {"title": "QUIZ: INTERPRETING LINUX FILE SYSTEM PERMISSIONS", "slug": "quiz-interpreting-linux-file-system-permission", "content": "", "content_md": "## QUIZ\r\n\r\n![](/media/markdownx/51665a5e-90ad-4574-be74-949c669f9cd6.PNG)\r\n\r\nClick \r\n[https://course.btech.id/quiz/interpreting-linux-file-system-permission/](https://course.btech.id/quiz/interpreting-linux-file-system-permission/)\r\n to start answering the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 223, "fields": {"title": "MANAGING FILE SYSTEM PERMISSIONS FROM THE COMMAND LINE", "slug": "managing-file-system-permissions-from-the-command-line", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to change the permissions and ownership of files using command-line tools.\r\n\r\n##CHANGING FILE AND DIRECTORY PERMISSIONS\r\n\r\nThe command used to change permissions from the command line is <b>chmod</b>, which means \"change mode\" (permissions are also called the mode of a file). The <b>chmod</b> command takes a permission instruction followed by a list of files or directories to change. The permission instruction can be issued either symbolically (the symbolic method) or numerically (the numeric method).\r\n\r\n####Changing Permissions with the Symbolic Method\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n<b>chmod WhoWhatWhich file|directory</b>\r\n</pre>\r\n\r\n<ul>\r\n<li> <i>Who</i> is u, g, o, a (for user, group, other, all)\r\n<li> <i>What</i> is +, -, = (for add, remove, set exactly)\r\n<li> <i>Which</i> is r, w, x (for read, write, execute)\r\n</ul>\r\n\r\nThe symbolic method of changing file permissions uses letters to represent the different groups of permissions: <b>u</b> for user, <b>g</b> for group, <b>o</b> for other, and <b>a</b> for all.\r\n\r\nWith the symbolic method, it is not necessary to set a complete new group of permissions. Instead, you can change one or more of the existing permissions. Use + or - to add or remove permissions, respectively, or use = to replace the entire set for a group of permissions.\r\n\r\nThe permissions themselves are represented by a single letter: r for read, w for write, and x for\r\nexecute. When using <b>chmod</b> to change permissions with the symbolic method, using a capital X as the permission flag will add execute permission only if the file is a directory or already has execute set for user, group, or other.\r\n\r\n> **NOTE**\r\n>\r\n> The chmod command supports the -R option to recursively set permissions on\r\n> the files in an entire directory tree. When using the -R option, it can be useful to\r\n> set permissions symbolically using the X option. This allows the execute (search)\r\n> permission to be set on directories so that their contents can be accessed, without\r\n> changing permissions on most files. Be cautious with the X option, however, because\r\n> if a file has any execute permission set, X will set the specified execute permission\r\n> on that file as well. For example, the following command recursively sets read and\r\n> write access on demodir and all its children for their group owner, but only applies\r\n> group execute permissions to directories and files that already have execute set for\r\n> user, group, or other.\r\n> <pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n> [root@host opt]# <b>chmod -R g+rwX demodir</b>\r\n> </pre>\r\n\r\n<b>Examples</b>\r\n<ul>\r\n<li> Remove read and write permission for group and other on file1:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>chmod go-rw file1</b>\r\n</pre>\r\n<li> Add execute permission for everyone on file2:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>chmod a+x file2</b>\r\n</pre>\r\n</ul>\r\n\r\n####Changing Permissions with the Numeric Method\r\nIn the example below the # character represents a digit.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n<b>chmod ### file|directory</b>\r\n</pre>\r\n<ul>\r\n<li> Each digit represents permissions for an access level: user, group, other.\r\n<li>The digit is calculated by adding together numbers for each permission you want to add, 4 for read, 2 for write, and 1 for execute.\r\n</ul>\r\n\r\nUsing the numeric method, permissions are represented by a 3-digit (or 4-digit, when setting advanced permissions) octal number. A single octal digit can represent any single value from 0-7. \r\nIn the 3-digit octal (numeric) representation of permissions, each digit stands for one access level, from left to right: user, group, and other. To determine each digit:\r\n\r\n<ol>\r\n<li> Start with 0.\r\n<li> If the read permission should be present for this access level, add 4.\r\n<li> If the write permission should be present, add 2.\r\n<li> If the execute permission should be present, add 1.\r\n</ol>\r\n\r\nExamine the permissions <b>-rwxr-x---</b>. For the user, <b>rwx</b> is calculated as 4+2+1=7. For the group, r-x is calculated as 4+0+1=5, and for other users, --- is represented with 0. Putting these three together, the numeric representation of those permissions is 750.\r\n\r\nThis calculation can also be performed in the opposite direction. Look at the permissions 640.\r\nFor the user permissions, 6 represents read (4) and write (2), which displays as rw-. For the group part, 4 only includes read (4) and displays as r--. The 0 for other provides no permissions <b>(---)</b> and the final set of symbolic permissions for this file is <b>-rw-r-----</b>.\r\n\r\nExperienced administrators often use numeric permissions because they are shorter to type and pronounce, while still giving full control over all permissions.\r\n\r\n<b>Examples</b>\r\n<ul>\r\n<li> Set read and write permissions for user, read permission for group and other, on samplefile:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>chmod 644 samplefile</b>\r\n</pre>\r\n<li> Set read, write, and execute permissions for user, read and execute permissions for group, and no permission for other on <b>sampledir</b>:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>chmod 750 sampledir</b>\r\n</pre>\r\n</ul>\r\n\r\n##CHANGING FILE AND DIRECTORY USER OR GROUP OWNERSHIP\r\n\r\nA newly created file is owned by the user who creates that file. By default, new files have a group ownership that is the primary group of the user creating the file. In Red Hat Enterprise Linux, a user's primary group is usually a private group with only that user as a member. To grant access to a file based on group membership, the group that owns the file may need to be changed.\r\n\r\nOnly root can change the user that owns a file. Group ownership, however, can be set by root or by the file's owner. root can grant file ownership to any group, but regular users can make a group the owner of a file only if they are a member of that group\r\n\r\nFile ownership can be changed with the <b>chown</b> (change owner) command. For example, to grant ownership of the <b>test_file</b> file to the student user, use the following command:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>chown student test_file</b>\r\n</pre>\r\n\r\n<b>chown</b> can be used with the <b>-R</b> option to recursively change the ownership of an entire directory tree. The following command grants ownership of <b>test_dir</b> and all files and subdirectories within it to student:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>chown -R student test_dir</b>\r\n</pre>\r\n\r\nThe <b>chown</b> command can also be used to change group ownership of a file by preceding the group name with a colon (:). For example, the following command changes the group <b>test_dir</b> to admins:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>chown :admins test_dir</b>\r\n</pre>\r\n\r\nThe <b>chown</b> command can also be used to change both owner and group at the same time by using the owner:group syntax. For example, to change the ownership of <b>test_dir</b> to visitor and the group to guests, use the following command\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>chown visitor:guests test_dir</b>\r\n</pre>\r\n\r\nInstead of using <b>chown</b>, some users change the group ownership by using the <b>chgrp</b> command. This command works just like <b>chown</b>, except that it is only used to change group ownership and the colon (:) before the group name is not required.\r\n\r\n> **IMPORTANT**\r\n>\r\n> You may encounter examples of chown commands using an alternative syntax\r\n> that separates owner and group with a period instead of a colon:\r\n> <pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>chown owner.group filename</b>\r\n</pre>\r\n> You should not use this syntax. Always use a colon.\r\n> A period is a valid character in a user name, but a colon is not. If the user\r\n> enoch.root, the user enoch, and the group root exist on the system, the result\r\n> of <b>chown enoch.root filename</b> will be to have <b>filename</b> owned by the user\r\n> enoch.root. You may have been trying to set the file ownership to the user  enoch and group root. This can be confusing.\r\n>\r\n> If you always use the <b>chown</b> colon syntax when setting the user and group at\r\n> the same time, the results are always easy to predict.\r\n\r\n<br>\r\n\r\n> **REFERENCES**\r\n>\r\n> <pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n> <b>ls</b>(1), <b>chmod<b>(1), <b>chown</b>(1), and <b>chgrp</b>(1) man pages\r\n> </pre>", "order": 3, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 224, "fields": {"title": "GUIDED EXERCISE : MANAGING FILE SYSTEM PERMISSIONS FROM THE COMMAND LINE", "slug": "guided-exercise-managing-file-system-permissions-from-the-command-line", "content": "", "content_md": "In this exercise, you will use file system permissions to create a directory in which all members of a particular group can add and delete files.\r\n\r\n## OUTCOMES\r\nYou should be able to create a collaborative directory that is accessible by all members of a\r\nparticular group.\r\n\r\n## BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run the <b>lab perms-cli start</b> command. The start script creates a\r\ngroup called consultants and two users called consultant1 and consultant2.\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-cli start</b>\r\n</pre>\r\n\r\n<ol>\r\n<li> From workstation, use the ssh command to log in to servera as the student user.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>ssh student@servera</b>\r\n...output omitted...\r\n[student@servera ~]$ \r\n</pre>\r\n\r\n<li> Switch to the root user using redhat as the password.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@servera ~]$ <b>su -</b>\r\nPassword: <b>redhat</b>\r\n[root@servera ~]# \r\n</pre>\r\n\r\n<li> Use the <b>mkdir</b> command to create the <b>/home/consultants</b> directory.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>mkdir /home/consultants</b>\r\n</pre>\r\n\r\n<li> Use the <b>chown</b> command to change the group ownership of the <b>consultants </b>directory to consultants.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>chown :consultants /home/consultants</b>\r\n</pre>\r\n\r\n<li> Ensure that the permissions of the consultants group allow its group members to create\r\nfiles in, and delete files from the <b>/home/consultants</b> directory. The permissions should\r\nforbid others from accessing the files.\r\n<ol>\r\n<li> Use the ls command to confirm that the permissions of the consultants\r\ngroup allow its group members to create files in, and delete files from the /home/\r\nconsultants directory.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>ls -ld /home/consultants</b>\r\ndrwxr-xr-x. 2 root consultants 6 Feb 1 12:08 /home/\r\nconsultants\r\n</pre>\r\nNote that the consultants group currently does not have write permission.\r\n<li> Use the chmod command to add write permission to the consultants group.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>chmod g+w /home/consultants</b>\r\n[root@servera ~]# <b>ls -ld /home/consultants</b>\r\ndrwxrwxr-x. 2 root consultants 6 Feb 1 13:21 /home/consultants \r\n</pre>\r\n<li> Use the chmod command to forbid others from accessing files in the /home/\r\nconsultants directory\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>chmod 770 /home/consultants</b>\r\n[root@servera ~]# <b>ls -ld /home/consultants</b>\r\ndrwxrwx---. 2 root consultants 6 Feb 1 12:08 /home/consultants/\r\n</pre>\r\n</ol>\r\n<li> Exit the root shell and switch to the consultant1 user. The password is redhat.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@servera ~]# <b>exit</b>\r\nlogout\r\n[student@servera ~]$\r\n[student@servera ~]$ <b>su - consultant1</b>\r\nPassword: <b>redhat</b>\r\n</pre>\r\n<li> Navigate to the <b>/home/consultants</b> directory and create a file called <b>consultant1.txt</b>.\r\n<ol>\r\n<li>  Use the cd command to change to the <b>/home/consultants</b> directory.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant1@servera ~]$ <b>cd /home/consultants</b>\r\n</pre>\r\n<li>  Use the touch command to create an empty file called consultant1.txt.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant1@servera consultants]$ <b>touch consultant1.txt</b>\r\n</pre>\r\n</ol>\r\n<li> Use the <b>ls -l</b> command to list the default user and group ownership of the new file and its permissions.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant1@servera consultants]$ <b>ls -l consultant1.txt</b>\r\n-rw-rw-r--. 1 consultant1 consultant1 0 Feb 1 12:53 consultant1.txt\r\n</pre>\r\n<li> Ensure that all members of the consultants group can edit the <b>consultant1.txt</b> file.\r\nChange the group ownership of the <b>consultant1.txt</b> file to consultants.\r\n<ol>\r\n<li>  Use the <b>chown</b> command to change the group ownership of the\r\nconsultant1.txt file to consultants.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant1@servera consultants]$ <b>chown :consultants consultant1.txt</b>\r\n</pre>\r\n<li> Use the ls command with the -l option to list the new ownership of the\r\nconsultant1.txt file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant1@servera consultants]$ <b>ls -l consultant1.txt</b>\r\n-rw-rw-r--. 1 consultant1 consultants 0 Feb 1 12:53 consultant1.txt\r\n</pre>\r\n</ol>\r\n<li> Exit the shell and switch to the consultant2 user. The password is redhat.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\nlogout\r\n[student@servera ~]$ <b>su - consultant2</b>\r\nPassword: <b>redhat</b>\r\n[consultant2@servera ~]$ \r\n</pre>\r\n<li> Navigate to the <b>/home/consultants</b> directory. Ensure that the consultant2 user can add content to the <b>consultant1.txt</b> file. Exit from the shell.\r\n<ol>\r\n<li> Use the <b>cd</b> command to change to the <b>/home/consultants</b> directory. Use the echo command to add text to the <b>consultant1.txt</b> file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant2@servera ~]$ <b>cd /home/consultants/</b>\r\n[consultant2@servera consultants]$ <b>echo \"text\" >> consultant1.txt</b>\r\n[consultant2@servera consultants]$ \r\n</pre>\r\n<li> Use the <b>cat</b> command to verify that the text was added to the consultant1.txt file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant2@servera consultants]$ <b>cat consultant1.txt</b>\r\ntext\r\n[consultant2@servera consultants]$ \r\n</pre>\r\n<li> Exit the shell.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[consultant2@servera consultants]$ <b>exit</b>\r\nlogout\r\n[student@servera ~]$ \r\n</pre>\r\n</ol>\r\n<li>Log off from servera.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@servera ~]$ <b>exit</b>\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$ \r\n</pre>\r\n</ol>\r\n\r\n####Finish\r\nOn workstation, run the lab perms-cli finish script to complete this exercise.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-cli finish</b>\r\n</pre>\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 225, "fields": {"title": "MANAGING DEFAULT PERMISSIONS AND FILE ACCESS", "slug": "managing-default-permissions-and-file-access", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, students should be able to:\r\n<ul>\r\n<li> Control the default permissions of new files created by users.\r\n<li> Explain the effect of special permissions.\r\n<li> Use special permissions and default permissions to set the group owner of files created in a particular directory.\r\n</ul>\r\n\r\n##SPECIAL PERMISSIONS\r\nSpecial permissions constitute a fourth permission type in addition to the basic user, group, and other types. As the name implies, these permissions provide additional access-related features over and above what the basic permission types allow. This section details the impact of special permissions, summarized in the table below.\r\n\r\n<b>Effects of Special Permissions on Files and Directories</b>\r\n\r\n![](/media/markdownx/50546884-edfa-4993-848d-18548f11bf03.png)  \r\n\r\nThe setuid permission on an executable file means that commands run as the user owning the file, not as the user that ran the command. One example is the <b>passwd</b> command:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>ls -l /usr/bin/passwd</b>\r\n-rwsr-xr-x. 1 root root 35504 Jul 16 2010 /usr/bin/passwd\r\n</pre>\r\n\r\nIn a long listing, you can identify the setuid permissions by a lowercase s where you would normally expect the <b>x</b> (owner execute permissions) to be. If the owner does not have execute permissions, this is replaced by an uppercase <b>S</b>.\r\n\r\nThe special permission setgid on a directory means that files created in the directory inherit\r\ntheir group ownership from the directory, rather than inheriting it from the creating user. This is commonly used on group collaborative directories to automatically change a file from the default private group to the shared group, or if files in a directory should be always owned by a specific group. An example of this is the <b>/run/log/journal</b> directory:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>ls -ld /run/log/journal</b>\r\ndrwxr-sr-x. 3 root systemd-journal 60 May 18 09:15 /run/log/journal\r\n</pre>\r\n\r\nIf setgid is set on an executable file, commands run as the group that owns that file, not as the user that ran the command, in a similar way to setuid works. One example is the locate command:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>ls -ld /usr/bin/locate</b>\r\n-rwx--s--x. 1 root slocate 47128 Aug 12 17:17 /usr/bin/locate\r\n</pre>\r\n\r\nIn a long listing, you can identify the setgid permissions by a lowercase s where you would normally expect the <b>x</b> (group execute permissions) to be. If the group does not have execute permissions, this is replaced by an uppercase <b>S</b>.\r\n\r\nLastly, the sticky bit for a directory sets a special restriction on deletion of files. Only the owner of the file (and root) can delete files within the directory. An example is <b>/tmp</b>:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>ls -ld /tmp</b>\r\ndrwxrwxrwt. 39 root root 4096 Feb 8 20:52 /tmp\r\n</pre>\r\n\r\nIn a long listing, you can identify the sticky permissions by a lowercase t where you would normally expect the x (other execute permissions) to be. If other does not have execute permissions, this is replaced by an uppercase T.\r\n\r\n<b>Setting Special Permissions</b>\r\n<ul>\r\n<li>Symbolically: setuid = <b>u+s</b>; setgid = <b>g+s</b>; sticky = <b>o+t</b>\r\n<li>Numerically (fourth preceding digit): setuid = 4; setgid = 2; sticky = 1\r\n</ul>\r\n\r\n<b>Examples</b>\r\n<ul>\r\n<li>Add the setgid bit on directory:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]# <b>chmod g+s directory</b>\r\n</pre>\r\n<li>  Set the setgid bit and add read/write/execute permissions for user and group, with no access for others, on directory:\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]# <b>chmod 2770 directory</b>\r\n</pre>\r\n</ul>\r\n\r\n## DEFAULT FILE PERMISSIONS\r\nWhen you create a new file or directory, it is assigned initial permissions. There are two things that affect these initial permissions. The first is whether you are creating a regular file or a directory. The second is the current umask.\r\n\r\nIf you create a new directory, the operating system starts by assigning it octal permissions 0777 (<b>drwxrwxrwx</b>). If you create a new regular file, the operating system assignes it octal permissions 0666 (<b>-rw-rw-rw-</b>). You always have to explicitly add execute permission to a regular file. This makes it harder for an attacker to compromise a network service so that it creates a new file and immediately executes it as a program.\r\n\r\nHowever, the shell session will also set a umask to further restrict the permissions that are initially set. This is an octal bitmask used to clear the permissions of new files and directories created by a process. If a bit is set in the umask, then the corresponding permission is cleared on new files. For example, the umask 0002 clears the write bit for other users. The leading zeros indicate the special, user, and group permissions are not cleared. A umask of 0077 clears all the group and other permissions of newly created files.\r\n\r\nThe <b>umask</b> command without arguments will display the current value of the shell's umask:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>umask</b>\r\n0002\r\n</pre>\r\n\r\nUse the umask command with a single numeric argument to change the umask of the current shell. The numeric argument should be an octal value corresponding to the new umask value. You can omit any leading zeros in the umask.\r\n\r\nThe system's default umask values for Bash shell users are defined in the <b>/etc/profile</b> and <b>/etc/bashrc</b> files. Users can override the system defaults in the <b>.bash_profile</b> and <b>.bashrc</b>\r\n\r\n####umask Example\r\nThe following example explains how the umask affects the permissions of files and directories.\r\nLook at the default umask permissions for both files and directories in the current shell. The owner and group both have read and write permission on files, and other is set to read. The owner and group both have read, write, and execute permissions on directories. The only permission for other is read.\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>umask</b>\r\n0002\r\n[user@host ~]$ <b>touch default</b>\r\n[user@host ~]$ <b>ls -l default.txt</b>\r\n-rw-rw-r--. 1 user user 0 May 9 01:54 default.txt\r\n[user@host ~]$ <b>mkdir default</b>\r\n[user@host ~]$ <b>ls -ld default</b>\r\ndrwxrwxr-x. 2 user user 0 May 9 01:54 default \r\n</pre>\r\n\r\nBy setting the umask value to 0, the file permissions for other change from read to read and write. The directory permissions for other changes from read and execute to read, write, and execute.\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>umask 0</b>\r\n[user@host ~]$ <b>touch zero.txt</b>\r\n[user@host ~]$ <b>ls -l zero.txt</b>\r\n-rw-rw-rw-. 1 user user 0 May 9 01:54 zero.txt\r\n[user@host ~]$ <b>mkdir zero</b>\r\n[user@host ~]$ <b>ls -ld zero</b>\r\ndrwxrwxrwx. 2 user user 0 May 9 01:54 zero  \r\n</pre>\r\n\r\nTo mask all file and directory permissions for other, set the umask value to 007.\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b>umask 007</b>\r\n[user@host ~]$ <b>touch seven.txt</b>\r\n[user@host ~]$ <b>ls -l seven.txt</b>\r\n-rw-rw----. 1 user user 0 May 9 01:55 seven.txt\r\n[user@host ~]$ <b>mkdir seven</b>\r\n[user@host ~]$ <b>ls -ld seven</b>\r\ndrwxrwx---. 2 user user 0 May 9 01:54 seven\r\n</pre>\r\n\r\nA umask of 027 ensures that new files have read and write permissions for user and read\r\npermission for group. New directories have read and write access for group and no permissions for\r\nother.\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[user@host ~]$ <b<umask 027</b>\r\n[user@host ~]$ <b>touch two-seven.txt</b>\r\n[user@host ~]$ <b>ls -l two-seven.txt</b>\r\n-rw-r-----. 1 user user 0 May 9 01:55 two-seven.txt\r\n[user@host ~]$ <b>mkdir two-seven</b>\r\n[user@host ~]$ <b>ls -ld two-seven</b>\r\ndrwxr-x---. 2 user user 0 May 9 01:54 two-seven \r\n</pre>\r\n\r\nThe default umask for users is set by the shell startup scripts. By default, if your account's UID is 200 or more and your username and primary group name are the same, you will be assigned a umask of 002. Otherwise, your umask will be 022.\r\n\r\nAs root, you can change this by adding a shell startup script named <b>/etc/profile.d/localumask.sh</b> that looks something like the output in this example:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[root@host ~]# <b>cat /etc/profile.d/local-umask.sh</b>\r\n# Overrides default umask configuration\r\nif [ $UID -gt 199 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\r\n umask 007\r\nelse\r\n umask 022\r\nfi\r\n</pre>\r\n\r\nThe preceding example will set the umask to 007 for users with a UID greater than 199 and with a username and primary group name that match, and to 022 for everyone else. If you just wanted to set the umask for everyone to 022, you could create that file with just the following content:\r\n\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n# Overrides default umask configuration\r\numask 022\r\n</pre>\r\n\r\nTo ensure that global umask changes take effect you must log out of the shell and log back in. Until that time the umask configured in the current shell is still in effect.\r\n\r\n> **REFERENCES**\r\n>\r\n> <b>bash</b>(1), <b>ls</b>(1), <b>chmod</b>(1), and <b>umask</b>(1) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 226, "fields": {"title": "GUIDED EXERCISE : MANAGING DEFAULT PERMISSIONS AND FILE ACCESS", "slug": "guided-exercise-managing-default-permissions-and-file-access", "content": "", "content_md": "In this exercise, you will control the permissions on new files created in a directory by using umask settings and the setgid permission.\r\n\r\n### <b>OUTCOMES</b>\r\nYou should be able to:\r\n<ul>\r\n<li> Create a shared directory where new files are automatically owned by the operators group.\r\n<li> Experiment with various umask settings.\r\n<li> Adjust default permissions for specific users.\r\n<li> Confirm your adjustment is correct.\r\n</ul>\r\n\r\n### <b>BEFORE YOU BEGIN</b>\r\nLog in to `workstation` as `student` using `student` as the password.\r\n\r\nOn `workstation`, run the <b>lab perms-default start</b> command. The command runs a start script that determines if servera is reachable on the network. The script also creates the operators group and the operator1 user on servera.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-default start</b>\r\n</pre>\r\n\r\n<ol>\r\n<li> Use the <b>ssh</b> command to log in to servera as the student user\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>ssh student@servera</b>\r\n...output omitted...\r\n[student@servera ~]$ \r\n</pre>\r\n\r\n<li> Use the <b>su</b> command to switch to the operator1 user using redhat as the password.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@servera ~]$ <b>su - operator1</b>\r\nPassword: <b>redhat</b>\r\n[operator1@servera ~]$\r\n</pre>\r\n\r\n<li> Use the umask command to list the operator1 user's default umask value\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>umask</b>\r\n0002\r\n</pre>\r\n\r\n<li> Create a new directory named <b>/tmp/shared</b>. In the <b>/tmp/shared</b> directory, create a file named defaults. Look at the default permissions.\r\n<ol>\r\n\r\n<li> Use the mkdir command to create the <b>/tmp/shared</b> directory. Use the ls -ld\r\ncommand to list the permissions of the new directory.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>mkdir /tmp/shared</b>\r\n[operator1@servera ~]$ <b>ls -ld /tmp/shared</b>\r\ndrwxrwxr-x. 2 operator1 operator1 6 Feb 4 14:06 /tmp/shared\r\n</pre>\r\n\r\n<li> Use the touch command to create a file named defaults in the <b>/tmp/shared</b> directory\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>touch /tmp/shared/defaults</b>\r\n</pre>\r\n\r\n<li> Use the <b>ls -l</b> command to list the permissions of the new file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>ls -l /tmp/shared/defaults</b>\r\n-rw-rw-r--. 1 operator1 operator1 0 Feb 4 14:09 /tmp/shared/defaults\r\n</pre>\r\n\r\n</ol>\r\n<li> Change the group ownership of /tmp/shared to operators. Confirm the new ownership and permissions.\r\n<ol>\r\n\r\n<li> Use the chown command to change the group ownership of the <b>/tmp/shared</b> directory to operators.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>chown :operators /tmp/shared</b>\r\n</pre>\r\n<li>  Use the ls -ld command to list the permissions of the /tmp/shared directory\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>ls -ld /tmp/shared</b>\r\ndrwxrwxr-x. 2 operator1 operators 22 Feb 4 14:09 /tmp/shared \r\n</pre>\r\n\r\n<li> Use the touch command to create a file named group in the /tmp/shared directory. Use the ls -l command to list the file permissions.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>touch /tmp/shared/group</b>\r\n[operator1@servera ~]$ <b>ls -l /tmp/shared/group</b>\r\n-rw-rw-r--. 1 operator1 operator1 0 Feb 4 17:00 /tmp/shared/group\r\n</pre>\r\n</ol>\r\n\r\n> **NOTE**\r\n>\r\n> The group owner of the <b>/tmp/shared/group</b> file is not operators but operator1.\r\n\r\n<li> Ensure that files created in the /tmp/shared directory are owned by the operators group.\r\n<ol>\r\n<li> Use the <b>chmod</b> command to set the group ID to the operators group for the <b>/tmp/shared</b> directory.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>chmod g+s /tmp/shared</b>\r\n</pre>\r\n<li> Use the <b>touch</b> command to create a new file named <b>operations_database.txt</b> in the /tmp/shared directory\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>touch /tmp/shared/operations_database.txt</b>\r\n</pre>\r\n\r\n<li> Use the <b>ls -l</b> command to verify that the operators group is the group owner for the new file\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>ls -l /tmp/shared/operations_database.txt</b>\r\n-rw-rw-r--. 1 operator1 operators 0 Feb 4 16:11 /tmp/shared/\r\noperations_database.txt \r\n</pre>\r\n</ol>\r\n<li> Create a new file in the <b>/tmp/shared</b> directory named <b>operations_network.txt</b>. Record the ownership and permissions. Change the umask for operator1. Create a new file called <b>operations_production.txt</b>. Record the ownership and permissions of the <b>operations_production.txt</b> file.\r\n<ol>\r\n<li> Use the echo command to create a file called <b>operations_network.txt</b> in the <b>/tmp/shared</b> directory\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>echo text >> /tmp/shared/operations_network.txt</b>\r\n</pre>\r\n<li> Use the ls -l command to list the permissions of the <b>operations_network.txt</b> file.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>ls -l /tmp/shared/operations_network.txt</b>\r\n-rw-rw-r--. 1 operator1 operators 5 Feb 4 15:43 /tmp/shared/\r\noperations_network.txt \r\n</pre>\r\n<li> Use the <b>umask</b> command to change the <b>umask</b> for the operator1 user to 027. Use the <b>umask</b> command to confirm the change.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>umask 027</b>\r\n[operator1@servera ~]$ <b>umask</b>\r\n0027\r\n</pre>\r\n<li> Use the touch command to create a new file named <b>operations_production.txt</b> in the <b>/tmp/shared/</b> directory. Use the <b>ls -l</b> command to ensure that newly created files are created with read-only access for the operators group and no access for other users.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>touch /tmp/shared/operations_production.txt</b>\r\n[operator1@servera ~]$ <b>ls -l /tmp/shared/operations_production.txt</b>\r\n-rw-r-----. 1 operator1 operators 0 Feb 4 15:56 /tmp/shared/\r\noperations_production.txt \r\n</pre>\r\n</ol>\r\n<li> Open a new terminal window and log in to servera as operator1.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>ssh operator1@servera</b>\r\n...output omitted...\r\n[operator1@servera ~]$\r\n</pre>\r\n<li> . List the umask value for operator1.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>umask</b>\r\n0002 \r\n</pre>\r\n<li> Change the default umask for the operator1 user. The new umask prohibits all access for users not in their group. Confirm that the umask has been changed.\r\n<ol>\r\n<li> Use the echo command to change the default umask for the operator1 user to 007.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>echo \"umask 007\" >> ~/.bashrc</b>\r\n[operator1@servera ~]$ <b>cat ~/.bashrc</b>\r\n# .bashrc\r\n# Source global definitions\r\nif [ -f /etc/bashrc ]; then\r\n . /etc/bashrc\r\nfi\r\n# Uncomment the following line if you don't like systemctl's autopaging feature:\r\n# export SYSTEMD_PAGER=\r\n# User specific aliases and functions\r\n</pre>\r\n\r\n<li> Log out and log in again as the operator1 user. Use the umask command to confirm that the change is permanent.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>exit</b>\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$ <b>ssh operator1@servera</b>\r\n...output omitted...\r\n[operator1@servera ~]$ <b>umask</b>\r\n0007\r\n</pre>\r\n</ol>\r\n<li> On servera, exit from all the operator1 and the student user shells\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[operator1@servera ~]$ <b>exit</b>\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$ \r\n</pre>\r\n</ol>\r\n<br>\r\n\r\n<b>Finish</b><br>\r\nOn workstation, run the lab perms-default finish script to complete this exercise.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-default finish</b>\r\n</pre>\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 227, "fields": {"title": "LAB : CONTROLLING ACCESS TO FILES", "slug": "lab-controlling-access-to-files", "content": "", "content_md": "## PERFORMANCE CHECKLIST\r\nIn this lab, you will configure permissions on files and set up a directory that users in a particular group can use to conveniently share files on the local file system.\r\n\r\n## OUTCOMES\r\nYou should be able to:\r\n<ul>\r\n<li> Create a directory where users can work collaboratively on files.\r\n<li> Create files that are automatically assigned group ownership.\r\n<li> Create files that are not accessible outside of the group.\r\n</ul>\r\n\r\n## BEFORE YOU BEGIN\r\nLog in to `workstation` as `student` using `student` as the password.\r\nOn `workstation`, run the <b>lab perms-review start</b> command. The command runs a\r\nstart script that determines if serverb is reachable on the network. The script also creates\r\nthe techdocs group and three users named `tech1`, `tech2`, and `database1`.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ lab perms-review start\r\n</pre>\r\n<ol>\r\n<li> Use the ssh command to log in to serverb as the student user. Switch to root on\r\nserverb using redhat as the password.\r\n<li> Create a directory called <b>/home/techdocs</b>.\r\n<li> Change the group ownership of the <b>/home/techdocs</b> directory to the techdocs group.\r\n<li> Verify that users in the techdocs group can create and edit files in the <b>/home/techdocs</b> directory.\r\n<li> Set permissions on the <b>/home/techdocs</b> directory. On the <b>/home/techdocs </b> directory, configure setgid (2), read/write/execute permissions (7) for the owner/user and group, and no permissions (0) for other users.\r\n<li> Verify that the permissions are set properly.\r\n<li> Confirm that users in the techdocs group can now create and edit files in the /home/\r\ntechdocs directory. Users not in the techdocs group cannot edit or create files in the\r\n<b>/home/techdocs</b> directory. Users tech1 and tech2 are in the techdocs group. User\r\ndatabase1 is not in that group.\r\n<li> Modify the global login scripts. Normal users should have a umask setting that prevents\r\nothers from viewing or modifying new files and directories.\r\n<li> Log off from serverb.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@serverb ~]$ <b>exit</b>\r\nlogout\r\nConnection to serverb closed.\r\n</pre>\r\n</ol>\r\n\r\n#### Evaluation\r\nOn workstation, run the lab perms-review grade script to confirm success on this\r\nexercise.\r\n<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-review grade</b>\r\n</pre>\r\n\r\n#### Finish\r\nOn workstation, run the lab perms-review finish script to complete the lab.<pre style=\"background-color: #f8f8f8;  class=\"prettyprint\">\r\n[student@workstation ~]$ <b>lab perms-review finish</b>\r\n</pre>\r\nThis concludes the lab.", "order": 7, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 228, "fields": {"title": "SOLUTION: CONTROLLING ACCESS TO FILES", "slug": "solution-controlling-access-to-files", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will configure permissions on files and set up a directory that users in a\r\nparticular group can use to conveniently share files on the local file system.\r\n<br>\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\u2022 Create a directory where users can work collaboratively on files.\r\n\u2022 Create files that are automatically assigned group ownership.\r\n\u2022 Create files that are not accessible outside of the group.\r\n<br>\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run the **lab perms-review start** command. The command runs a\r\nstart script that determines if serverb is reachable on the network. The script also creates\r\nthe techdocs group and three users named tech1, tech2, and database1.\r\n\r\n```bash\r\n[student@workstation ~]$ lab perms-review start\r\n```\r\n<br>\r\n1. Use the **ssh** command to log in to **serverb** as the **student** user. Switch to **root** on\r\n**serverb** using **redhat** as the password.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$ su -\r\nPassword: redhat\r\n[root@serverb ~]#\r\n```\r\n<br>\r\n2. Create a directory called /home/techdocs.<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Use the mkdir command to create a directory called /home/techdocs.\r\n\r\n```bash\r\n[root@serverb ~]# mkdir /home/techdocs\r\n```\r\n<br>\r\n3. Change the group ownership of the **/home/techdocs** directory to the techdocs group.<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Use the **chown** command to change the group ownership for the /home/techdocs\r\ndirectory to the techdocs group.\r\n\r\n```bash\r\n[root@serverb ~]# chown :techdocs /home/techdocs\r\n```\r\n<br>\r\n4. Verify that users in the **techdocs** group can create and edit files in the **/home/techdocs**\r\ndirectory.\r\n<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Use the **su** command to switch to the **tech1** user.\r\n\r\n```bash\r\n[root@serverb ~]# su - tech1\r\n[tech1@serverb ~]$\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2. Use **touch** to create a file named **techdoc1.txt** in the **/home/techdocs** directory.\r\n\r\n```bash\r\n[tech1@serverb ~]$ touch /home/techdocs/techdoc1.txt\r\ntouch: cannot touch '/home/techdocs/techdoc1.txt': Permission denied\r\n```\r\n\r\n>**NOTE**<br><hr>\r\n>Note that even though the **/home/techdocs** directory is owned by **techdocs** and\r\n>**tech1** is part of the techdocs group, it is not possible to create a new file in that\r\n>directory. This is because the techdocs group does not have write permission. Use\r\n>the **ls -ld** command to show the permissions.\r\n\r\n```bash\r\n[tech1@serverb ~]$ ls -ld /home/techdocs/\r\ndrwxr-xr-x. 2 root techdocs 6 Feb  5 16:05 /home/techdocs/\r\n```\r\n<br>\r\n5. Set permissions on the **/home/techdocs** directory. On the **/home/techdocs** directory,\r\nconfigure setgid (2), read/write/execute permissions (7) for the owner/user and group, and\r\nno permissions (0) for other users.<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1. Exit from the tech1 user shell.\r\n\r\n```bash\r\n[tech1@serverb ~]$ exit\r\nlogout\r\n[root@serverb ~]#\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2. Use the **chmod** command to set the group permission for the **/home/techdocs**\r\ndirectory. On the **/home/techdocs** directory, configure setgid (2), read/write/\r\nexecute permissions (7) for the owner/user and group, and no permissions (0) for\r\nother users.\r\n\r\n```bash\r\n[root@serverb ~]# chmod 2770 /home/techdocs\r\n```\r\n<br>\r\n6. Verify that the permissions are set properly.\r\n\r\n```bash\r\n[root@serverb ~]# ls -ld /home/techdocs\r\ndrwxrws---. 2 root techdocs 6 Feb 4 18:12 /home/techdocs/\r\n```\r\nNote that the **techdocs** group now has write permission.\r\n<br>\r\n7. Confirm that users in the **techdocs** group can now create and edit files in the **/home/\r\ntechdocs** directory. Users not in the techdocs group cannot edit or create files in the\r\n**/home/techdocs** directory. Users **tech1** and **tech2** are in the **techdocs** group. User **database1** is not in that group.\r\n<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.1. Switch to the **tech1** user. Use **touch** to create a file called **techdoc1.txt** in the **/home/techdocs** directory. Exit from the **tech1** user shell.\r\n\r\n```bash\r\n[root@serverb ~]# su - tech1\r\n[tech1@serverb ~]$ touch /home/techdocs/techdoc1.txt\r\n[tech1@serverb ~]$ ls -l /home/techdocs/techdoc1.txt\r\n-rw-rw-r--. 1 tech1 techdocs 0 Feb 5 16:42 /home/techdocs/techdoc1.txt\r\n[tech1@serverb ~]$ exit\r\nlogout\r\n[root@serverb \r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.2. Switch to the **tech2** user. Use the **echo** command to add some content to the **/\r\nhome/techdocs/techdoc1.txt** file. Exit from the **tech2** user shell.\r\n\r\n```bash\r\n[root@serverb ~]# su - tech2\r\n[tech2@serverb ~]$ cd /home/techdocs\r\n[tech2@serverb techdocs]$ echo \"This is the first tech doc.\" >\r\ntechdoc1.txt\r\n[tech2@serverb techdocs]$ exit\r\nlogout\r\n[root@serverb ~]#\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.3. Switch to the **database1** user. Use the **echo** command to append some content to\r\nthe **/home/techdocs/techdoc1.txt** file. Notice that you will get a **Permission\r\nDenied** message. Use the **ls -l** command to confirm that **database1** does not\r\nhave access to the file. Exit from the **database1** user shell.\r\n\r\n```bash\r\n[root@serverb ~]# su - database1\r\n[database1@serverb ~]$ echo \"This is the first tech doc.\" \\\r\n>> /home/techdocs/techdoc1.txt\r\n-bash: /home/techdocs/techdoc1.txt: Permission denied\r\n[database1@serverb ~]$ ls -l /home/techdocs/techdoc1.txt\r\nls: cannot access '/home/techdocs/techdoc1.txt': Permission denied\r\n[database1@serverb ~]$ exit\r\nlogout\r\n[root@serverb ~]#\r\n```\r\n<br>\r\n8. Modify the global login scripts. Normal users should have a umask setting that prevents\r\nothers from viewing or modifying new files and directories.\r\n<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1. Determine the umask of the student user. Use the **su - student** command to\r\nswitch to **student** login shell. When done exit from the shell.\r\n\r\n```bash\t\r\n[root@serverb ~]# su - student\r\n[student@serverb ~]$ umask\r\n0002\r\n[student@serverb ~]$ exit\r\nlogout\r\n[root@serverb ~]#\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2. Create the **/etc/profile.d/local-umask.sh** file with the following content to\r\nset the umask to **007** for users with a UID greater than **199** and with a username and\r\nprimary group name that match, and to **022** for everyone else:\r\n\r\n```bash\r\n[root@serverb ~]# cat /etc/profile.d/local-umask.sh\r\n# Overrides default umask configuration\r\nif [ $UID -gt 199 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\r\n\tumask 007\r\nelse\r\n\tumask 022\r\nfi\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3. Log out of the shell and log back in as **student** to verify that global umask changes to **007**.\r\n\r\n```bash\r\n[root@serverb ~]# exit\r\nlogout\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$ umask\r\n0007\r\n```\r\n<br>\r\n9. Log off from **serverb**.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n```\r\n\r\n##Evaluation<br>\r\nOn workstation, run the lab perms-review grade script to confirm success on this\r\nexercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab perms-review grade\r\n```\r\n\r\n##Finish<br>\r\nOn **workstation**, run the **lab perms-review finish** script to complete the lab.\r\n\r\n```bash\r\n[student@workstation ~]$ lab perms-review finish\r\n```", "order": 8, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 229, "fields": {"title": "SUMMARY", "slug": "summary-4", "content": "", "content_md": "#### In this chapter, you learned:\r\n<ul>\r\n<li> Files have three categories to which permissions apply. A file is owned by a user, a single\r\ngroup, and other users. The most specific permission applies. User permissions override group permissions and group permissions override other permissions.\r\n<li> The <b>ls</b> command with the <b>-l</b> option expands the file listing to include both the file permissions and ownership.\r\n<li> The <b>chmod</b> command changes file permissions from the command line. There are two methods to represent permissions, symbolic (letters) and numeric (digits).\r\n<li> The <b>chown</b> command changes file ownership. The <b>-R</b> option recursively changes the ownership of a directory tree.\r\n<li> The umask command without arguments displays the current umask value of the shell. Every process on the system has a umask. The default umask values for Bash are defined in the <b>/etc/profile</b> and <b>/etc/bashrc</b> files.", "order": 9, "is_visible": true, "is_task": false, "module": 33, "draft": false, "files": []}}, {"model": "courses.section", "pk": 230, "fields": {"title": "LISTING PROCESSES", "slug": "listing-processes", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to get information about programs running on a<br>\r\nsystem to determine status, resource use, and ownership, so you can control them.<br>\r\n\r\n##DEFINITION OF A PROCESS\r\nA process is a running instance of a launched, executable program. A process consists of:<br>\r\n\r\n\u2022 An address space of allocated memory<br>\r\n\r\n\u2022 Security properties including ownership credentials and privileges<br>\r\n\r\n\u2022 One or more execution threads of program code<br>\r\n\r\n\u2022 Process state<br>\r\n\r\nThe environment of a process includes:<br>\r\n\r\n\u2022 Local and global variables<br>\r\n\r\n\u2022 A current scheduling context<br>\r\n\r\n\u2022 Allocated system resources, such as file descriptors and network ports<br>\r\n\r\nAn existing (parent) process duplicates its own address space (I**fork**) to create a new (child) process structure. Every new process is assigned a unique process ID (PID) for tracking and security. The PID and the parent's process ID (PPID) are elements of the new process environment. Any process may create a child process. All processes are descendants of the first system process, **systemd** on a Red Hat Enterprise Linux 8 system).<br>\r\n\r\n![](/media/markdownx/5d86a1f9-08d6-4529-99f7-1e5c26f22ecf.png)\r\n\r\nThrough the fork routine, a child process inherits security identities, previous and current file<br>\r\ndescriptors, port and resource privileges, environment variables, and program code. A child<br>\r\nprocess may then exec its own program code. Normally, a parent process sleeps while the child<br>\r\nprocess runs, setting a request (wait) to be signaled when the child completes. Upon exit, the<br>\r\nchild process has already closed or discarded its resources and environment. The only remaining<br>\r\nresource, called a zombie, is an entry in the process table. The parent, signaled awake when the<br>\r\nchild exited, cleans the process table of the child's entry, thus freeing the last resource of the child<br>\r\nprocess. The parent process then continues with its own program code execution.<br>\r\n\r\n##DESCRIBING PROCESS STATES\r\nIn a multitasking operating system, each CPU (or CPU core) can be working on one process at<br>\r\na single point in time. As a process runs, its immediate requirements for CPU time and resource<br>\r\nallocation change. Processes are assigned a state, which changes as circumstances dictate.<br>\r\n\r\n![](/media/markdownx/6f06c5c6-b0a3-4473-b859-ecfc865e22aa.png)\r\n\r\nLinux process states are illustrated in the previous diagram and described in the following table:<br>\r\n\r\n<b>Linux Process States</b><hr>\r\n\r\n![](/media/markdownx/abd10f24-efad-41e8-a6fb-d7f2722c95e5.png)\r\n![](/media/markdownx/0d04482a-72ed-4a42-94c0-45de17a7cafb.png)\r\n\r\n<b>Why Process States are Important</b><hr>\r\n\r\nWhen troubleshooting a system, it is important to understand how the kernel communicates with<br>\r\nprocesses and how processes communicate with each other. At process creation, the system<br>\r\nassigns the process a state. The **S** column of the **top** command or the **STAT** column of the ps<br>\r\nshow the state of each process. On a single CPU system, only one process can run at a time. It<br>\r\nis possible to see several processes with a state of  **R**. However, not all of them will be running<br>\r\nconsecutively, some of them will be in status waiting.\r\n\r\n![](/media/markdownx/ca37a08e-216f-4775-92d0-158d72e22dce.png)\r\n\r\nProcess can be suspended, stopped, resumed, terminated, and interrupted using signals. Signals<br>\r\nare discussed in more detail later in this chapter. Signals can be used by other processes, by the<br>\r\nkernel itself, or by users logged into the system.<br>\r\n\r\n##LISTING PROCESSES\r\nThe **ps** command is used for listing current processes. It can provide detailed process information,<br>\r\nincluding:  \r\n\u2022 User identification (UID), which determines process privileges<br>\r\n\u2022 Unique process identification (PID)<br>\r\n\u2022 CPU and real time already expended<br>\r\n\u2022 How much memory the process has allocated in various locations<br>\r\n\u2022 The location of process **stdout**, known as the controlling terminal<br>\r\n\u2022 The current process state<br>\r\n\r\n> **IMPORTANT**   \r\n> The Linux version of **ps** supports three option formats:  \r\n> \u2022 UNIX (POSIX) options, which may be grouped and must be preceded by a dash  \r\n> \u2022 BSD options, which may be grouped and must not be used with a dash  \r\n> \u2022 GNU long options, which are preceded by two dashes  \r\n>  For example,  **ps -aux**  is not the same as ** ps aux** .\r\n\r\nPerhaps the most common set of options, aux, displays all processes including processes without<br>\r\na controlling terminal. A long listing (options lax) provides more technical detail, but may display<br>\r\nfaster by avoiding user name lookups. The similar UNIX syntax uses the options -ef to display all<br>\r\nprocesses.\r\n\r\n![](/media/markdownx/61c3bf19-b0d1-4fbf-98e6-02126db93065.png)\r\n\r\nBy default, <b>ps</b> with no options selects all processes with the same effective user ID (EUID) as the<br>\r\ncurrent user, and which are associated with the same terminal where <b>ps</b> was invoked.<br>\r\n\r\n\u2022 Processes in brackets (usually at the top of the list) are scheduled kernel threads.<br>\r\n\u2022 Zombies are listed as <b>exiting</b> or <b>defunct</b>.<br>\r\n\u2022 The output of <b>ps</b> displays once. Use <b>top</b> for a process display that dynamically updates.<br>\r\n\u2022 <b>ps</b> can display in tree format so you can view relationships between parent and child processes.<br>\r\n\u2022 The default output is sorted by process ID number. At first glance, this may appear to be<br>\r\nchronological order. However, the kernel reuses process IDs, so the order is less structured than<br>\r\nit appears. To sort, use the <b>-O</b> or <b>--sort</b> options. Display order matches that of the system<br>\r\nprocess table, which reuses table rows as processes die and new ones are created. Output may<br>\r\nappear chronological, but is not guaranteed unless explicit <b>-O</b> or <b>--sort</b> options are used.<br>\r\n\r\n>  **REFERENCES**  \r\n>  **info libc signal** (*GNU C Library Reference Manual*)  \r\n>  \u2022 Section 24: Signal Handling  \r\n>  **info libc processes** (*GNU C Library Reference Manual*)   \r\n>  \u2022 Section 26: Processes  \r\n>  **ps**(1) and **signal**(7) man pages", "order": 1, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 231, "fields": {"title": "QUIZ: LISTING PROCESSES", "slug": "quiz-listing-process", "content": "", "content_md": "## Quiz\r\n\r\nClick \r\n[https://course.btech.id/quiz/listing-process/](https://course.btech.id/quiz/listing-process/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 232, "fields": {"title": "CONTROLLING JOBS", "slug": "controlling-jobs", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to use <b>Bash</b> job control to manage multiple<br>\r\nprocesses started from the same terminal session.<br>\r\n\r\n##DESCRIBING JOBS AND SESSIONS\r\nJob control is a feature of the shell which allows a single shell instance to run and manage multiple<br>\r\ncommands.<br>\r\n\r\nA job is associated with each pipeline entered at a shell prompt. All processes in that pipeline are<br>\r\npart of the job and are members of the same process group. If only one command is entered at a<br>\r\nshell prompt, that can be considered to be a minimal \u201cpipeline\u201d of one command, creating a job<br>\r\nwith only one member.<br>\r\n\r\nOnly one job can read input and keyboard generated signals from a particular terminal window at a<br>\r\ntime. Processes that are part of that job are foreground processes of that controlling terminal.<br>\r\n\r\nA background process of that controlling terminal is a member of any other job associated<br>\r\nwith that terminal. Background processes of a terminal cannot read input or receive keyboard<br>\r\ngenerated interrupts from the terminal, but may be able to write to the terminal. A job in the<br>\r\nbackground may be stopped (suspended) or it may be running. If a running background job tries to<br>\r\nread from the terminal, it will be automatically suspended.<br>\r\n\r\nEach terminal is its own session, and can have a foreground process and any number of<br>\r\nindependent background processes. A job is part of exactly one session: the one belonging to its<br>\r\ncontrolling terminal.<br>\r\n\r\nThe **ps** command shows the device name of the controlling terminal of a process in the **TTY**<br>\r\ncolumn. Some processes, such as system daemons, are started by the system and not from a shell<br>\r\nprompt. These processes do not have a controlling terminal, are not members of a job, and cannot<br>\r\nbe brought to the foreground. The **ps** command displays a question mark (**?**) in the **TTY** column<br>\r\nfor these processes.<br>\r\n\r\n##RUNNING JOBS IN THE BACKGROUND\r\nAny command or pipeline can be started in the background by appending an ampersand (**&**) to the<br>\r\nend of the command line. The **Bash** shell displays a job number (unique to the session) and the<br>\r\nPID of the new child process. The shell does not wait for the child process to terminate, but rather<br>\r\ndisplays the shell prompt.\r\n```bash\r\n[user@host ~]$ sleep 10000 &\r\n[1] 5947\r\n[user@host ~]$\r\n```\r\n>**NOTE**<br><hr>\r\n>When a command line containing a pipe is sent to the background using an\r\n>ampersand, the PID of the last command in the pipeline is used as output. All\r\n>processes in the pipeline are still members of that job\r\n><pre>\r\n>[user@host ~]$ example_command | sort | mail -s \"Sort output\" &\r\n>[1] 5998\r\n></pre>\r\n\r\n<br>\r\nYou can display the list of jobs that Bash is tracking for a particular session with the <b>jobs</b> command.\r\n\r\n```bash\r\n[user@host ~]$ jobs\r\n[1]+ Running                sleep 10000 &\r\n[user@host ~]$\r\n```\r\nA background job can be brought to the foreground by using the **fg** command with its job ID (%job number).\r\n\r\n```bash\r\n[user@host ~]$ fg %1\r\nsleep 10000\r\n```\r\nIn the preceding example, the **sleep** command is now running in the foreground on the controlling<br>\r\nterminal. The shell itself is again asleep, waiting for this child process to exit.<br>\r\n\r\nTo send a foreground process to the background, first press the keyboard generated suspend request (**Ctrl+z**) in the terminal.\r\n\r\n```bash\r\nsleep 10000\r\n^Z\r\n[1]+ Stopped                sleep 10000\r\n[user@host ~]$\r\n```\r\nThe job is immediately placed in the background and is suspended.<br>\r\n\r\nThe **ps j** command displays information relating to jobs. The PID is the unique process ID of<br>\r\nthe process. THe PPID is the PID of the parent process of this process, the process that started<br>\r\n(forked) it. The PGID is the PID of the process group leader, normally the first process in the job's<br>\r\npipeline. The SID is the PID of the session leader, which (for a job) is normally the interactive<br>\r\nshell that is running on its controlling terminal. Since the example **sleep** command is currently<br>\r\nsuspended, its process state is **T**.\r\n\r\n![](/media/markdownx/a5f0d7c5-7340-4099-85a4-17e287bc745d.png)\r\n\r\nTo start the suspended process running in the background, use the **bg** command with the same<br>\r\njob ID.\r\n\r\n```bash\r\n[user@host ~]$ bg %1\r\n[1]+ sleep 10000 &\r\n```\r\nThe shell will warn a user who attempts to exit a terminal window (session) with suspended jobs. If<br>\r\nthe user tries exiting again immediately, the suspended jobs are killed.<br>\r\n\r\n>**NOTE**<br><hr>\r\n>Note the **+** sign after the **[1]** in the examples above. The **+** sign indicates that this\r\n>job is the current default job. That is, if a command is used that expects a **%job**\r\n>number argument and a job number is not provided, then the action is taken on the\r\n>job with the **+** indicator.\r\n\r\n<br>\r\n>**REFERENCES**<br><hr>\r\n>**Bash** info page (The GNU Bash Reference Manual)\r\n>https://www.gnu.org/software/bash/manual\r\n>\u2022 Section 7: Job Control\r\n>**bash**(1), **builtins**(1), **ps**(1), **sleep**(1) man pages", "order": 3, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 233, "fields": {"title": "GUIDED EXERCISE : CONTROLLING JOBS", "slug": "guided-exercise-controlling-jobs", "content": "", "content_md": "In this exercise, you will start, suspend, background, and foreground multiple processes using\r\njob control.\r\n##OUTCOMES\r\nYou should be able to use job control to suspend and restart user processes.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run the **lab processes-control start** command. This script<br>\r\nensures that servera is available.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-control start\r\n```\r\n<b>1.</b> On workstation, open two terminal windows side by side. In this section, these two<br>\r\nterminals are referred to as left and right. In each terminal, use the **ssh** command to log in<br>\r\nto servera as the student user.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<b>2.</b> In the left window, create a new directory called **/home/student/bin**. In the new<br>\r\ndirectory, create a shell script called **control**. Make the script executable.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Use the **mkdir** command to create a new directory called **/home/student/bin**.\r\n```bash\r\n[student@servera ~]$ mkdir /home/student/bin\r\n```\r\n2.2. Use the vim command to create a script called control in the /home/student/<br>\r\nbin directory. To enter **Vim** interactive mode, press the **i** key. Use the **:wq** <br>\r\ncommand to save the file.\r\n\r\n```bash\r\n[student@servera ~]$ vim /home/student/bin/control\r\n#!/bin/bash\r\nwhile true; do\r\n    echo -n \"$@ \" >> ~/control_outfile\r\n    sleep 1\r\ndone\r\n```\r\n\r\n>**NOTE**<br><hr>\r\n>The control script runs until terminated. It appends command-line arguments to the\r\n>file **~/control_outfile** once per second.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.3. Use the **chmod** command to make the **control** file executable.\r\n\r\n```bash\r\n[student@servera ~]$ chmod +x /home/student/bin/control\r\n```\r\n\r\n<b>3.</b> Execute the **control** script. The script continuously appends the word \"technical\" and a<br>\r\nspace to the file **~/control_outfile** at one second intervals.<br>\r\n\r\n>**NOTE**<br><hr>\r\n>You are able to execute your **control** script because it is located in your **PATH**, and\r\n>has been made executable.\r\n\r\n```bash\r\n[student@servera ~]$ control technical\r\n```\r\n\r\n<b>4.</b> In the right terminal shell, use the **tail** command with the **-f** option to confirm that the<br>\r\nnew process is writing to the **/home/student/control_outfile** file.\r\n\r\n```bash\r\n[student@servera ~]$ tail -f ~/control_outfile\r\ntechnical technical technical technical\r\n...output omitted...\r\n```\r\n\r\n<b>5.</b> In the left terminal shell, press **Ctrl+z to** suspend the running process. The shell returns<br>\r\nthe job ID in square brackets. In the right window, confirm that the process output has<br>\r\nstopped.\r\n\r\n```bash\r\n^Z\r\n[1]+ Stopped            control technical\r\n[student@servera ~]$\r\n\r\n```\r\n```bash\r\ntechnical technical technical technical\r\n...no further output...\r\n```\r\n\r\n<b>6.</b> In the left terminal shell, view the **jobs** list. Remember that the **+** sign indicates the default<br>\r\njob. Restart the job in the background. In the right terminal shell, confirm that the process<br>\r\noutput is again active.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. Using the **jobs** command, view the list of jobs.\r\n\r\n```bash\r\n[student@servera ~]$ jobs\r\n[1]+    Stopped                 control technical\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2.Using the **bg** command, restart the **control** job in the background.\r\n\r\n```bash\r\n[student@servera ~]$ bg\r\n[1]+ control technical &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.3. Use the **jobs** command to confirm that the **control** job is running again.\r\n\r\n```bash\r\n[student@servera ~]$ jobs\r\n[1]+    Running                 control technical &\r\n```\r\n\r\n6.4. In the right terminal shell, confirm that the **tail** command is producing output.\r\n\r\n```bash\r\n...output omitted...\r\ntechnical technical technical technical technical technical technical\r\ntechnical\r\n```\r\n\r\n<b>7.</b> In the left terminal shell, start two more **control** processes to append to the **~/output**<br>\r\nfile. Use the ampersand (&) to start the processes in the background. Replace **technical**<br>\r\nwith **documents** and then with **database**. Replacing the arguments helps to differentiate<br>\r\nbetween the three processes.\r\n\r\n```bash\r\n[student@servera ~]$ control documents &\r\n[2] 6579\r\n[student@servera ~]$\r\n[student@servera ~]$ control database &\r\n[3] 6654\r\n```\r\n\r\n>**NOTE**<br><hr>\r\n>The job number of each new process is printed in square brackets. The second\r\n>number is the unique system-wide process ID number (PID) for the process.\r\n\r\n<b>8.</b> In the left terminal shell, use the **jobs** command to view the three running processes. In the<br>\r\nright terminal shell, confirm that all three processes are appending to the file.\r\n\r\n```bash\r\n[student@servera ~]$ jobs\r\n[1]     Running                 control technical &\r\n[2]-    Running                 control documents &\r\n[3]+    Running                 control database &\r\n```\r\n\r\n```bash\r\n...output omitted...\r\ntechnical documents database technical documents database technical\r\ndocuments database technical documents database\r\n...output omitted...\r\n```\r\n\r\n<b>9. </b>Suspend the **control technical** process. Confirm that it has been suspended.<br>\r\nTerminate the **control documents** process and confirm that it has been terminated.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1. In the left terminal shell, use the **fg** command with the job ID to foreground the<br>\r\n**control technical** process. Press **Ctrl+z** to suspend the process. Use the<br>\r\n**jobs** command to confirm that the process is suspended.\r\n\r\n```bash\r\n[student@servera ~]$ fg %1\r\ncontrol technical\r\n^Z\r\n[1]+ Stopped                    control technical\r\n[student@servera ~]$ jobs\r\n[1]+ Stopped                    control technical\r\n[2]  Running                    control documents &\r\n[3]- Running                    control database &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.2. In the right terminal shell, confirm that the control technical process is no\r\nlonger sending output.\r\n\r\n```bash\r\ndatabase documents database documents database\r\n...no further output...\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.3. In the left terminal shell, use the **fg** command with the job ID to foreground the<br>\r\n**control documents** process. Press **Ctrl+c** to terminate the process. Use the<br>\r\n**jobs** command to confirm that the process is terminated.\r\n\r\n```bash\r\n[student@servera ~]$ fg %2\r\ncontrol documents\r\n^C\r\n[student@servera ~]$ jobs\r\n[1]+ Stopped                   control technical\r\n[3]- Running                   control database &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.4. In the right terminal shell, confirm that the **control documents** process is no longer sending output.\r\n\r\n```bash\r\n...output omitted...\r\ndatabase database database database database database database\r\ndatabase\r\n...no further output...\r\n```\r\n\r\n<b>10.</b> In the left window, use the **ps** command with the **jT** option to view the remaining jobs. The<br>\r\nsuspended jobs have a state of **T**. The other background jobs are sleeping (**S**).<br>\r\n\r\n![](/media/markdownx/7e68502a-66a3-4aa6-b6d2-eb0afb1cbeb7.png)\r\n\r\n<b>11.</b> In the left window, use the **jobs** command to view the current jobs. Terminate the **control database** process and confirm that it has been terminated.\r\n\r\n```bash\r\n[student@servera ~]$ jobs\r\n[1]+  Stopped               control technical\r\n[3]-  Running               control database &\r\n```\r\n\r\nUse the **fg** command with the job ID to foreground the **control database** process.<br>\r\nPress **Ctrl+c** to terminate the process. Use the jobs command to confirm that the process<br>\r\nis terminated.\r\n\r\n```bash\r\n[student@servera ~]$ fg %3\r\ncontrol database\r\n^C\r\n[student@servera ~]$ jobs\r\n[1]+    Stopped                control technical\r\n```\r\n\r\n<b>12.</b> In the right terminal shell, use the **Ctrl+c** command to stop the **tail** command. Using the **rm** command, delete the **~/control_outfile** file.\r\n\r\n```bash\r\n...output omitted...\r\nCtrl+c\r\n[student@servera ~]$ rm ~/control_outfile\r\n```\r\n\r\n<b>13.</b> Log out from servera on both terminals.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n```\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n```\r\n\r\n<b>Finish</b><hr>\r\nOn workstation, run the lab processes-control finish script to complete this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-control finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 234, "fields": {"title": "KILLING PROCESSES", "slug": "killing-processes", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to:<br>\r\n\r\n\u2022 Use commands to kill and communicate with processes.<br>\r\n\r\n\u2022 Define the characteristics of a daemon process.<br>\r\n\r\n\u2022 End user sessions and processes.<br>\r\n\r\n##PROCESS CONTROL USING SIGNALS\r\nA signal is a software interrupt delivered to a process. Signals report events to an executing<br>\r\nprogram. Events that generate a signal can be an error, external event (an I/O request or an<br>\r\nexpired timer), or by explicit use of a signal-sending command or keyboard sequence.<br>\r\n\r\nThe following table lists the fundamental signals used by system administrators for routine process<br>\r\nmanagement. Refer to signals by either their short (HUP) or proper (SIGHUP) name.<br>\r\n\r\n<b>Fundamental Process Management signals</b><hr>\r\n\r\n![](/media/markdownx/1fb6ed50-7cb0-4d24-a75c-618260e75c3c.png)\r\n\r\n>**NOTE**<br><hr>\r\n>Signal numbers vary on different Linux hardware platforms, but signal names and\r\n>meanings are standardized. For command use, it is advised to use signal names\r\n>instead of numbers. The numbers discussed in this section are for x86_64 systems.\r\n\r\nEach signal has a default action, usually one of the following:<br>\r\n\r\n\u2022 Term - Cause a program to terminate (exit) at once.<br>\r\n\r\n\u2022 Core - Cause a program to save a memory image (core dump), then terminate.<br>\r\n\r\n\u2022 Stop - Cause a program to stop executing (suspend) and wait to continue (resume).<br>\r\n\r\nPrograms can be prepared to react to expected event signals by implementing handler routines to<br>\r\nignore, replace, or extend a signal's default action.<br>\r\n\r\n<b>Commands for Sending Signals by Explicit Request</b><hr>\r\nYou signal their current foreground process by pressing a keyboard control sequence to suspend<br>\r\n(**Ctrl+z**), kill (**Ctrl+c**), or core dump (**Ctrl+\\**) the process. However, you will use signal-sending<br>\r\ncommands to send signals to a background process or to processes in a different session.<br>\r\n\r\nSignals can be specified as options either by name (for example, **-HUP** or **-SIGHUP**) or by number<br>\r\n(the related **-1**). Users may kill their own processes, but root privilege is required to kill processes<br>\r\nowned by others.<br>\r\n\r\nThe **kill** command sends a signal to a process by PID number. Despite its name, the kill<br>\r\ncommand can be used for sending any signal, not just those for terminating programs. You can use<br>\r\nthe **kill -l** command to list the names and numbers of all available signals.<br>\r\n\r\n![](/media/markdownx/cc7ce179-b810-496b-9817-3febfcc0f0cd.png)\r\n![](/media/markdownx/40017d5f-f59b-4966-b7b9-bd12dc7b0875.png)\r\n\r\nThe **killall** command can signal multiple processes, based on their command name.<br>\r\n\r\n![](/media/markdownx/37376de8-6988-4908-9a63-16ba36363e51.png)\r\n\r\nUse **pkill** to send a signal to one or more processes which match selection criteria. Selection<br>\r\ncriteria can be a command name, a processes owned by a specific user, or all system-wide<br>\r\nprocesses. The **pkill** command includes advanced selection criteria:<br>\r\n\r\n\u2022 Command - Processes with a pattern-matched command name.<br>\r\n\u2022 UID - Processes owned by a Linux user account, effective or real.<br>\r\n\u2022 GID - Processes owned by a Linux group account, effective or real.<br>\r\n\u2022 Parent - Child processes of a specific parent process.<br>\r\n\u2022 Terminal - Processes running on a specific controlling terminal.<br>\r\n\r\n![](/media/markdownx/399964ff-c38d-4923-bb89-f9c86b15922f.png)\r\n![](/media/markdownx/4729139e-8067-4a95-9cb6-f0eab08e35a3.png)\r\n\r\n##LOGGING USERS OUT ADMINISTRATIVELY\r\nYou may need to log other users off for any of a variety of reasons. To name a few of the many<br>\r\npossibilities: the user committed a security violation; the user may have overused resources; the<br>\r\nuser may have an unresponsive system; or the user has improper access to materials. In these<br>\r\ncases, you may need to administratively terminate their session using signals.<br>\r\n\r\nTo log off a user, first identify the login session to be terminated. Use the **w** command to list user<br>\r\nlogins and current running processes. Note the **TTY** and **FROM** columns to determine the sessions<br>\r\nto close.<br>\r\n\r\nAll user login sessions are associated with a terminal device (TTY). If the device name is of the<br>\r\nform **pts/N**, it is a pseudo-terminal associated with a graphical terminal window or remote login<br>\r\nsession. If it is of the form **ttyN**, the user is on a system console, alternate console, or other<br>\r\ndirectly connected terminal device.<br>\r\n\r\n![](/media/markdownx/7cefb0c3-169e-45b5-b65a-62ff49c2818f.png)\r\n\r\nDiscover how long a user has been on the system by viewing the session login time. For each<br>\r\nsession, CPU resources consumed by current jobs, including background tasks and child<br>\r\nprocesses, are in the **JCPU** column. Current foreground process CPU consumption is in the **PCPU**<br>\r\ncolumn.<br>\r\n\r\nProcesses and sessions can be individually or collectively signaled. To terminate all processes for<br>\r\none user, use the **pkill** command. Because the initial process in a login session (session leader) is<br>\r\ndesigned to handle session termination requests and ignore unintended keyboard signals, killing all<br>\r\nof a user's processes and login shells requires using the SIGKILL signal.<br>\r\n\r\n>**IMPORTANT**<br><hr>\r\n>SIGKILL is commonly used too quickly by administrators.\r\n>\r\n>Since the SIGKILL signal cannot be handled or ignored, it is always fatal. However, it\r\n>forces termination without allowing the killed process to run self-cleanup routines.\r\n>It is recommended to send SIGTERM first, then try SIGINT, and only if both fail retry\r\n>with SIGKILL.\r\n\r\nFirst identify the PID numbers to be killed using **pgrep**, which operates much like **pkill**, including\r\nusing the same options, except that **pgrep** lists processes rather than killing them.\r\n\r\n```bash\r\n[root@host ~]# pgrep -l -u bob\r\n6964 bash\r\n6998 sleep\r\n6999 sleep\r\n7000 sleep\r\n[root@host ~]# pkill -SIGKILL -u bob\r\n[root@host ~]# pgrep -l -u bob\r\n[root@host ~]#\r\n```\r\n\r\nWhen processes requiring attention are in the same login session, it may not be necessary to kill<br>\r\nall of a user's processes. Determine the controlling terminal for the session using the **w** command,<br>\r\nthen kill only processes referencing the same terminal ID. Unless **SIGKILL** is specified, the session<br>\r\nleader (here, the **Bash** login shell) successfully handles and survives the termination request, but<br>\r\nall other session processes are terminated.\r\n\r\n```bash\r\n[root@host ~]# pgrep -l -u bob\r\n7391 bash\r\n7426 sleep\r\n7427 sleep\r\n7428 sleep\r\n[root@host ~]# w -h -u bob\r\nbob     tty3        18:37       5:04        0.03s       0.03s -bash\r\n[root@host ~]# pkill -t tty3\r\n[root@host ~]# pgrep -l -u bob\r\n7391 bash\r\n[root@host ~]# pkill -SIGKILL -t tty3\r\n[root@host ~]# pgrep -l -u bob\r\n```\r\n\r\nThe same selective process termination can be applied using parent and child process<br>\r\nrelationships. Use the **pstree** command to view a process tree for the system or a single user. Use<br>\r\nthe parent process's PID to kill all children they have created. This time, the parent **Bash** login shell<br>\r\nsurvives because the signal is directed only at its child processes.<br>\r\n\r\n![](/media/markdownx/73de4566-bd68-4dc9-9665-f0136896fb01.png)\r\n\r\n>**REFERENCES**<br><hr>\r\n><b>info libc signal</b> (GNU C Library Reference Manual)<br>\r\n>\r\n>\u2022 Section 24: Signal Handling<br>\r\n>\r\n><b>info libc processes </b>(GNU C Library Reference Manual)<br>\r\n>\r\n>\u2022 Section 26: Processes<br>\r\n>\r\n>**kill**(1), **killall**(1), **pgrep**(1), **pkill**(1), **pstree**(1), **signal**(7), and **w**(1) man\r\n>pages", "order": 5, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 235, "fields": {"title": "GUIDED EXERCISE : KILLING PROCESSES", "slug": "guided-exercise-killing-processes", "content": "", "content_md": "In this exercise, you will use signals to manage and stop processes.\r\n##OUTCOMES\r\nYou should be able to start and stop multiple shell processes.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run the **lab processes-kill start** command. The command runs a<br>\r\nstart script that determines whether the host, servera, is reachable on the network.<br>\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-kill start\r\n```\r\n\r\n<b>1.</b> On workstation, open two terminal windows side by side. In this section, these terminals<br>\r\nare referred to as left and right. In each terminal, use the **ssh** command to log in to<br>\r\nservera as the student user.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<b>2.</b> In the left window, create a new directory called **/home/student/bin**. In the new<br>\r\ndirectory, create a shell script called **killing**. Make the script executable.<br><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Use the **mkdir** command to create a new directory called **/home/student/bin**.\r\n\r\n```bash\r\n[student@servera ~]$ mkdir /home/student/bin\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2. Use the vim command to create a script called **killing** in the **/home/student/bin** directory. Press the **i** key to enter **Vim** interactive mode. Use the **:wq** command to save the file.\r\n\r\n```bash\r\n[student@servera ~]$ vim /home/student/bin/killing\r\n#!/bin/bash\r\nwhile true; do\r\n    echo -n \"$@ \" >> ~/killing_outfile\r\n    sleep 5\r\ndone\r\n```\r\n\r\n>**NOTE**<br><hr>\r\n>The **killing** script runs until terminated. It appends command line arguments to\r\n>the **~/killing_outfile** once every 5 seconds.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.3. Use the **chmod** command to make the **killing** file executable.\r\n\r\n```bash\r\n[student@servera ~]$ chmod +x /home/student/bin/killing\r\n```\r\n\r\n<b>3.</b> In the left terminal shell, use the **cd** command to change into the **/home/student/bin/** directory. Start three **killing** processes with the arguments **network, interface,** and **connection**, respectively. Start three processes called **network, interface, and** **connection**. Use the ampersand (**&**) to start the processes in the background.\r\n\r\n```bash\r\n[student@servera ~]$ cd /home/student/bin\r\n[student@servera bin]$ killing network &\r\n[1] 3460\r\n[student@servera bin]$ killing interface &\r\n[2] 3482\r\n[student@servera bin]$ killing connection &\r\n[3] 3516\r\n```\r\n\r\nYour processes will have different PID numbers.<br>\r\n\r\n<b>4. </b>In the right terminal shell, use the **tail** command with the **-f** option to confirm that all three processes are appending to the **/home/student/killing_outfile** file.\r\n\r\n```bash\r\n[student@servera ~]$ tail -f ~/killing_outfile\r\nnetwork interface network connection interface network connection interface\r\nnetwork\r\n...output omitted...\r\n```\r\n\r\n<b>5. </b>In the left terminal shell, use the **jobs** command to list jobs.\r\n\r\n```bash\r\n[student@servera bin]$ jobs\r\n[1]     Running                 killing network &\r\n[2]-    Running                 killing interface &\r\n[3]+    Running                 killing connection &\r\n```\r\n\r\n<b>6.</b> Use signals to suspend the network process. Confirm that the network process is<br>\r\n**Stopped**. In the right terminal shell, confirm that the network process is no longer<br>\r\nappending output to the **~/killing_output**.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. Use the **kill** with the **-SIGSTOP** option to stop the network process. Run the **jobs** to confirm it is stopped.\r\n\r\n```bash\r\n[student@servera bin]$ kill -SIGSTOP %1\r\n[1]+    Stopped                 killing network\r\n[student@servera bin]$ jobs\r\n[1]+    Stopped                 killing network\r\n[2]     Running                 killing interface &\r\n[3]-    Running                 killing connection &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2. In the right terminal shell, look at the output from the **tail** command. Confirm that the word **network** is no longer being appended to the **~/killing_outfile** file.\r\n\r\n```bash\r\n...output omitted...\r\ninterface connection interface connection interface connection\r\ninterface\r\n```\r\n\r\n<b>7.</b> In the left terminal shell, terminate the interface process using signals. Confirm that the<br>\r\ninterface process has disappeared. In the right terminal shell, confirm that interface<br>\r\nprocess output is no longer appended to the **~/killing_outfile** file.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.1. Use the **kill** command with the **-SIGSTERM** option to terminate the interface process. Run the **jobs** command to confirm that it has been terminated.\r\n\r\n```bash\r\n[student@servera bin]$ kill -SIGTERM %2\r\n[student@servera bin]$ jobs\r\n[1]+    Stopped                 killing network\r\n[2]     Terminated              killing interface\r\n[3]-    Running                 killing connection &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.2. In the right terminal shell, look at the output from the **tail** command. Confirm that the word **interface** is no longer being appended to the **~/killing_outfile** file.\r\n\r\n```bash\r\n...output omitted...\r\nconnection connection connection connection connection connection\r\nconnection connection\r\n```\r\n\r\n<b>8.</b> In the left terminal shell, resume the network process using signals. Confirm that the network process is **Running**. In the right window, confirm that network process output is being appended to the **~/killing_outfile** file.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1. Use the **kill** command with the **-SIGCONT** to resume the network process. Run the **jobs** command to confirm that the process is **Running**.\r\n\t\r\n```bash\r\n[student@servera bin]$ kill -SIGCONT %1\r\n[student@servera bin]$ jobs\r\n[1]+    Running             killing network &\r\n[3]-    Running             killing connection &\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2. In the right terminal shell, look at the output from the **tail** command. Confirm that the word **network** is being appended to the **~/killing_outfile** file.\r\n\r\n```bash\r\n...output omitted...\r\nnetwork connection network connection network connection network\r\nconnection network connection\r\n```\r\n\r\n<b>9.</b> In the left terminal shell, terminate the remaining two jobs. Confirm that no jobs remain and that output has stopped.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1. Use the **kill** command with the **-SIGTERM** option to terminate the network process. Use the same command to terminate the connection process.\r\n\r\n```bash\r\n[student@servera bin]$ kill -SIGTERM %1\r\n[student@servera bin]$ kill -SIGTERM %3\r\n[1]+    Terminated              killing network\r\n[student@servera bin]$ jobs\r\n[3]+    Terminated              killing connection\r\n```\r\n\r\n<b>10.</b> In the left terminal shell, list **tail** processes running in all open terminal shells. Terminate<br>\r\nrunning tail commands. Confirm that the process is no longer running.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.1. Use the **ps** command with the **-ef** option to list all running tail processes. Refine the search using the **grep** command.\r\n\r\n```bash\r\n[student@servera bin]$ ps -ef | grep tail\r\nstudent   4581 31358    0 10:02 pts/0 00:00:00 tail -f\r\nkilling_outfile\r\nstudent   4869 2252     0 10:33 pts/1 00:00:00 grep --color=auto tail\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.2. Use the **pkill** command with the **-SIGTERM** option to kill the **tail** process. Use the **ps** to confirm it is no longer present.\r\n\r\n```bash\r\n[student@servera bin]$ pkill -SIGTERM tail\r\n[student@servera bin]$ ps -ef | grep tail\r\nstudent     4874    2252    0 10:36 pts/1   00:00:00 grep --color=auto\r\ntail\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.3. In the right terminal shell, confirm that the **tail** command is no longer running.\r\n```bash\r\n...output omitted...\r\nnetwork connection network connection network connection Terminated\r\n[student@servera ~]$\r\n```\r\n<b>11.</b> Exit from both terminal windows. Failure to exit from all sessions causes the finish script to fail.\r\n\r\n```bash\r\n[student@servera bin]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<b>Finish</b><hr>\r\nOn workstation, run the **lab processes-kill finish** script to complete this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-kill finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 236, "fields": {"title": "MONITORING PROCESS ACTIVITY", "slug": "monitoring-process-activity", "content": "", "content_md": "##OBJECTIVES\r\nAfter completing this section, you should be able to describe what load average is and determine<br>\r\nprocesses responsible for high resource use on a server.<br>\r\n\r\n##DESCRIBING LOAD AVERAGE\r\nLoad average is a measurement provided by the Linux kernel that is a simple way to represent the<br>\r\nperceived system load over time. It can be used as a rough gauge of how many system resource<br>\r\nrequests are pending, and to determine whether system load is increasing or decreasing over time.<br>\r\n\r\nEvery five seconds, the kernel collects the current load number, based on the number of processes<br>\r\nin runnable and uninterruptible states. This number is accumulated and reported as an exponential<br>\r\nmoving average over the most recent 1, 5, and 15 minutes.<br>\r\n\r\n<b>Understanding the Linux Load Average Calculation</b><hr>\r\nThe load average represents the perceived system load over a time period. Linux determines this<br>\r\nby reporting how many processes are ready to run on a CPU, and how many processes are waiting<br>\r\nfor disk or network I/O to complete.<br>\r\n\r\n\u2022 The load number is essentially based on the number of processes that are ready to run (in<br>\r\nprocess state **R**) and are waiting for I/O to complete (in process state **D**).<br>\r\n\r\n\u2022 Some UNIX systems only consider CPU utilization or run queue length to indicate system load.<br>\r\nLinux also includes disk or network utilization because that can have as significant an impact<br>\r\non system performance as CPU load. When experiencing high load averages with minimal CPU<br>\r\nactivity, examine disk and network activity.<br>\r\n\r\nLoad average is a rough measurement of how many processes are currently waiting for a request<br>\r\nto complete before they can do anything else. The request might be for CPU time to run the<br>\r\nprocess. Alternatively, the request might be for a critical disk I/O operation to complete, and the<br>\r\nprocess cannot be run on the CPU until the request completes, even if the CPU is idle. Either way,<br>\r\nsystem load is impacted and the system appears to run more slowly because processes are waiting<br>\r\nto run.<br>\r\n\r\n<b>Interpreting Displayed Load Average Values</b><hr>\r\nThe **uptime** command is one way to display the current load average. It prints the current time, how long the machine has been up, how many user sessions are running, and the current load average.\r\n\r\n```bash\r\n[user@host ~]$ uptime\r\n15:29:03 up 14 min,    2 users,    load average: 2.92, 4.48, 5.20\r\n```\r\n\r\nThe three values for the load average represent the load over the last 1, 5, and 15 minutes. A quick<br>\r\nglance indicates whether system load appears to be increasing or decreasing.<br>\r\n\r\nIf the main contribution to load average is from processes waiting for the CPU, you can calculate<br>\r\nthe approximate per CPU load value to determine whether the system is experiencing significant<br>\r\nwaiting.<br>\r\n\r\nThe **lscpu** command can help you determine how many CPUs a system has.<br>\r\n\r\nIn the following example, the system is a dual-core single socket system with two hyperthreads per<br>\r\ncore. Roughly speaking, Linux will treat this as a four CPU system for scheduling purposes.<br>\r\n```bash\r\n[user@host ~]$ lscpu\r\nArchitecture:         x86_64\r\nCPU op-mode(s):       32-bit, 64-bit\r\nByte Order:           Little Endian\r\nCPU(s):               4\r\nOn-line CPU(s) list:  0-3\r\nThread(s) per core:   2\r\nCore(s) per socket:   2\r\nSocket(s):            1\r\nNUMA node(s):         1\r\n```\r\nFor a moment, imagine that the only contribution to the load number is from processes that need<br>\r\nCPU time. Then you can divide the displayed load average values by the number of logical CPUs<br>\r\nin the system. A value below 1 indicates satisfactory resource utilization and minimal wait times. A<br>\r\nvalue above 1 indicates resource saturation and some amount of processing delay.<br>\r\n\r\n![](/media/markdownx/a2aaef42-0eee-4d99-a869-dfcb6283cb39.png)\r\n\r\nAn idle CPU queue has a load number of 0. Each process waiting for a CPU adds a count of 1 to<br>\r\nthe load number. If one process is running on a CPU, the load number is one, the resource (the<br>\r\nCPU) is in use, but there are no requests waiting. If that process is running for a full minute, its<br>\r\ncontribution to the one-minute load average will be 1.<br>\r\n\r\nHowever, processes uninterruptibly sleeping for critical I/O due to a busy disk or network resource<br>\r\nare also included in the count and increase the load average. While not an indication of CPU<br>\r\nutilization, these processes are added to the queue count because they are waiting for resources<br>\r\nand cannot run on a CPU until they get them. This is still system load due to resource limitations<br>\r\nthat is causing processes not to run.<br>\r\n\r\nUntil resource saturation, a load average remains below 1, since tasks are seldom found waiting in<br>\r\nqueue. Load average only increases when resource saturation causes requests to remain queued<br>\r\nand are counted by the load calculation routine. When resource utilization approaches 100%, each<br>\r\nadditional request starts experiencing service wait time.<br>\r\n\r\nA number of additional tools report load average, including **w** and **top**.<br>\r\n\r\n##REAL-TIME PROCESS MONITORING\r\nThe **top** program is a dynamic view of the system's processes, displaying a summary header<br>\r\nfollowed by a process or thread list similar to **ps** information. Unlike the static **ps** output, **top**<br>\r\ncontinuously refreshes at a configurable interval, and provides capabilities for column reordering,<br>\r\nsorting, and highlighting. User configurations can be saved and made persistent.<br>\r\n\r\nDefault output columns are recognizable from other resource tools:<br>\r\n\r\n\u2022 The process ID (**PID**).<br>\r\n\r\n\u2022 User name (**USER**) is the process owner.<br>\r\n\r\n\u2022 Virtual memory (**VIRT**) is all memory the process is using, including the resident set, shared<br>\r\nlibraries, and any mapped or swapped memory pages. (Labeled **VSZ** in the **ps** command.)<br>\r\n\r\n\u2022 Resident memory (**RES**) is the physical memory used by the process, including any resident<br>\r\nshared objects. (Labeled **RSS** in the **ps** command.)<br>\r\n\r\n\u2022 Process state (**S**) displays as:<br>\r\n\r\n\u2022 **D** = Uninterruptible Sleeping<br>\r\n\u2022 **R** = Running or Runnable<br>\r\n\u2022 **S** = Sleeping<br>\r\n\u2022 **T** = Stopped or Traced<br>\r\n\u2022 **Z** = Zombie<br>\r\n\r\n\u2022 CPU time (**TIME**) is the total processing time since the process started. May be toggled to<br>\r\ninclude cumulative time of all previous children.<br>\r\n\r\n\u2022 The process command name (**COMMAND**).<br>\r\n\r\n<b>Fundamental Keystrokes in top</b><hr>\r\n\r\n![](/media/markdownx/c0236102-ac12-4b67-9bda-da2ce2a28eb3.png)\r\n![](/media/markdownx/9d31e9c9-7926-43d8-9803-58b7e7bbf6e6.png)\r\n\r\n><b>REFERENCES</b><br><hr>\r\n>**ps**(1), **top**(1), **uptime**(1), and **w**(1) man pages", "order": 7, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 237, "fields": {"title": "GUIDED EXERCISE : MONITORING PROCESS ACTIVITY", "slug": "guided-exercise-monitoring-process-activity", "content": "", "content_md": "In this exercise, you will use the **top** command to dynamically examine running processes<br>\r\nand control them.<br>\r\n\r\n##OUTCOMES\r\nYou should be able to manage processes in real time.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\nOn workstation, run the **lab processes-monitor start** command. The command<br>\r\nruns a start script that determines if the host, servera, is reachable on the network.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-monitor start\r\n```\r\n\r\n<hr>\r\n<b>1.</b> On workstation open two terminal windows side by side. These terminals are referred<br>\r\nto as left and right. On each terminal, use the **ssh** command to log in to servera as the<br>\r\nstudent user.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<b>2.</b> In the left terminal shell, create a new directory called **/home/student/bin**. In the new<br>\r\ndirectory create a shell script called **monitor**. Ensure the script is executable.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Use the **mkdir** command to create a new directory called **/home/student/bin**.\r\n\r\n```bash\r\n[student@servera ~]$ mkdir /home/student/bin\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2. Use the **vim** command to create a script called **monitor** in the **/home/student/bin** directory. Press the **i** key to enter **Vim** interactive mode. Use the **:wq** command to save the file.\r\n\r\n```bash\r\n[student@servera ~]$ vim /home/student/bin/monitor\r\n#!/bin/bash\r\nwhile true; do\r\n    var=1\r\n    while [[ var -lt 50000 ]]; do\r\n      var=$(($var+1))\r\n    done\r\n    sleep 1\r\ndone\r\n```\r\n\r\n>**NOTE**<br><hr>\r\n>The **monitor** script runs until terminated. It generates artificial CPU load by\r\n>performing fifty thousand addition problems. It then sleeps for one second, resets\r\n>the variable, and repeats.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.3. Use the **chmod** command to make the **monitor** file executable.\r\n\r\n```bash\r\n[student@servera ~]$ chmod a+x /home/student/bin/monitor\r\n```\r\n\r\n<b>3.</b> In the right terminal shell, run the **top** utility. Size the window to be as tall as possible.<br>\r\n\r\n![](/media/markdownx/5199107b-e918-4a79-a65d-a09167369394.png)\r\n\r\n<b>4.</b> In the left terminal shell use the **lscpu** command to determine the number of logical CPUs on this virtual machine.\r\n\r\n```bash\r\n[student@servera ~]$ lscpu\r\nArchitecture:        x86_64\r\nCPU op-mode(s):      32-bit, 64-bit\r\nByte Order:          Little Endian\r\nCPU(s): 2\r\n...output omitted...\r\n```\r\n\r\n<b>5.</b> In the left terminal shell, run a single instance of the **monitor** executable. Use the ampersand (&) to run the process in the background.\r\n\r\n```bash\r\n[student@servera ~]$ monitor &\r\n[1] 6071\r\n```\r\n\r\n<b>6.</b> In the right terminal shell, observe the **top** display. Use the single keystrokes **l**, **t**, and **m** to toggle the load, threads, and memory header lines. After observing this behavior, ensure that all headers are displaying.<br>\r\n\r\n<b>7.</b> Note the process ID (PID) for **monitor**. View the CPU percentage for the process, which is<br>\r\nexpected to hover around 15% to 20%.<br>\r\n\r\n![](/media/markdownx/94d44a37-0257-4c01-a85b-91ad5e1c5a5b.png)\r\n\r\nView the load averages. The one minute load average is currently less than a value of 1. The<br>\r\nvalue observed may be affected by resource contention from another virtual machine or<br>\r\nthe virtual host.\r\n\r\n```bash\r\ntop - 12:23:45 up 11 days,  1:09,   3 users,    load average: 0.21, 0.14, 0.05\r\n```\r\n\r\n<b>8.</b> In the left terminal shell, run a second instance of monitor. Use the ampersand (&) to run<br>\r\nthe process in the background.\r\n\r\n```bash\r\n[student@servera ~]$ monitor &\r\n[2] 6498\r\n```\r\n\r\n<b>9.</b> In the right terminal shell, note the process ID (PID) for the second monitor process. View<br>\r\nthe CPU percentage for the process, also expected to hover between 15% and 20%.<br>\r\n\r\n![](/media/markdownx/2165a67c-f59b-41e2-96e7-88e25a8e4a20.png)\r\n\r\nView the one minute load average again, which is still less than 1. It is important to wait for at<br>\r\nleast one minute to allow the calculation to adjust to the new workload.<br>\r\n\r\n```bash\r\ntop - 12:27:39 up 11 days,  1:13,   3 users,    load average: 0.36, 0.25, 0.11\r\n```\r\n\r\n<b>10.</b> In the left terminal shell, run a third instance of **monitor**. Use the ampersand (&) to run the<br>\r\nprocess in the background.\r\n\r\n```bash\r\n[student@servera ~]$ monitor &\r\n[3] 6881\r\n```\r\n\r\n<b>11.</b> In the right terminal shell, note the process ID (PID) for the third monitor process. View<br>\r\nthe CPU percentage for the process, again expected to hover between 15% and 20%.<br>\r\n\r\n![](/media/markdownx/5c704e42-701a-436d-8a26-cbbcbf37cf20.png)\r\n\r\nTo push the load average above 1, you must start more monitor processes. The classroom<br>\r\nsetup has 2 CPUs so only 3 processes are not enough to stress it. Start three more<br>\r\nmonitor processes. View the one minute load average again, which now is expected to be<br>\r\nabove 1. It is important to wait for at least one minute to allow the calculation to adjust to<br>\r\nthe new workload.\r\n```bash\r\n[student@servera ~]$ monitor &\r\n[4] 10708\r\n[student@servera ~]$ monitor &\r\n[5] 11122\r\n[student@servera ~]$ monitor &\r\n[6] 11338\r\n```\r\n```bash\r\ntop - 12:42:32 up 11 days,  1:28,   3 users,    load average: 1.23, 2.50, 1.54\r\n```\r\n<b>12.</b>When finished observing the load average values, terminate each of the monitor processes from within **top**.<br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.1. In the right terminal shell, press **k**. Observe the prompt below the headers and above the columns.\r\n\r\n```bash\r\n...output omitted...\r\nPID to signal/kill [default pid = 11338]\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.2. The prompt has chosen the monitor processes at the top of the list. Press **Enter**<br>\r\nto kill the process.\r\n\r\n```bash\r\n...output omitted...\r\nSend pid 11338 signal [15/sigterm]\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.3. Press **Enter** again to confirm the SIGTERM signal 15.<br>\r\nConfirm that the selected process is no longer observed in **top**. If the PID still remains, repeat these terminating steps, substituting SIGKILL signal 9 when prompted.<br>\r\n\r\n![](/media/markdownx/a07d8d73-1028-445b-abca-625b2279b21a.png)\r\n\r\n<b>13.</b> Repeat the previous step for each remaining **monitor** instance. Confirm that no monitor processes remain in **top**.<br>\r\n\r\n<b>14.</b> In the right terminal shell, press **q** to exit **top**. Exit from **servera** on both terminal windows.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<b>Finish</b><hr>\r\nOn workstation, run the **lab processes-monitor finish** script to complete this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-monitor finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 238, "fields": {"title": "LAB : MONITORING AND MANAGING LINUX PROCESSES", "slug": "lab-monitoring-and-managing-linux-processes", "content": "", "content_md": "##PERFORMANCE CHECKLIST\r\nIn this lab, you will locate and manage processes that are using the most resources on a<br>\r\nsystem.<br>\r\n\r\n##OUTCOMES\r\nYou should be able to manage processes using top as a process management tool.<br>\r\n\r\n##BEFORE YOU BEGIN\r\nLog in to workstation as student using student as the password.<br>\r\n\r\nOn workstation, run the lab processes-review start command. The command<br>\r\nruns a start script to determine whether the host, serverb, is reachable on the network.<br>\r\n```bash\r\n[student@workstation ~]$ lab processes-review start\r\n```\r\n<hr>\r\n<b>1.</b> On workstation, open two terminal windows side by side. In this section, these terminals<br>\r\nare referred to as left and right. On each terminal window, log in to serverb as the student<br>\r\nuser.<br>\r\n\r\nCreate a script called process101, which will generate artificial CPU load. Create the script<br>\r\nin the /home/student/bin directory.\r\n```bash\r\n#!/bin/bash\r\nwhile true; do\r\n    var=1\r\n    while [[ var -lt 50000 ]]; do\r\n      var=$(($var+1))\r\n    done\r\n    sleep 1\r\ndone\r\n```\r\n<b>2.</b>In the right window, run the top utility.<br>\r\n\r\n<b>3. </b>In the left terminal shell, determine the number of logical CPUs on the virtual machine. Run<br>\r\nthe process101 script in the background.<br>\r\n\r\n<b>4.</b> In the right terminal shell, observe the top display. Toggle between load, threads and<br>\r\nmemory. Note the process ID (PID) for process101. View the CPU percentage. It should<br>\r\nhover around 10% to 15%. Ensure that top is showing CPU usage once you have viewed load,<br>\r\nthreads, and memory.<br>\r\n\r\n<b>5.</b> Turn off the use of bold in the display. Save this configuration for reuse when top is restarted.<br>\r\nConfirm that the changes are saved.<br>\r\n\r\n<b>6.</b> Copy the process101 script to a new file called process102. Edit the script to create more<br>\r\nartificial CPU load. Increase the load from fifty thousand to one hundred thousand. Start the<br>\r\nprocess102 process in the background.<br>\r\n\r\n<b>7.</b> In the right terminal shell, confirm that the process is running and using the most CPU<br>\r\nresources. The load should be hovering between 25% and 35%.<br>\r\n\r\n<b>8.</b> The load average is still below 1. Copy process101 to a new script called process103.<br>\r\nIncrease the addition count to eight hundred thousand. Start process103 in the<br>\r\nbackground. Confirm that the load average is above 1. It may take a few minutes for the load<br>\r\naverage to change.<br>\r\n\r\n<b>9.</b> In the left terminal shell, become root. Suspend the process101 process. List the<br>\r\nremaining jobs. Observe that the process state for process101 is now T.<br>\r\n\r\n<b>10.</b> Resume the process101 process.<br>\r\n\r\n<b>11.</b> Terminate process101, process102, and process103 using the command line. Confirm<br>\r\nthat the processes are no longer displayed in top.<br>\r\n\r\n<b>12.</b> In the left terminal shell, exit from the root user. In the right terminal shell stop the top<br>\r\ncommand. Exit from serverb in both windows.<br>\r\n\r\n<b>Evaluation</b><hr>\r\nOn workstation, run the lab processes-review grade script to confirm success on this<br>\r\nexercise.\r\n```bash\r\n[student@workstation ~]$ lab processes-review grade\r\n```\r\n<b>Finish</b><hr>\r\nOn workstation, run the lab processes-review finish script to complete the lab.\r\n```bash\r\n[student@workstation ~]$ lab processes-review finish\r\n```\r\nThis concludes the lab.", "order": 9, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 239, "fields": {"title": "SOLUTION: MONITORING AND MANAGING LINUX PROCESSES", "slug": "solution-monitoring-and-managing-linux-processes", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will locate and manage processes that are using the most resources on a\r\nsystem.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to manage processes using top as a process management tool.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\nOn workstation, run the lab processes-review start command. The command\r\nruns a start script to determine whether the host, serverb, is reachable on the network.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-review start\r\n```\r\n<br>\r\n1. On workstation, open two terminal windows side by side. In this section, these terminals\r\nare referred to as left and right. On each terminal window, log in to serverb as the student\r\nuser.\r\n\r\nCreate a script called process101, which will generate artificial CPU load. Create the script\r\nin the /home/student/bin directory.\r\n\r\n```bash\r\n#!/bin/bash\r\nwhile true; do\r\nvar=1\r\nwhile [[ var -lt 50000 ]]; do\r\nvar=$(($var+1))\r\ndone\r\nsleep 1\r\ndone\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1. On workstation, open two terminal windows side by side. In each terminal, use the\r\nssh command to log in to serverb as the student user.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2. In the left terminal shell, use the mkdir command to create the /home/student/\r\nbin directory.\r\n\r\n```bash\r\n[student@serverb ~]$ mkdir /home/student/bin\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.3. In the left terminal shell, use the vim command to create the process101 script.\r\nPress the i key to enter interactive mode. Type :wq to save the file.\r\n\r\n```bash\r\n[student@serverb ~]$ vim /home/student/bin/process101\r\n#!/bin/bash\r\nwhile true; do\r\nvar=1\r\nwhile [[ var -lt 50000 ]]; do\r\nvar=$(($var+1))\r\ndone\r\nsleep 1\r\ndone\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.4.Use the chmod command to make the process101 file executable.\r\n\r\n```bash\r\n[student@serverb ~]$ chmod +x /home/student/bin/process101\r\n```\r\n<br>\r\n2. In the right window, run the top utility.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. In the right window, run the top utility. Size the window to be as tall as possible.\r\n\r\n![](/media/markdownx/f217d980-58a3-4ebd-8fe4-0e8bb87d1883.png)\r\n<br>\r\n3. In the left terminal shell, determine the number of logical CPUs on the virtual machine. Run\r\nthe process101 script in the background.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Use the grep command to determine the number of logical CPUs.\r\n\r\n```bash\r\n[student@serverb ~]$ grep \"model name\" /proc/cpuinfo | wc -l\r\n2\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. Use the cd command to change into the /home/student/bin directory. Run the process101 script in the background.\r\n\r\n```bash\r\n[student@serverb ~]$ cd /home/student/bin\r\n[student@serverb bin]$ process101 &\r\n[1] 1180\r\n```\r\n<br>\r\n4. In the right terminal shell, observe the top display. Toggle between load, threads and\r\nmemory. Note the process ID (PID) for process101. View the CPU percentage. It should\r\nhover around 10% to 15%. Ensure that top is showing CPU usage once you have viewed load,\r\nthreads, and memory.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Press Shift+m.\r\n\r\n![](/media/markdownx/d0eed665-263d-4952-8c8b-cf33f88f4833.png)\r\n\r\n![](/media/markdownx/437a2851-fef4-4686-b223-dbaa6dadda0d.png)\r\n\r\n>**NOTE**<br><hr>\r\n>Note that when top is switched into memory mode, process101 is no longer the\r\n>first process. You can press Shift+p to return to CPU usage.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2. Press m.\r\n\r\n![](/media/markdownx/a0b9fdc3-4242-40e1-b5e1-a9cbbd576db8.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.3. Press t.\r\n\r\n![](/media/markdownx/2a2734b8-0f39-43e6-94b2-bc3963110fbe.png)\r\n\r\n![](/media/markdownx/727d4d18-6e47-4bfe-be76-4ec1a7550f47.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.4. Press Shift+p.\r\n\r\n![](/media/markdownx/79cb9c80-61b4-4b89-a0db-b85ec26ac089.png)\r\n<br>\r\n5. Turn off the use of bold in the display. Save this configuration for reuse when top is restarted.\r\nConfirm that the changes are saved.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1. Press Shift+b to switch the use of bold off.\r\n\r\n![](/media/markdownx/e3991ef6-71c9-4fd3-b64e-1b6d96669ecd.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2. Press Shift+w to save this configuration. The default configuration is stored in toprc\r\nbeneath the /home/student/.config/procps directory. In the left terminal shell,\r\nconfirm that the toprc file exists.\r\n\r\n```bash\r\n[student@serverb bin]$ ls -l /home/student/.config/procps/toprc\r\n-rw-rw-r--. 1 student student 966 Feb 18 19:45 /home/student/.config/\r\nprocps/toprc\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.3. In the right terminal shell, exit top, and then restart it. Confirm that the new display uses the saved configuration.\r\n\r\n![](/media/markdownx/6173ed46-aebe-4dd6-a8c4-1ccad8c4652c.png)\r\n\r\n<br>\r\n6. Copy the process101 script to a new file called process102. Edit the script to create more\r\nartificial CPU load. Increase the load from fifty thousand to one hundred thousand. Start the\r\nprocess102 process in the background.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. In the left terminal shell, use the cp command to copy process101 to process102.\r\n\r\n```bash\r\n[student@serverb bin]$ cp process101 process102\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2. Use the vim command to edit the process102 script. Increase the addition problems\r\nfrom fifty thousand to one hundred thousand. Enter interactive mode by using the i.\r\n\r\n![](/media/markdownx/152d00ae-a986-4fff-9164-1fafcb4c7511.png)\r\n\r\n![](/media/markdownx/8cd5c64b-c7d5-4fd2-8e11-b36760e050ac.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.3. Start the process102 process in the background.\r\n\r\n```bash\r\n[student@serverb bin]$ process102 &\r\n[2] 20723\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.4. Use the jobs command to confirm that both processes are running in the background.\r\n\r\n![](/media/markdownx/5eeeeb61-6244-4964-a2a3-97e86358138b.png)\r\n\r\n<br>\r\n7. In the right terminal shell, confirm that the process is running and using the most CPU\r\nresources. The load should be hovering between 25% and 35%.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.1. In the right terminal shell, confirm that the process is running and using the most CPU\r\nresources. The load should be hovering between 25% and 35%.\r\n\r\n![](/media/markdownx/a952630e-d48a-4ae4-8b86-6a398a72b24e.png)\r\n\r\n>**NOTE**<br>\r\n>If you do not see process101 and process102 at the top of the process list, press\r\n>Shift+p to ensure that top is sorted by CPU utilization.\r\n<br>\r\n\r\n8. The load average is still below 1. Copy process101 to a new script called process103.\r\nIncrease the addition count to eight hundred thousand. Start process103 in the\r\nbackground. Confirm that the load average is above 1. It may take a few minutes for the load\r\naverage to change.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1. In the right terminal shell, confirm that the load average is below 1.\r\n\r\n![](/media/markdownx/01bdfedc-e015-4e5c-ad9c-e55c42cf1728.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2. In the left terminal shell, use the cp command to copy process101 to a new script called process103.\r\n\r\n```bash\r\n[student@serverb bin]$ cp process101 process103\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3. In the left terminal shell, use the vim command to edit the process103 script.\r\nIncrease the addition count to eight hundred thousand. Enter interactive mode using\r\nthe i key. Type :wq to save the file.\r\n\r\n```bash\r\n[student@serverb bin]$ vim process103\r\n#!/bin/bash\r\nwhile true; do\r\nvar=1\r\nwhile [[ var -lt 800000 ]]; do\r\nvar=$(($var+1))\r\ndone\r\nsleep 1\r\ndone\r\n ```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.4. Start process103 in the background. The CPU usage hovers between 60% and 85%.\r\n```bash\r\n[student@serverb bin]$ process103 &\r\n[3] 22751\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.5. Confirm that all three jobs are running in the background.\r\n\r\n![](/media/markdownx/3a34acc0-1f81-409c-a036-5a7e205d0e29.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.6 In the right terminal window confirm that the load average is above 1.\r\n\r\n![](/media/markdownx/33e7dbc9-df59-4ae2-8dbe-c6baf7ea6a19.png)\r\n<br>\r\n9. In the left terminal shell, become root. Suspend the process101 process. List the\r\nremaining jobs. Observe that the process state for process101 is now T.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1. Use the su - command to become root. The password is redhat.\r\n\r\n```bash\r\n[student@serverb bin]$ su -\r\nPassword: redhat\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.2. Use the pkill command with the -SIGSTOP option to suspend the process101\r\nprocess.\r\n\r\n```bash\r\n[root@serverb ~]# pkill -SIGSTOP process101\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.3. In the right terminal shell confirm that process101 is no longer running.\r\n\r\n![](/media/markdownx/96aeb943-5924-4e0d-88b0-15d23bf7763f.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.4 In the left terminal shell run the ps jT command to view the remaining jobs.\r\n\r\n![](/media/markdownx/9c13fa8b-ab4c-499e-85a7-2e5e6cf4a012.png)\r\n\r\nNote that process101 has a status of T. This denotes that the process is currently\r\nsuspended.\r\n<br>\r\n10. Resume the process101 process.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.1. In the left terminal shell use the pkill command with the -SIGCONT option to resume the process101 process.\r\n\r\n```bash\r\n[root@serverb ~]# pkill -SIGCONT process101\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.2. In the right terminal shell confirm that the process is running again.\r\n\r\n![](/media/markdownx/24259f3b-09fd-43c5-95da-6e69c9eed9e3.png)\r\n<br>\r\n11. Terminate process101, process102, and process103 using the command line. Confirm\r\nthat the processes are no longer displayed in top.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.1. In the left terminal shell, use the pkill command terminate process101, process102, and process103.\r\n\r\n```bash\r\n[root@serverb ~]# pkill process101\r\n[root@serverb ~]# pkill process102\r\n[root@serverb ~]# pkill process103\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.2. In the right terminal shell, confirm that the processes no longer appear in top.\r\n\r\n![](/media/markdownx/8ba3b739-116c-4017-a457-b32168064ccf.png)\r\n\r\n![](/media/markdownx/cf4ec7b6-6639-414a-9e36-60ffaab2cb0b.png)\r\n<br>\r\n12. In the left terminal shell, exit from the root user. In the right terminal shell stop the top\r\ncommand. Exit from serverb in both windows.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.1. Use the exit command to log out from the root user.\r\n\r\n![](/media/markdownx/853575c9-6b53-4b1f-a0e5-e2ba01506028.png)\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.2. Exit from all terminal windows.\r\n\r\n```bash\r\n[student@serverb bin]$ exit\r\n[student@workstation ~]$\r\n```\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.3. In the right terminal shell, press q to quit top. Use the exit command to log out.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<br>\r\n##Evaluation<br>\r\nOn workstation, run the lab processes-review grade script to confirm success on this\r\nexercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-review grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run the lab processes-review finish script to complete the lab.\r\n\r\n```bash\r\n[student@workstation ~]$ lab processes-review finish\r\n```\r\n\r\n<br>\r\nThis concludes the lab.", "order": 10, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 240, "fields": {"title": "SUMMARY", "slug": "summary-7", "content": "", "content_md": "##SUMMARY\r\n\r\nIn this chapter, you learned:<br>\r\n\r\n\u2022 A process is a running instance of an executable program. Processes are assigned a state, which<br>\r\n  can be running, sleeping, stopped, or zombie. The ps command is used to list processes.<br>\r\n\r\n\u2022 Each terminal is its own session and can have foreground process and independent background<br>\r\n  processes. The jobs command displays processes within a terminal session.<br>\r\n\r\n\u2022 A signal is a software interrupt that reports events to an executing program. The kill, pkill,<br>\r\n  and killall commands use signals to control processes.<br>\r\n\r\n\u2022 Load average is an estimate of how busy the system is. To display load average values, you can<br>\r\n  use the top, uptime, or w command.", "order": 11, "is_visible": true, "is_task": false, "module": 34, "draft": false, "files": []}}, {"model": "courses.section", "pk": 241, "fields": {"title": "IDENTIFYING AUTOMATICALLY STARTED SYSTEM PROCESSES", "slug": "identifying-automatically-started-system-processes", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to list system daemons and network services\r\nstarted by systemd service and socket units.\r\n\r\n\r\n##INTRODUCTION TO systemd <br>\r\nThe systemd daemon manages startup for Linux, including service startup and service\r\nmanagement in general. It activates system resources, server daemons, and other processes both\r\nat boot time and on a running system.\r\n\r\n\r\nDaemons are processes that either wait or run in the background, performing various tasks.\r\nGenerally, daemons start automatically at boot time and continue to run until shutdown or until\r\nthey are manually stopped. It is a convention for names of many daemon programs to end in the\r\nletter **d**.\r\n\r\n\r\nA service in the systemd sense often refers to one or more daemons, but starting or stopping a\r\nservice may instead make a one-time change to the state of the system, which does not involve\r\nleaving a daemon process running afterward (called oneshot).\r\n\r\n\r\nIn Red Hat Enterprise Linux, the first process that starts (PID 1) is systemd. A few of the features\r\nprovided by systemd include:\r\n* Parallelization capabilities (starting multiple services simultaneously), which increase the boot\r\nspeed of a system.\r\n* On-demand starting of daemons without requiring a separate service.\r\n* Automatic service dependency management, which can prevent long timeouts. For example, a\r\nnetwork-dependent service will not attempt to start up until the network is available.\r\n* A method of tracking related processes together by using Linux control groups.\r\n\r\n\r\n##DESCRIBING SERVICE UNITS<br>\r\nsystemd uses units to manage different types of objects. Some common unit types are listed\r\nbelow:\r\n* Service units have a .service extension and represent system services. This type of unit is\r\nused to start frequently accessed daemons, such as a web server.\r\n* Socket units have a .socket extension and represent inter-process communication (IPC)\r\nsockets that systemd should monitor. If a client connects to the socket, systemd will start a\r\ndaemon and pass the connection to it. Socket units are used to delay the start of a service at\r\nboot time and to start less frequently used services on demand.\r\n* Path units have a .path extension and are used to delay the activation of a service until\r\na specific file system change occurs. This is commonly used for services which use spool\r\ndirectories such as a printing system.\r\n\r\n\r\nThe systemctl command is used to manage units. For example, display available unit types with\r\nthe systemctl -t help command \r\n\r\n*IMPORTANT<br>\r\nWhen using systemctl, you can abbreviate unit names, process tree entries, and\r\nunit descriptions.\r\n\r\n##LISTING SERVICE UNITS<br>\r\nYou use the systemctl command to explore the current state of the system. For example, the\r\nfollowing command lists all currently loaded service units, paginating the output using less.\r\n\r\n```bash\r\n[root@host ~]# systemctl list-units --type=service\r\nUNIT\t\t\tLOAD\tACTIVATE  SUB\t    DESCRIPTION\r\natd.service\t\tloaded\tactivate  running   Job spooling tools\r\nauditd.service\t\tloaded\tactivate  running   Security Auditing Service\r\nchronyd.service\t\tloaded\tactivate  running   NTP client/server\r\ncrond.service\t\tloaded\tactivate  running   Command Scheduler\r\ndbus.service\t\tloaded\tactivate  running  D-Bus System Message Bus\r\n...output omitted...\r\n```\r\n\r\nThe above output limits the type of unit listed to service units with the --type=service option.\r\nThe output has the following columns:\r\n\r\nColumns in the systemctl list-units Command Output\r\n\r\n```\r\nUNIT\r\n\tThe service unit name.\r\n\r\nLOAD\r\n\tWhether systemd properly parsed the unit's configuration and loaded the unit into memory.\r\n\r\nACTIVE\r\n\tThe high-level activation state of the unit. This information indicates whether the unit has\r\n\tstarted successfully or not.\r\n\r\nSUB\r\n\tThe low-level activation state of the unit. This information indicates more detailed information\r\n\tabout the unit. The information varies based on unit type, state, and how the unit is executed.\r\n\r\nDESCRIPTION\r\n\tThe short description of the unit.\r\n\tBy default, the systemctl list-units --type=service command lists only the service\r\n\tunits with active activation states. The --all option lists all service units regardless of the\r\n\tactivation states. Use the --state= option to filter by the values in the LOAD, ACTIVE, or SUB\r\n\tfields.\r\n\r\n```\r\n\r\n![](/media/markdownx/37bd233b-1031-4648-a3f5-36d8b8500275.png)\r\n\r\n\r\nThe systemctl command without any arguments lists units that are both loaded and active.\r\n\r\n![](/media/markdownx/6a828136-abf5-4597-9726-7ccd64508363.png)\r\n\r\nThe systemctl list-units command displays units that the systemd service attempts to\r\nparse and load into memory; it does not display installed, but not enabled, services. To see the\r\nstate of all unit files installed, use the systemctl list-unit-files command. For example:\r\n\r\n```bash\r\n[root@host ~]# systemctl list-unit-files --type=service\r\nUNIT FILE\t\t\tSTATE\r\narp-ethers.service\t\tdisabled\r\natd.service\t\t\tenabled\t\t\r\nauditd.service\t\t\tenabled\r\nauth-rpcgss-module.service\tstatic\r\nautovt@.service\t\t\tenabled\r\nblk-availability.service\tdisabled\r\n...output omitted...\r\n```\r\n\r\nIn the output of the systemctl list-units-files command, valid entries for the STATE\r\nfield are enabled, disabled, static, and masked.\r\n\r\n\r\n##VIEWING SERVICE STATES<br>\r\nView the status of a specific unit with systemctl status name.type. If the unit type is not\r\nprovided, systemctl will show the status of a service unit, if one exists.\r\n\r\n```bash\r\n[root@host ~]# systemctl status sshd.service\r\n\u25cf sshd.service - OpenSSH server daemon\r\nLoaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\r\nActive: active (running) since Thu 2019-02-14 12:07:45 IST; 7h ago\r\nMain PID: 1073 (sshd)\r\nCGroup: /system.slice/sshd.service\r\n\t\u2514\u25001073 /usr/sbin/sshd -D ...\r\n\r\n```\r\n\r\nThis command displays the current status of the service. The meaning of the fields are:\r\n\r\nService Unit Information :\r\n\r\n![](/media/markdownx/9700b9f4-0833-4328-8e76-00ff771c106a.png)\r\n\r\nSeveral keywords indicating the state of the service can be found in the status output:\r\n\r\n\r\nService States in the Output of systemctl \r\n\r\n![](/media/markdownx/87c5ef93-1272-4133-8c67-10bf2c371743.png)\r\n\r\n\r\n* NOTE<br>\r\nThe systemctl status NAME command replaces the service NAME status\r\ncommand used in Red Hat Enterprise Linux 6 and earlier.\r\n\r\n##VERIFYING THE STATUS OF A SERVICE<br>\r\nThe systemctl command provides methods for verifying the specific states of a service. For\r\nexample, use the following command to verify that the a service unit is currently active (running):\r\n```bash\r\n[root@host ~]# systemctl is-active sshd.service\r\nactive\r\n```\r\n\r\n\r\nThe command returns state of the service unit, which is usually active or inactive.\r\nRun the following command to verify whether a service unit is enabled to start automatically\r\nduring system boot:\r\n```bash\r\n[root@host ~]# systemctl is-enabled sshd.service\r\nenabled\r\n```\r\n\r\n\r\nThe command returns whether the service unit is enabled to start at boot time, which is usually\r\nenabled or disabled.<br>\r\nTo verify whether the unit failed during startup, run the following command:\r\n```bash\r\n[root@host ~]# systemctl is-failed sshd.service\r\nactive\r\n```\r\n\r\n\r\nThe command either returns active if it is properly running or failed if an error has occurred\r\nduring startup. In case the unit was stopped, it returns unknown or inactive.<br>\r\nTo list all the failed units, run the systemctl --failed --type=service command.\r\n\r\n>**REFERENCES**<br>\r\n>systemd(1), systemd.unit(5), systemd.service(5), systemd.socket(5), and systemctl(1) man >pages\r\n\r\n>For more information, refer to the Managing services with systemd chapter in the\r\n>Red Hat Enterprise Linux 8.0 Configuring basic system system settings at\r\n>`https://access.redhat/com/documentation-en/us_red_hat_enterprise/linux/8-html/single_configuring_basic_settings/with-managing-services-systemd_configuring-basic-system-settings#managing-services-with-systemd_configuring-basic-system-settings`", "order": 1, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 242, "fields": {"title": "GUIDED EXERCISE : IDENTIFYING AUTOMATICALLY STARTED SYSTEM PROCESSES", "slug": "guided-exercise-1", "content": "", "content_md": "#IDENTIFYING AUTOMATICALLYSTARTED SYSTEM PROCESSES\r\n\r\n\r\nIn this exercise, you will list installed service units and identify which services are currently\r\nenabled and active on a server.\r\n\r\n##OUTCOMES <br>\r\nYou should be able to list installed service units and identify active and enabled services on\r\nthe system.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\nFrom workstation, run the lab services-identify start command. The command\r\nruns a start script that determines if the host, servera, is reachable on the network.\r\n```bash\r\n[student@workstation ~]$ lab services-identify start\r\n```\r\n\r\n* 1.Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, therefore a password is not required to log\r\nin to servera.\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.List all service units installed on servera.\r\n\r\n![](/media/markdownx/7d3d49fe-de82-4a8d-bbdc-71c54877b7b3.png)\r\n\r\n\r\nPress q to exit the command.\r\n\r\n* 3.List all socket units, active and inactive, on servera.\r\n\r\n![](/media/markdownx/9833d25a-76a9-4067-8f4e-97216f675504.png)\r\n\r\n* 4.Explore the status of the chronyd service. This service is used for network time\r\nsynchronization (NTP).\r\n\r\n\t* 4.1. Display the status of the chronyd service. Note the process ID of any active daemon.\r\n\r\n![](/media/markdownx/2e8ac009-9324-402f-8497-35763a2cdffe.png)\r\nPress q to exit the command.\r\n\t* 4.2. Confirm that the listed daemon is running. In the preceding command, the output\r\nof the process ID associated with the chronyd service is 680. The process ID might\r\ndiffer on your system.\t\r\n\r\n```bash\r\n[student@servera ~]$ ps -p 680\r\nPID TTY   TIME     CMD\r\n680 ?     00:00:00 chronyd\r\n\r\n```\r\n\r\n* 5.Explore the status of the sshd service. This service is used for secure encrypted communication between systems.\r\n\r\n* 5.1.Determine if the sshd service is active without displaying all of the status information.\r\n```bash\r\n[student@servera ~]$ systemctl is-enabled sshd\r\nenabled\r\n```\r\n\r\n* 5.2.Determine if the sshd service is active without displaying all of the status information.\r\n```bash\r\n[student@servera ~]$ systemctl is-active sshd\r\nactive\r\n```\r\n\r\n* 5.3.Display the status of the sshd service.\r\n![](/media/markdownx/6edccf4a-5690-46a5-9efa-3a6360d997ee.png)\r\n\r\nPress q to exit the command.\r\n\r\n* 6.List the enabled or disabled states of all service units.\r\n\r\n![](/media/markdownx/a4ea58ff-7c0e-436b-9383-bd8071c08eb5.png)\r\n\r\nPress q to exit the command.\r\n\r\n* 7.Exit from servera.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run the lab services-identify finish script to complete this exercise.\r\n```bash\r\n[student@workstation ~]$ lab services-identify finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 2, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 243, "fields": {"title": "CONTROLLING SYSTEM SERVICES", "slug": "controlling-system-services", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to control system daemons and network services,\r\nusing systemctl.\r\n\r\n\r\n##STARTING AND STOPPING SERVICES<br>\r\nServices need to be stopped or started manually for a number of reasons: perhaps the service\r\nneeds to be updated; the configuration file may need to be changed; or a service may need to be\r\nuninstalled; or an administrator may manually start an infrequently used service.\r\n\r\n\r\nTo start a service, first verify that it is not running with systemctl status. Then, use the\r\nsystemctl start command as the root user (using sudo if necessary). The example below\r\nshows how to start the sshd.service service:\r\n```bash\r\n[root@host ~]# systemctl start sshd.service\r\n```\r\n\r\nThe systemd service looks for .service files for service management in commands in the\r\nabsence of the service type with the service name. Thus the above command can be executed as:\r\n```bash\r\n[root@host ~]# systemctl start sshd\r\n```\r\n\r\nTo stop a currently running service, use the stop argument with the systemctl command. The\r\nexample below shows how to stop the sshd.service service:\r\n```bash\r\n[root@host ~]# systemctl stop sshd.service\r\n```\r\n\r\n\r\n##RESTARTING AND RELOADING SERVICES<br>\r\nDuring a restart of a running service, the service is stopped and then started. On the restart\r\nof service, the process ID changes and a new process ID gets associated during the startup.\r\nTo restart a running service, use the restart argument with the systemctl command. The\r\nexample below shows how to restart the sshd.service service:\r\n```bash\r\n[root@host ~]# systemctl restart sshd.service\r\n```\r\n\r\n\r\nSome services have the ability to reload their configuration files without requiring a restart. This\r\nprocess is called a service reload. Reloading a service does not change the process ID associated\r\nwith various service processes. To reload a running service, use the reload argument with the\r\nsystemctl command. The example below shows how to reload the sshd.service service after\r\nconfiguration changes:\r\n```bash\r\n[root@host ~]# systemctl reload sshd.service\r\n\r\n```\r\n\r\nIn case you are not sure whether the service has the functionality to reload the configuration\r\nfile changes, use the reload-or-restart argument with the systemctl command. The\r\ncommand reloads the configuration changes if the reloading functionality is available. Otherwise,\r\nthe command restarts the service to implements the new configuration changes:\r\n```bash\r\n[root@host ~]# systemctl reload-or-restart sshd.service\r\n```\r\n\r\n##LISTING UNIT DEPENDENCIES<br>\r\nSome services require that other services be running first, creating dependencies on the other\r\nservices. Other services are not started at boot time but rather only on demand. In both cases,\r\nsystemd and systemctl start services as needed whether to resolve the dependency or to\r\nstart an infrequently used service. For example, if the CUPS print service is not running and a\r\nfile is placed into the print spool directory, then the system will start CUPS-related daemons or\r\ncommands to satisfy the print request.\r\n```bash\r\n[root@host ~]# systemctl stop cups.service\r\nWarning: Stopping cups, but it can still be activated by:\r\n  cups.path\r\n  cups.socket\r\n```\r\n\r\n\r\nTo completely stop printing services on a system, stop all three units. Disabling the service disables\r\nthe dependencies.<br>\r\nThe systemctl list-dependencies UNIT command displays a hierarchy mapping of\r\ndependencies to start the service unit. To list reverse dependencies (units that depend on the\r\nspecified unit), use the --reverse option with the command.\r\n\r\n```bash\r\n[root@host ~]# systemctl list-dependencies sshd.service\r\nsshd.service\r\n\u25cf \u251c\u2500system.slice\r\n\u25cf \u251c\u2500sshd-keygen.target\r\n\u25cf \u2502 \u251c\u2500sshd-keygen@ecdsa.service\r\n\u25cf \u2502 \u251c\u2500sshd-keygen@ed25519.service\r\n\u25cf \u2502 \u2514\u2500sshd-keygen@rsa.service\r\n\u25cf \u2514\u2500sysinit.target\r\n...output omitted...\r\n```\r\n\r\n##MASKING AND UNMASKING SERVICES<br>\r\nAt times, a system may have different services installed that are conflicting with each other.\r\nFor example, there are multiple methods to manage mail servers (postfix and sendmail, for\r\nexample). Masking a service prevents an administrator from accidentally starting a service that\r\nconflicts with others. Masking creates a link in the configuration directories to the /dev/null file\r\nwhich prevents the service from starting.\r\n```bash\r\n[root@host ~]# systemctl mask sendmail.service\r\nCreated symlink /etc/systemd/system/sendmail.service \u2192 /dev/null.\r\n```\r\n\r\n```bash\r\n[root@host ~]# systemctl list-unit-files --type=service\r\nUNIT FILE                       STATE\r\n...output omitted...             \r\nsendmail.service                masked\r\n...output omitted...\r\n```\r\n\r\nAttempting to start a masked service unit fails with the following output:\r\n```bash\r\n[root@host ~]# systemctl start sendmail.service\r\nFailed to start sendmail.service: Unit sendmail.service is masked.\r\n```\r\n\r\n\r\nUse the systemctl unmask command to unmask the service unit.\r\n```bash\r\n[root@host ~]# systemctl unmask sendmail\r\nRemoved /etc/systemd/system/sendmail.service.\r\n```\r\n\r\n>**IMPORTANT**<br>\r\n>A disabled service can be started manually or by other unit files but it does not start\r\n>automatically at boot. A masked service does not start manually or automatically.\r\n\r\n##ENABLING SERVICES TO START OR STOP AT BOOT<br>\r\nStarting a service on a running system does not guarantee that the service automatically starts\r\nwhen the system reboots. Similarly, stopping a service on a running system does not keep it from\r\nstarting again when the system reboots. Creating links in the systemd configuration directories\r\nenables the service to start at boot. The systemctl commands creates and removes these links.\r\n\r\n\r\nTo start a service at boot, use the systemctl enable command.\r\n\r\n```bash\r\n[root@root ~]# systemctl enable sshd.service\r\nCreated symlink /etc/systemd/system/multi-user.target.wants/sshd.service \u2192 /usr/lib/systemd/system/sshd.service.\r\n```\r\n\r\nThe above command creates a symbolic link from the service unit file, usually in the /usr/lib/\r\nsystemd/system directory, to the location on disk where systemd looks for files, which is in the\r\n/etc/systemd/system/TARGETNAME.target.wants directory. Enabling a service does not\r\nstart the service in the current session. To start the service and enable it to start automatically\r\nduring boot, execute both the systemctl start and systemctl enable commands.\r\n\r\n\r\nTo disable the service from starting automatically, use the following command, which removes\r\nthe symbolic link created while enabling a service. Note that disabling a service does not stop the\r\nservice.\r\n\r\n```bash\r\n[root@host ~]# systemctl disable sshd.service\r\nRemoved /etc/systemd/system/multi-user.target.wants/sshd.service.\r\n```\r\n\r\nTo verify whether the service is enabled or disable, use the systemctl is-enabled command.\r\n\r\n##SUMMARY OF systemctl COMMANDS<br>\r\nServices can be started and stopped on a running system and enabled or disabled for an\r\nautomatic start at boot time.\r\n\r\n\r\nUseful Service Management Commands\r\n![](/media/markdownx/d45a3e60-6326-4e56-83d7-7b20fc51376d.png)\r\n\r\n>**REFERENCES**<br>\r\n>systemd(1), systemd.unit(5), systemd.service(5), systemd.socket(5),\r\n>and systemctl(1) man pages\r\n\r\n>For more information, refer to the Managing services with systemd chapter in the\r\n>Red Hat Enterprise Linux 8.0 Configuring basic system settings at `https://access.redhat.com>/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/managing-services-with-systemd_configuring-basic-system-settings#managing-system-services_managing-services-with-systemd`", "order": 3, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 244, "fields": {"title": "GUIDED EXERCISE : CONTROLLING SYSTEM SERVICES", "slug": "guided-exercise-controlling-system-services", "content": "", "content_md": "In this exercise, you will use systemctl to stop, start, restart, reload, enable, and disable a\r\nsystemd-managed service.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to use the systemctl command to control systemd-managed services.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\nFrom workstation, run the lab services-control start command. The command\r\nruns a start script that determines whether the host, servera, is reachable on the network.\r\n\r\n\r\nThe script also ensures that the sshd and chronyd services are running on servera.\r\n```bash\r\n[student@workstation ~]$ lab services-control start\r\n```\r\n\r\n* 1.Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, and therefore a password is not required.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Execute the systemctl restart and systemctl reload commands on the sshd\r\nservice. Observe the different results of executing these commands.\r\n\r\n* 2.1.Display the status of the sshd service. Note the process ID of the sshd daemon.\r\n\r\n```bash\r\n[student@servera ~]$ systemctl status sshd\r\n\u25cf sshd.service - OpenSSH server daemon\r\nLoaded: loaded (/usr/lib/systemd/system/sshd.service; enabled;\r\nvendor preset: enabled)\r\nActive: active (running) since Wed 2019-02-06 23:50:42 EST; 9min ago\r\n      Docs: man:sshd(8)\r\n            man:sshd_config(5)\r\n  Main PID: 759 (sshd)\r\n            Tasks: 1 (limit: 11407)\r\n            Memory: 5.9M\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 2.2.Restart the sshd service and view the status. The process ID of the daemon must\r\nchange.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl restart sshd\r\n[sudo] password for student: student\r\n[student@servera ~]$ systemctl status sshd\r\n\u25cf sshd.service - OpenSSH server daemon\r\nLoaded: loaded (/usr/lib/systemd/system/sshd.service; enabled;\r\nvendor preset: enabled)\r\nActive: active (running) since Wed 2019-02-06 23:50:42 EST; 9min ago\r\n        Docs: man:sshd(8)\r\n              man:sshd_config(5)\r\n    Main PID: 1132 (sshd)\r\n              Tasks: 1 (limit: 11407)\r\n              Memory: 5.9M\r\n```\r\n\r\nIn the preceding output, notice that the process ID changed from 759 to 1132 (on\r\nyour system, the numbers likely will be different). Press q to exit the command.\r\n\r\n* 2.3. Reload the sshd service and view the status. The process ID of the daemon must\r\nnot change and connections are not interrupted.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl reload sshd\r\n[student@servera ~]$ systemctl status sshd\r\n\u25cf sshd.service - OpenSSH server daemon\r\nLoaded: loaded (/usr/lib/systemd/system/sshd.service; enabled;\r\nvendor preset: enabled)\r\nActive: active (running) since Wed 2019-02-06 23:50:42 EST; 9min ago\r\n       Docs: man:sshd(8)\r\n             man:sshd_config(5)\r\n   Main PID: 1132 (sshd)\r\n             Tasks: 1 (limit: 11407)\r\n             Memory: 5.9M\r\n\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 3.Verify that the chronyd service is running.\r\n\r\n```bash\r\n[student@servera ~]$ systemctl status chronyd\r\n\u25cf chronyd.service - NTP client/server\r\n   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled; vendor\r\npreset: enabled)\r\n   Active: active (running) since Wed 2019-02-06 23:50:38 EST; 1h 25min ago\r\n...output omitted...\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 4.Stop the chronyd service and view the status.\r\n```bash\r\n[student@servera ~]$ sudo systemctl stop chronyd\r\n[student@servera ~]$ systemctl status chronyd\r\n\u25cf chronyd.service - NTP client/server\r\n   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled; vendor\r\n  preset: enabled)\r\n   Active: inactive (dead) since Thu 2019-02-07 01:20:34 EST; 44s ago\r\n...output omitted...\r\n... servera.lab.example.com chronyd[710]: System clock wrong by 1.349113\r\n  seconds, adjustment started\r\n... servera.lab.example.com systemd[1]: Stopping NTP client/server...\r\n... servera.lab.example.com systemd[1]: Stopped NTP client/server.\r\n\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 5.Determine if the chronyd service is enabled to start at system boot.\r\n\r\n```bash\r\n[student@server ~]$ systemctl is-enabled chronyd\r\nenabled\r\n```\r\n\r\n* 6.Reboot servera, then view the status of the chronyd service.\r\n```bash\r\n[student@servera ~]$ sudo systemctl reboot\r\nConnection to servera closed by remote host.\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\nLog in as the student user on servera and view the status of the chronyd service.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$ systemctl status chronyd\r\n\u25cf chronyd.service - NTP client/server\r\n   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled; vendor\r\npreset: enabled)\r\n   Active: active (running) since Thu 2019-02-07 01:48:26 EST; 5min ago\r\n   ...output omitted...\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 7.Disable the chronyd service so that it does not start at system boot, then view the status\r\nof the service.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl disable chronyd\r\n[sudo] password for student: student\r\nRemoved /etc/systemd/system/multi-user.target.wants/chronyd.service.\r\n[student@servera ~]$ systemctl status chronyd\r\n\u25cf chronyd.service - NTP client/server\r\n   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; disabled; vendor\r\npreset: enabled)\r\n   Active: active (running) since Thu 2019-02-07 01:48:26 EST; 5min ago\r\n   ...output omitted...\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n* 8.Reboot servera, then view the status of the chronyd service.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl reboot\r\nConnection to servera closed by remote host.\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\nLog in as the student user on servera and view the status of the chronyd service.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$ systemctl status chronyd\r\n\u25cf chronyd.service - NTP client/server\r\n   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; disabled; vendor\r\npreset: enabled)\r\n   Active: inactive (dead)\r\n   Docs: man:chronyd(8)\r\n   man:chrony.conf(5)\r\n```\r\n\r\n* 9.Exit from servera.\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run the lab services-control finish script to complete this exercise.\r\n```bash\r\n[student@workstation ~]$ lab services-control finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 245, "fields": {"title": "LAB : CONTROLLING SERVICES AND DAEMONS", "slug": "lab-controlling-services-and-daemons", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will configure several services to be enabled or disabled, running or stopped,\r\nbased on a specification that is provided to you.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to enable, disable, start, and stop services.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\nFrom workstation, run the lab services-review start command. The command\r\nruns a start script that determines whether the host, serverb, is reachable on the network.\r\n\r\n\r\nThe script also ensures that the psacct and rsyslog services are configured appropriately\r\non serverb.\r\n```bash\r\n[student@workstation ~]$ lab services-review start\r\n```\r\n\r\n* 1.On serverb, start the psacct service.\r\n* 2.Configure the psacct service to start at system boot.\r\n* 3.Stop the rsyslog service.\r\n* 4.Configure the rsyslog service so that it does not start at system boot.\r\n* 5.Reboot serverb before evaluating the lab.\r\n\r\n###Evaluation<br>\r\nOn workstation, run the lab services-review grade script to confirm success on this lab.\r\n```bash\r\n[student@workstation ~]$ lab services-review grade\r\nFinish\r\n```\r\n\r\n\r\nOn workstation, run the lab services-review finish script to complete this lab.\r\n```bash\r\n[student@workstation ~]$ lab services-review finish\r\n```\r\n\r\nThis concludes the lab.", "order": 5, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 246, "fields": {"title": "SOLUTION: CONTROLLING SERVICES AND DAEMONS", "slug": "solution", "content": "", "content_md": "### PERFORMANCE CHECKLIST\r\nIn this lab, you will configure several services to be enabled or disabled, running or stopped,\r\nbased on a specification that is provided to you.  \r\n###OUTCOMES\r\nYou should be able to enable, disable, start, and stop services.\r\n###BEFORE YOU BEGIN  \r\nLog in as the student user on workstation using student as the password.\r\nFrom workstation, run the lab services-review start command. The command\r\nruns a start script that determines whether the host, serverb, is reachable on the network.\r\nThe script also ensures that the psacct and rsyslog services are configured appropriately\r\non serverb\r\n```bash\r\n[student@workstation ~]$ lab services-review start\r\n```  \r\n1. On serverb, start the psacct service.  \r\n1.1. Use the ssh command to log in to serverb as the student user.\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```  \r\n1.2. Use the systemctl command to verify the status of the psacct service. Notice that  \r\npsacct is stopped and disabled to start at boot time.  \r\n```bash\r\n[student@serverb ~]$ systemctl status psacct\r\n\u25cf psacct.service - Kernel process accounting\r\nLoaded: loaded (/usr/lib/systemd/system/psacct.service; disabled;\r\nvendor preset: disabled)\r\nActive: inactive (dead)\r\n```\r\n1.3. Start the psacct service.  \r\n```bash\r\n[student@serverb ~]$ sudo systemctl start psacct\r\n[sudo] password for student: student\r\n[student@serverb ~]$\r\n```\r\n1.4. Verify that the psacct service is running.  \r\n```bash\r\n[student@serverb ~]$ systemctl is-active psacct\r\nactive\r\n```\r\n2. Configure the psacct service to start at system boot.  \r\n2.1. Enable the psacct service to start at system boot.\r\n```bash\r\n[student@serverb ~]$ sudo systemctl enable psacct\r\nCreated symlink /etc/systemd/system/multi-user.target.wants/\r\npsacct.service \u2192 /usr/lib/systemd/system/psacct.service.\r\n```\r\n2.2. Verify that the psacct service is enabled to start at system boot.\r\n```bash\r\n[student@serverb ~]$ systemctl is-enabled psacct\r\nenabled\r\n```\r\n3. Stop the rsyslog service.  \r\n3.1. Use the systemctl command to verify the status of the rsyslog service. Notice\r\nthat the rsyslog service is running and enabled to start at boot time.  \r\n```bash\r\n[student@serverb ~]$ systemctl status rsyslog\r\n\u25cf rsyslog.service - System Logging Service\r\nLoaded: loaded (/usr/lib/systemd/system/rsyslog.service; enabled;\r\nvendor preset: enabled)\r\nActive: active (running) since Fri 2019-02-08 10:16:00 IST; 2h 34min\r\nago\r\n...output omitted...\r\nPress q to exit the command.\r\n```\r\n3.2. Stop the rsyslog service.\r\n```bash\r\n[student@serverb ~]$ sudo systemctl stop rsyslog\r\n[sudo] password for student: student\r\n[student@serverb ~]$\r\n```\r\n3.3. Verify that the rsyslog service is stopped.\r\n```bash\r\n[student@serverb ~]$ systemctl is-active rsyslog\r\ninactive\r\n```\r\n4. Configure the rsyslog service so that it does not start at system boot.  \r\n4.1. Disable the rsyslog service so that it does not start at system boot.\r\n```bash\r\n[student@serverb ~]$ sudo systemctl disable rsyslog\r\nRemoved /etc/systemd/system/syslog.service.\r\nRemoved /etc/systemd/system/multi-user.target.wants/rsyslog.service.\r\n```\r\n4.2. Verify that the rsyslog is disabled to start at system boot.  \r\n```bash\r\n[student@serverb ~]$ systemctl is-enabled rsyslog\r\ndisabled\r\nReboot serverb before evaluating the lab.\r\n```\r\n5. [student@serverb ~]$ sudo systemctl reboot\r\n```bash\r\nConnection to serverb closed by remote host.\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n###Evaluation\r\nOn workstation, run the lab services-review grade script to confirm success on this lab.\r\n```bash\r\n[student@workstation ~]$ lab services-review grade\r\nFinish\r\n```\r\nOn workstation, run the lab services-review finish script to complete this lab.\r\n```bash\r\n[student@workstation ~]$ lab services-review finish\r\n```", "order": 6, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 247, "fields": {"title": "SUMMARY", "slug": "summary-2", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n\r\n* systemd provides a method for activating system resources, server daemons, and other\r\nprocesses, both at boot time and on a running system.\r\n* Use the systemctl to start, stop, reload, enable, and disable services.\r\n* Use the systemctl status command to determine the status of system daemons and\r\nnetwork services started by systemd.\r\n* The systemctl list-dependencies command lists all service units upon which a specific\r\nservice unit depends.\r\n* systemd can mask a service unit so that it does not run even to satisfy dependencies.", "order": 7, "is_visible": true, "is_task": false, "module": 35, "draft": false, "files": []}}, {"model": "courses.section", "pk": 248, "fields": {"title": "ACCESSING THE REMOTE COMMAND LINE WITH SSH", "slug": "accessing-the-remote-command-line-with-ssh", "content": "", "content_md": "# ACCESSING THE REMOTE COMMAND LINE WITH SSH\r\n\r\n <br>\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able log into a remote system and run commands\r\nusing **ssh**.\r\n\r\n## WHAT IS OPENSSH?\r\n_OpenSSH_ implements the Secure Shell or SSH protocol in the Red Hat Enterprise Linux systems.\r\nThe SSH protocol enables systems to communicate in an encrypted and secure fashion over an\r\ninsecure network.\r\n\r\nYou can use the **ssh** command to create a secure connection to a remote system, authenticate\r\nas a specific user, and get an interactive shell session on the remote system as that user. You may\r\nalso use the **ssh** command to run an individual command on the remote system without running\r\nan interactive shell.\r\n\r\n## SECURE SHELL EXAMPLES\r\nThe following ssh command would log you in on the remote server remotehost using the\r\nsame user name as the current local user. In this example, the remote system prompts you to\r\nauthenticate with that user's password.\r\n\r\n![](/media/markdownx/cb5092a9-6cca-4834-8aba-cb9233b2272b.png)\r\n\r\nYou can the exit command to log out of the remote system.\r\n\r\n![](/media/markdownx/f0c33c4a-3541-4c0b-9386-a731206c7587.png)\r\n\r\nThe next **ssh** command would log you in on the remote server remotehost using the user name\r\nuser02. Again, you are prompted by the remote system to authenticate with that user's password.\r\n\r\n![](/media/markdownx/5a003e40-34d1-476d-a831-930578a77517.png)\r\n\r\nThis ssh command would run the hostname command on the remotehost remote system as the\r\nuser02 user without accessing the remote interactive shell.\r\n\r\n![](/media/markdownx/2d2ee602-f244-4716-a00b-cf8013aa65d7.png)\r\n\r\nNotice that the preceding command displayed the output in the local system's terminal.\r\n\r\n## IDENTIFYING REMOTE USERS\r\nThe **w** command displays a list of users currently logged into the computer. This is especially useful\r\nto show which users are logged in using ssh from which remote locations, and what they are doing.\r\n\r\n![](/media/markdownx/0074401f-79f2-42c8-bb3a-3b0b3d762cf7.png)\r\n\r\nThe preceding output shows that the user02 user has logged in to the system on the pseudo-terminal 0 at 16:13 today from the host with the 172.25.250.10 IP address, and has been idle\r\nat a shell prompt for seven minutes and thirty seconds. The preceding output also shows that the\r\nuser01 user has logged in to the system on the pseudo-terminal 1 and has been idle since since\r\nlast three seconds after executing the **w** command.\r\n\r\n## SSH HOST KEYS\r\n\r\nSSH secures communication through public-key encryption. When an SSH client connects to an\r\nSSH server, the server sends a copy of its public key to the client before the client logs in. This\r\nis used to set up the secure encryption for the communication channel and to authenticate the\r\nserver to the client.\r\n\r\nWhen a user uses the ssh command to connect to an SSH server, the command checks to see if it\r\nhas a copy of the public key for that server in its local known hosts files. The system administrator\r\nmay have pre-configured it in **/etc/ssh/ssh_known_hosts**, or the user may have a **~/.ssh/**\r\n**known_hosts** file in their home directory that contains the key.\r\n\r\nIf the client has a copy of the key, ssh will compare the key from the known hosts files for that\r\nserver to the one it received. If the keys do not match, the client assumes that the network traffic\r\nto the server could be hijacked or that the server has been compromised, and seeks the user's\r\nconfirmation on whether or not to continue with the connection.\r\n\r\n> #### NOTE\r\n> Set the StrictHostKeyChecking parameter to **yes** in the user-specific\r\n**~/.ssh/config** file or the system-wide **/etc/ssh/ssh_config** to cause the\r\n**ssh** command to always abort the SSH connection if the public keys do not match.\r\n\r\nIf the client does not have a copy of the public key in its known hosts files, the ssh command\r\nwill ask you if you want to log in anyway. If you do, a copy of the public key will be saved in your **~/.ssh/known_hosts** file so that the server's identity can be automatically confirmed in the\r\nfuture.\r\n\r\n![](/media/markdownx/0b37bac6-4a8b-44f5-bb65-9954a771db0c.png)\r\n\r\n### SSH Known Hosts Key Management\r\n\r\nIf a server's public key is changed because the key was lost due to hard drive failure, or replaced for\r\nsome legitimate reason, you will need to edit the known hosts files to make sure the entry for the\r\nold public key is replaced with an entry with the new public key in order to log in without errors.\r\n\r\nPublic keys are stored in the **/etc/ssh/ssh_known_hosts** and each users' **~/.ssh/**\r\n**known_hosts** file on the SSH client. Each key is on one line. The first field is a list of hostnames\r\nand IP addresses that share that public key. The second field is the encryption algorithm for the\r\nkey. The last field is the key itself.\r\n\r\n![](/media/markdownx/0edd458d-4741-41fe-84bc-8488587cbfcb.png)\r\n\r\nEach remote SSH server that you conect to stores its public key in the **/etc/ssh** directory in files\r\nwith the extension **.pub**.\r\n\r\n![](/media/markdownx/6bafd0f7-88ab-432d-b2f5-0068bf299a35.png)\r\n\r\n> #### NOTE\r\n> It is a good practice to add entries matching a server's **ssh_host_*key.pub**\r\nfiles to your **~/.ssh/known_hosts** file or the system-wide **/etc/ssh/\r\nssh_known_hosts** file.\r\n\r\n<br>\r\n\r\n> #### REFERENCES\r\n> ssh(1), w(1), and hostname(1) man pages\r\n> \r\n>For more information refer to the Using Secure Communications Between Two\r\nSystems With OpenSSH chapter in the Red Hat Enterprise Linux 8.0 Configuring and\r\nManaging Security Guide at\r\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/securing_networks/assembly_using-secure-communications-with-openssh-securing-networks#The_SSH_protocol_configuring-and-managing-security", "order": 1, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 249, "fields": {"title": "GUIDED EXERCISE: ACCESSING THE REMOTE COMMAND LINE", "slug": "accessing-the-remote-command-line", "content": "", "content_md": "## Guided Exercise:\r\n# ACCESSING THE REMOTE COMMAND LINE\r\n\r\n> In this exercise, you will log into a remote system as different users and execute commands.\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> * Log in to a remote system.\r\n> * Execute commands with the OpenSSH secure shell.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\n> \r\n>On workstation, run lab ssh-access start to start the exercise. This script ensures\r\nthat the environment is setup correctly.\r\n>\r\n> ![](/media/markdownx/3d83091f-1c60-41f3-b685-5e06ee23ff10.png)\r\n\r\n1. From workstation, open an SSH session to servera as student.\r\n\r\n     ![](/media/markdownx/159600e2-deee-44fb-9597-eb4f70c8b766.png)\r\n\r\n2. Open an SSH session to serverb as student. Accept the host key. Use student as the\r\npassword when prompted for the password of the student user on serverb.\r\n\r\n     ![](/media/markdownx/a0fdcd88-733e-439a-a1db-6e6893397ba6.png)\r\n\r\n     The host key is recorded in the **/home/student/.ssh/known_hosts** file on servera to identify serverb because the student user has initiated the SSH connection from servera. If the **/home/student/.ssh/known_hosts** file does not already exist, it comes into existence as a new file along with the new entry in it. The **ssh** command fails to execute properly if the remote host appears to have a different key than the recorded key.\r\n\r\n3. Run the **w** command to display the users that are currently logged in to serverb.\r\n\r\n     ![](/media/markdownx/fc89c19e-66b0-4a41-9ece-9dd1125a50f9.png)\r\n\r\n    The preceding output indicates that the student user has logged in to the system from\r\nthe host with an IP address of 172.25.250.10 which is servera in the classroom network.\r\n\r\n    > ####  NOTE\r\n    > The IP address of a system identifies the system on a network. You are going to\r\nlearn about IP addresses in the later chapter.\r\n\r\n4. Exit the student user's shell on serverb.\r\n\r\n    ![](/media/markdownx/7680b28a-61ab-4640-afc7-209b7357bb09.png)\r\n\r\n5. Open an SSH session to serverb as root. Use redhat as the password of the root user.\r\n\r\n    ![](/media/markdownx/f3b999c9-cf98-42ef-b569-e98f04fcbc95.png)\r\n\r\n     Notice that the preceding **ssh** command did not ask you to accept the host key because\r\nit was found among the known hosts. Should the identity of serverb change at any time, OpenSSH prompts you to verify and accept the new host key\r\n\r\n6. Run the **w** command to display the users that are currently logged in to serverb.\r\n\r\n    ![](/media/markdownx/c308fc96-b66a-49bd-9225-cf0c9312cc00.png)\r\n\r\n    The preceding output indicates that the root user has logged in to the system from the host with an IP address of 172.25.250.10 which is servera in the classroom network.\r\n\r\n7. Exit the root user's shell on serverb.\r\n\r\n    ![](/media/markdownx/60ca1c77-72a5-4d97-9791-77b6bac6f035.png)\r\n\r\n8. Remove the **/home/student/.ssh/known_hosts** file from servera. This causes **ssh**\r\nto lose the recorded identities of the remote systems.\r\n\r\n    ![](/media/markdownx/d3c5b7cf-6381-4649-bbc4-28bb76689849.png)\r\n\r\n    Host keys can change for legitimate reasons: perhaps the remote machine was replaced\r\nbecause of a hardware failure, or perhaps the remote machine was reinstalled. Usually, it\r\nis advisable only to remove the key entry for the particular host in the **known_hosts** file.\r\nSince this particular **known_hosts** file has only one entry, you can remove the entire file.\r\n\r\n9. Open an SSH session to serverb as student. Accept the host key if asked. Use student\r\nas the password when prompted for the password of the student user on serverb.\r\n\r\n    ![](/media/markdownx/50c8f10d-2b4b-4aa1-ad89-f9597be4c3fe.png)\r\n\r\n    Notice that the **ssh** command asked for your confirmation to accept or reject the host key because it could not find one for the remote host.\r\n\r\n10. Exit the student user's shell on serverb and confirm that a new instance of known_hosts exists on servera.\r\n\r\n    ![](/media/markdownx/3c479e0d-775f-443f-97ce-32c273188914.png)\r\n\r\n11. Confirm that the new instance of **known_hosts** file has the host key of serverb.\r\n\r\n    ![](/media/markdownx/538db24b-6b8a-4b35-8cbe-90ce57038c27.png)\r\n\r\n    Actual output will vary.\r\n\r\n12. Run hostname remotely on serverb without accessing the interactive shell.\r\n\r\n    ![](/media/markdownx/56e46650-5388-4945-a8f1-af674c892ddd.png)\r\n\r\n    The preceding command displayed the full hostname of the remote system serverb.\r\n\r\n13. Exit the student user's shell on servera.\r\n\r\n    ![](/media/markdownx/17d6657a-963a-43a6-bea3-15a9e2b656f2.png)\r\n\r\n### Finish\r\nOn workstation, run **lab ssh-access finish** to complete this exercise.\r\n\r\n![](/media/markdownx/a6317435-775c-4ec8-b1f3-bcd3953a998e.png)\r\n\r\nThis concludes the guided exercise.", "order": 2, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 250, "fields": {"title": "CONFIGURING SSH KEY-BASED AUTHENTICATION", "slug": "configuring-ssh-key-based-authentication", "content": "", "content_md": "# CONFIGURING SSH KEY-BASED AUTHENTICATION\r\n\r\n<br>\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to configure a user account to use key-based\r\nauthentication to log in to remote systems securely without a password.\r\n\r\n## SSH KEY-BASED AUTHENTICATION\r\nYou can configure an SSH server to allow you to authenticate without a password by using key-based authentication. This is based on a private-public key scheme.\r\n\r\nTo do this, you generate a matched pair of cryptographic key files. One is a private key, the other\r\na matching public key. The private key file is used as the authentication credential and, like a\r\npassword, must be kept secret and secure. The public key is copied to systems the user wants to\r\nconnect to, and is used to verify the private key. The public key does not need to be secret.\r\n\r\nYou put a copy of the public key in your account on the server. When you try to log in, the SSH\r\nserver can use the public key to issue a challenge that can only be correctly answered by using\r\nthe private key. As a result, your ssh client can automatically authenticate your login to the server\r\nwith your unique copy of the private key. This allows you to securely access systems in a way that\r\ndoesn't require you to enter a password interactively every time.\r\n\r\n### Generating SSH Keys\r\n\r\nTo create a private key and matching public key for authentication, use the **ssh-keygen**\r\ncommand. By default, your private and public keys are saved in your **~/.ssh/id_rsa** and\r\n**~/.ssh/id_rsa.pub** files, respectively.\r\n\r\n![](/media/markdownx/7f3e2fae-833c-40c1-8737-28890ed49cf7.png)\r\n![](/media/markdownx/7dd868b2-b2c7-443d-b54d-3f60f7ef5974.png)\r\n\r\nIf you do not specify a passphrase when **ssh-keygen** prompts you, the generated private key\r\nis not protected. In this case, anyone with your private key file could use it for authentication. If\r\nyou set a passphrase, then you will need to enter that passphrase when you use the private key\r\nfor authentication. (Therefore, you would be using the private key's passphrase rather than your\r\npassword on the remote host to authenticate.)\r\n\r\nYou can run a helper program called **ssh-agent** which can temporarily cache your private key\r\npassphrase in memory at the start of your session to get true passwordless authentication. This\r\nwill be discussed later in this section.\r\n\r\nThe following example of the **ssh-keygen** command shows the creation of the passphrase-protected private key alongside the public key.\r\n\r\n![](/media/markdownx/a1eae1d9-c839-491e-9d4d-fb1bf0bf854b.png)\r\n\r\nThe **-f** option with the **ssh-keygen** command determines the files where the keys are saved. In\r\nthe preceding example, the private and public keys are saved in the **/home/user/.ssh/key-with-pass /home/user/.ssh/key-with-pass.pub** files, respectively.\r\n\r\n> #### WARNING\r\n> During further SSH keypair generation, unless you specify a unique file name, you\r\nare prompted for permission to overwrite the existing **id_rsa** and **id_rsa.pub**\r\nfiles. If you overwrite the existing **id_rsa** and **id_rsa.pub** files, then you must\r\nreplace the old public key with the new one on all the SSH servers that have your old\r\npublic key\r\n\r\nOnce the SSH keys have been generated, they are stored by default in the **.ssh/** directory of\r\nthe user's home directory. The permission modes must be 600 on the private key and 644 on the\r\npublic key.\r\n\r\n### Sharing the Public Key\r\n\r\nBefore key-based authentication can be used, the public key needs to be copied to the\r\ndestination system. The **ssh-copy-id** command copies the public key of the SSH keypair to the\r\ndestination system. If you omit the path to the public key file while running **ssh-copy-id**, it uses\r\nthe default **/home/user/.ssh/id_rsa.pub** file.\r\n\r\n![](/media/markdownx/59986790-1e04-48e7-9592-f3a8d85173e2.png)\r\n\r\nAfter the public key is successfully transferred to a remote system, you can authenticate to the\r\nremote system using the corresponding private key while logging in to the remote system over\r\nSSH. If you omit the path to the private key file while running the **ssh** command, it uses the\r\ndefault **/home/user/.ssh/id_rsa** file.\r\n\r\n![](/media/markdownx/e3b221ea-812f-408b-8c0c-73f06c3a4b5e.png)\r\n\r\n### Using ssh-agent for Non-interactive Authentication\r\nIf your SSH private key is protected with a passphrase, you normally have to enter the passphrase\r\nto use the private key for authentication. However, you can use a program called **ssh-agent** to\r\ntemporarily cache the passphrase in memory. Then any time that you use SSH to log in to another\r\nsystem with the private key, **ssh-agent** will automatically provide the passphrase for you. This\r\nis convenient, and can improve security by providing fewer opportunities for someone \"shoulder\r\nsurfing\" to see you type the passphrase in.\r\n\r\nDepending on your local system's configuration, if you initially log in to the GNOME graphical\r\ndesktop environment, the **ssh-agent** program might automatically be started and configured for\r\nyou.\r\n\r\nIf you log in on a text console, log in using **ssh**, or use **sudo** or **su**, you will probably need to start\r\n**ssh-agent** manually for that session. You can do this with the following command:\r\n\r\n![](/media/markdownx/d0d1b048-b78c-47c4-b95b-c043ff72c441.png)\r\n\r\n> ##### NOTE\r\n>  When you run **ssh-agent**, it prints out some shell commands. You need to run\r\nthese commands to set environment variables used by programs like **ssh-add** to\r\ncommunicate with it. The **eval $(ssh-agent)** command starts **ssh-agent** and\r\nruns those commands to automatically set those environment variables for that\r\nshell session. It also displays the PID of the ssh-agent process.\r\n\r\n\r\nOnce **ssh-agent** is running, you need to tell it the passphrase for your private key or keys. You\r\ncan do this with the **ssh-add** command.\r\n\r\nThe following **ssh-add** commands add the private keys from **/home/user/.ssh/id_rsa** (the\r\ndefault) and **/home/user/.ssh/key-with-pass** files, respectively.\r\n\r\n![](/media/markdownx/a36a6d3c-94ff-403c-89ae-8f1a3a86b479.png)\r\n\r\nAfter successfully adding the private keys to the **ssh-agent** process, you can invoke an SSH\r\nconnection using the **ssh** command. If you are using any private key file other than the default\r\n**/home/user/.ssh/id_rsa** file, then you must use the **-i** option with the **ssh** command to\r\nspecify the path to the private key file.\r\n\r\nThe following example of the ssh command uses the default private key file to authenticate to an\r\nSSH server.\r\n\r\n![](/media/markdownx/74a82482-0e1a-4e54-a2e2-6e000ca44ee9.png)\r\n\r\nThe following example of the **ssh** command uses the **/home/user/.ssh/key-with-pass**\r\n(non-default) private key file to authenticate to an SSH server. The private key in the following\r\nexample has already been decrypted and added to its parent **ssh-agent** process, so the ssh\r\ncommand does not prompt you to decrypt the private key by interactively entering its passphrase.\r\n\r\n![](/media/markdownx/ef8acb64-4b86-401a-a3fd-01c1d08aae94.png)\r\n\r\n> #### REFERENCES\r\n> ssh-keygen(1), ssh-copy-id(1), ssh-agent(1),ssh-add(1) man pages", "order": 3, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 251, "fields": {"title": "GUIDED EXERCISE: CONFIGURING SSH KEY-BASED AUTHENTICATION", "slug": "guided-exercise-configuring-ssh-key-based-authentication", "content": "", "content_md": "### GUIDED EXERCISE\r\n\r\n# CONFIGURING SSH KEY-BASED AUTHENTICATION\r\n\r\n>In this exercise, you will configure a user to use key-based authentication for SSH.\r\n> ### OUTCOMES\r\n> You should be able to:\r\n\u2022 Generate an SSH key pair without passphrase protection.\r\n\u2022 Generate an SSH key pair with passphrase protection.\r\n\u2022 Authenticate using both passphrase-less and passphrase-protected SSH keys.\r\n>\r\n>### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\nOn workstation, run **lab ssh-configure start** to start the exercise. This script\r\ncreates the necessary user accounts.\r\n>\r\n> ![](/media/markdownx/dc70a374-aa87-4980-841c-24676e778f91.png)\r\n\r\n1. From workstation, open an SSH session to serverb as student.\r\n\r\n    ![](/media/markdownx/8fc1f6e5-5e01-41a0-864d-a9b7c5458f5b.png)\r\n\r\n2. Use the **su** command to switch to the operator1 user on serverb. Use redhat as the\r\npassword of operator1.\r\n\r\n    ![](/media/markdownx/56659c4e-969a-4384-8a03-9409e7fc445f.png)\r\n\r\n3. Use the **ssh-keygen** command to generate SSH keys. Do not enter a passphrase.\r\n\r\n    ![](/media/markdownx/8891d371-0eaa-4c99-9085-a7fbcbdb8b46.png)\r\n    ![](/media/markdownx/4e72b36a-91ed-4950-a543-1dc10acfc0eb.png)\r\n\r\n4. Use the ssh-copy-id command to send the public key of the SSH key pair to operator1\r\non servera. Use redhat as the password of operator1 on servera.\r\n\r\n    ![](/media/markdownx/da575748-44d0-489d-8502-066a5ead0c69.png)\r\n\r\n5. Execute the **hostname** command on servera remotely using SSH without accessing the\r\nremote interactive shell.\r\n\r\n    ![](/media/markdownx/2a71fc3f-f1b9-4543-a850-64e08cbb3e14.png)\r\n\r\n    Notice that the preceding **ssh** command did not prompt you for a password because it\r\nused the passphrase-less private key against the exported public key to authenticate as\r\noperator1 on servera. This approach is not secure, because anyone who has access\r\nto the private key file can log in to servera as operator1. The secure alternative is to\r\nprotect the private key with a passphrase, which is the next step.\r\n\r\n6. Use the **ssh-keygen** command to generate another set of SSH keys with **passphrase-protection**. Save the key as **/home/operator1/.ssh/key2**. Use redhatpass as the\r\npassphrase of the private key.\r\n\r\n    > #### WARNING\r\n    > If you do not specify the file where the key gets saved, the default file (**/\r\nhome/user/.ssh/id_rsa**) is used. You have already used the default file name\r\nwhen generating SSH keys in the preceding step, so it is vital that you specify a non\u0002default file, otherwise the existing SSH keys will be overwritten.\r\n\r\n    ![](/media/markdownx/6d2366a1-f4aa-405e-8c2d-6d3f998bb897.png)\r\n\r\n7. Use the **ssh-copy-id** command to send the public key of the passphrase-protected key\r\npair to operator1 on servera.\r\n\r\n    ![](/media/markdownx/27e6bd38-8575-4b04-86ed-0e9cc007a8b9.png)\r\n\r\n    Notice that the preceding **ssh-copy-id** command did not prompt you for a password\r\nbecause it used the public key of the passphrase-less private key that you exported to\r\nservera in the preceding step.\r\n\r\n8. Execute the **hostname** command on servera remotely with SSH without accessing the\r\nremote interactive shell. Use **/home/operator1/.ssh/key2** as the identity file. Specify\r\nredhatpass as the passphrase, which you set for the private key in the preceding step.\r\n\r\n    ![](/media/markdownx/ec0884c6-e165-447d-ae4f-fb824a89b6da.png)\r\n\r\n    Notice that the preceding **ssh** command prompted you for the passphrase you used\r\nto protect the private key of the SSH key pair. This passphrase protects the private key.\r\nShould an attacker gain access to the private key, the attacker cannot use it to access other\r\nsystems because the private key itself is protected with a passphrase. The **ssh** command uses a different passphrase than the one for operator1 on servera, requiring users to\r\nknow both.\r\n\r\n    You can use **ssh-agent**, as in the following step, to avoid interactively typing in the\r\npassphrase while logging in with SSH. Using **ssh-agent** is both more convenient and more\r\nsecure in situations where the administrators log in to remote systems regularly.\r\n\r\n9. Run **ssh-agent** in your **Bash** shell and add the passphrase-protected private key (**/home/\r\noperator1/.ssh/key2**) of the SSH key pair to the shell session.\r\n\r\n    ![](/media/markdownx/077843dc-461e-4ea8-a6e4-65d771973772.png)\r\n\r\n    The preceding **eval** command started **ssh-agent** and configured this shell session to use\r\nit. You then used **ssh-add** to provide the unlocked private key to ssh-agent.\r\n\r\n10. Execute the **hostname** command on servera remotely without accessing a remote\r\ninteractive shell. Use **/home/operator1/.ssh/key2** as the identity file.\r\n\r\n    ![](/media/markdownx/3b8aeaa6-5701-478b-9824-64aa3782fa4c.png)\r\n\r\n    Notice that the preceding **ssh** command did not prompt you to enter the passphrase\r\ninteractively\r\n\r\n11. Open another terminal on workstation and open an SSH session to serverb as\r\nstudent.\r\n\r\n    ![](/media/markdownx/c7cc2f37-4802-4b8b-a31f-0d1a6775cb70.png)\r\n\r\n12. On serverb, use the **su** command to switch to operator1 and invoke an SSH connection to servera. Use **/home/operator1/.ssh/key2** as the identity file to authenticate using the SSH keys.\r\n\r\n    12.1. Use the **su** command to switch to operator1. Use redhat as the password of operator1.\r\n    \r\n    ![](/media/markdownx/1d6a0ed0-8fc0-4252-83a7-423b72537f2f.png)\r\n\r\n    12.2. Open an SSH session to servera as operator1.\r\n    \r\n    ![](/media/markdownx/c2ce7a4c-5400-4fd1-ac0d-1fe8324a582f.png)\r\n\r\n13. Exit all the shells you are using in the second terminal.\r\n \r\n    13.1. Log out of servera.\r\n    \r\n    ![](/media/markdownx/333e90b5-b657-474a-933f-f1a0da0c2cbc.png)\r\n    \r\n    13.2. Exit the operator1 and student shells on serverb to return to the student\r\nuser's shell on workstation.\r\n\r\n     ![](/media/markdownx/a5825259-1a71-4939-a438-152848a4583a.png)\r\n     \r\n    13.3. Exit the operator1 and student shells on serverb to return to the student\r\nuser's shell on workstation.\r\n\r\n    ![](/media/markdownx/bb92e8f9-0300-43ca-8776-7a8a96deef99.png)\r\n\r\n14. Log out of serverb on the first terminal and conclude this exercise.\r\n\r\n    14.1.  From the first terminal, exit the operator1 user's shell on serverb.\r\n\r\n    ![](/media/markdownx/535b22db-92d5-4708-b5eb-d3a9ddf9b8bd.png)\r\n\r\n     The exit command caused you to exit the operator1 user's shell, terminating the\r\nshell session where ssh-agent was active, and return to the student user's shell\r\non serverb.\r\n\r\n    14.2. Exit the student user's shell on serverb to return to the student user's shell on\r\nworkstation.\r\n\r\n    ![](/media/markdownx/4d7e498c-b0b3-46b6-abac-f5a36c1f0940.png)\r\n\r\n\r\n### Finish\r\nOn workstation, run lab ssh-configure finish to complete this exercise.\r\n\r\n![](/media/markdownx/44205934-bcdb-48e3-a6a2-49cf91a76fe5.png)\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 252, "fields": {"title": "CUSTOMIZING OPENSSH SERVICE CONFIGURATION", "slug": "customizing-openssh-service-configuration", "content": "", "content_md": "# CUSTOMIZING OPENSSH SERVICE CONFIGURATION\r\n\r\n<br>\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to restrict direct logins as root and disable\r\npassword-based authentication for the OpenSSH service.\r\n\r\n## CONFIGURING THE OPENSSH SERVER\r\nOpenSSH service is provided by a daemon called sshd. Its main configuration file is **/etc/ssh/\r\nsshd_config**.\r\n\r\nThe default configuration of the OpenSSH server works well. However, you might want to make\r\nsome changes to strengthen the security of your system. There are two common changes\r\nyou might want to make. You might want to prohibit direct remote login to the root account,\r\nand you might want to prohibit password-based authentication (in favor of SSH private key\r\nauthentication).\r\n\r\n## PROHIBIT THE SUPERUSER FROM LOGGING IN USING SSH\r\nIt is a good practice to prohibit direct login to the root user account from remote systems. Some\r\nof the risks of allowing direct login as root include:\r\n\r\n* The user name root exists on every Linux system by default, so a potential attacker only has\r\nto guess the password, instead of a valid user name and password combination. This reduces\r\ncomplexity for an attacker.\r\n\r\n* The root user has unrestricted privileges, so its compromise can lead to maximum damage to\r\nthe system.\r\n\r\n* From an auditing perspective, it can be hard to track which authorized user logged in as root\r\nand made changes. If users have to log in as a regular user and switch to the root account, this\r\ngenerates a log event that can be used to help provide accountability.\r\n\r\nThe OpenSSH server uses the **PermitRootLogin** configuration setting in the **/etc/ssh/\r\nsshd_config** configuration file to allow or prohibit users logging in to the system as root.\r\n\r\n![](/media/markdownx/f7ece301-db62-4468-aae3-e3758acb368f.png)\r\n\r\nWith the **PermitRootLogin** parameter to **yes**, as it is by default, people are permitted to\r\nlog in as root. To prevent this, set the value to **no**. Alternatively, to prevent password-based\r\nauthentication but allow private key-based authentication for root, set the **PermitRootLogin**\r\nparameter to **without-password**.\r\n\r\nThe SSH server (sshd) must be reloaded for any changes to take effect.\r\n\r\n![](/media/markdownx/a7ef4c8b-3b1b-4973-9b31-6e9d3607f8cf.png)\r\n\r\n> #### IMPORTANT\r\n> The advantage of using **systemctl reload sshd** command is that it tells sshd\r\nto re-read its configuration file rather than completely restarting the service. A\r\n**systemctl restart sshd** command would also apply the changes, but would\r\nalso stop and start the service, breaking all active SSH connections to that host.\r\n\r\n## PROHIBITING PASSWORD-BASED AUTHENTICATION FOR SSH\r\n\r\nAllowing only private key-based logins to the remote command line has various advantages:\r\n\r\n* Attackers cannot use password guessing attacks to remotely break into known accounts on the\r\nsystem.\r\n\r\n* With passphrase-protected private keys, an attacker needs both the passphrase and a copy of\r\nthe private key. With passwords, an attacker just needs the password.\r\n\r\n* By using passphrase-protected private keys in conjunction with ssh-agent, the passphrase is\r\nexposed less frequently since it is entered less frequently, and logging in is more convenient for\r\nthe user.\r\n\r\nThe OpenSSH server uses the PasswordAuthentication parameter in the **/etc/ssh/\r\nsshd_config** configuration file to control whether users can use password-based authentication\r\nto log in to the system.\r\n\r\n![](/media/markdownx/c14d9908-16ab-40ed-a17d-1741b9c256b1.png)\r\n\r\nThe default value of **yes** for the **PasswordAuthentication** parameter in the **/etc/ssh/sshd_config** configuration file causes the SSH server to allow users to use password-based\r\nauthentication while logging in. The value of **no** for PasswordAuthentication prevents users from using password-based authentication.\r\n\r\nKeep in mind that whenever you change the **/etc/ssh/sshd_config** file, you must reload the sshd service for changes to take effect.\r\n\r\n> #### IMPORTANT\r\n> Remember, if you turn off password-based authentication for ssh, you need to have\r\na way to ensure that the user's **~/.ssh/authorized_keys** file on the remote\r\nserver is populated with their public key, so that they can log in.\r\n\r\n<br>\r\n\r\n> #### REFERENCES\r\n> ssh(1), sshd_config(5) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 253, "fields": {"title": "GUIDED EXERCISE: CUSTOMIZING OPENSSH SERVICE CONFIGURATION", "slug": "guided-exercise-customizing-openssh-service-configuration", "content": "", "content_md": "##  GUIDED EXERCISE :\r\n\r\n# CUSTOMIZING OPENSSH SERVICE CONFIGURATION\r\n> In this exercise, you will disable direct logins as root and password-based authentication for\r\nthe OpenSSH service on one of your servers.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> \u2022 Disable direct logins as root over ssh.\r\n> \u2022 Disable password-based authentication for remote users to connect over SSH.\r\n> \r\n> ### BEFORE YOU BEGIN\r\n>Log in to workstation as student using student as the password.\r\n>\r\n>On workstation, run lab ssh-customize start to start the exercise. This script\r\ncreates the necessary user accounts and files\r\n> ![](/media/markdownx/b194ad88-2774-49da-9844-faa906d221f5.png)\r\n\r\n1. From workstation, open an SSH session to serverb as student.\r\n\r\n    ![](/media/markdownx/2765069b-a28d-4be8-b972-5ec8731d3427.png)\r\n\r\n2. Use the **su** command to switch to operator2 on serverb. Use redhat as the password\r\nof operator2.\r\n\r\n    ![](/media/markdownx/bc134974-e758-4927-afb9-8b46db4a2de2.png)\r\n   \r\n3. Use the **ssh-keygen** command to generate SSH keys. Do not enter any passphrase for\r\nthe keys.\r\n\r\n    ![](/media/markdownx/877aedac-c59e-4a76-baef-b43df7b54f7f.png)\r\n    ![](/media/markdownx/21559f56-2893-4f73-9cab-93ae74c2f76a.png)\r\n   \r\n4. Use the **ssh-copy-id** command to send the public key of the SSH key pair to operator2\r\non servera. Use redhat as the password of operator2 on servera.\r\n\r\n    ![](/media/markdownx/da901e34-f18f-4331-ba90-cbffba6cf717.png)\r\n\r\n5. Confirm that you can successfully log in to servera as operator2 using the SSH keys\r\n\r\n    5.1. Open an SSH session to servera as operator2.\r\n\r\n    ![](/media/markdownx/27cdf1b1-967d-43d7-86ff-1ffd8c9968d2.png)\r\n\r\n    Notice that the preceding **ssh** command used SSH keys for authentication.\r\n\r\n    5.2. Log out of servera.\r\n\r\n    ![](/media/markdownx/d93fa7ba-6d55-4eb3-8f9d-ce6dbef032a0.png)\r\n\r\n6. Confirm that you can successfully log in to servera as root using redhat as the password.\r\n \r\n    6.1. Open an SSH session to servera as root using redhat as the password.\r\n\r\n    ![](/media/markdownx/8471ba7a-73a9-4f20-9cd2-803b4e14164e.png)\r\n\r\n    6.2.  Log out of servera.\r\n\r\n    ![](/media/markdownx/4c4f41d6-eeee-42ce-932d-0c37edae31c2.png)\r\n\r\n7. Confirm that you can successfully log in to servera as operator3 using redhat as the password.\r\n\r\n    7.1. Open an SSH session to servera as operator3 using redhat as the password.\r\n\r\n    ![](/media/markdownx/60daeb10-3673-4050-bada-5bb046dd7030.png)\r\n\r\n    Notice that the preceding ssh command used the password of operator3 for\r\nauthentication because SSH keys do not exist for operator3.\r\n\r\n    7.2.  Log out of servera.\r\n\r\n    ![](/media/markdownx/36ea07ca-71cc-480d-8b2f-3c4963920603.png)\r\n\r\n8. Configure sshd on servera to prevent users logging in as root. Use redhat as the\r\npassword of the superuser when required.\r\n\r\n    8.1. Open an SSH session to servera as operator2 using the SSH key.\r\n\r\n    ![](/media/markdownx/34715317-c33e-4b83-914b-83898a2a48f2.png)\r\n\r\n    8.2. On servera, switch to root. Use redhat as the password of the root user.\r\n\r\n    ![](/media/markdownx/6de100d2-1dd6-40a1-a63b-675c2b7c2538.png)\r\n\r\n    8.3. Set **PermitRootLogin** to **no** in **/etc/ssh/sshd_config** and reload sshd. You\r\nmay use **vim /etc/ssh/sshd_config** to edit the configuration file of sshd.\r\n\r\n    ![](/media/markdownx/a182d3e7-9ace-443c-bbf4-2db7666082a4.png)\r\n\r\n    8.4. Open another terminal on workstation and open an SSH session to serverb as\r\noperator2. From serverb, try logging in to servera as root. This should fail\r\nbecause you disabled root user login over SSH in the preceding step.\r\n\r\n    > #### NOTE\r\n    > For your convenience, password-less login is already configured between\r\nworkstation and serverb in the classroom environment\r\n\r\n    ![](/media/markdownx/d1690c41-f6d4-4f6a-ab1d-31b8eb54e557.png)\r\n\r\n    By default, the ssh command attempts to authenticate using key-based authentication first and then, if that fails, password-based authentication.\r\n\r\n9. Configure sshd on servera to allow users to authenticate using SSH keys only, rather\r\nthan their passwords.\r\n\r\n    9.1. Return to the first terminal that has the root user's shell active on servera. Set\r\nPasswordAuthentication to no in **/etc/ssh/sshd_config** and reload sshd.\r\nYou may use vim **/etc/ssh/sshd_config** to edit the configuration file of sshd.\r\n\r\n    ![](/media/markdownx/07ac9b75-46b5-4465-b053-2c7f0a391b95.png)\r\n\r\n    9.2. Go to the second terminal that has operator2 user's shell active on serverb and\r\ntry logging in to servera as operator3. This should fail because SSH keys are not\r\nconfigured for operator3, and the sshd service on servera does not allow the\r\nuse of passwords for authentication.\r\n\r\n    ![](/media/markdownx/288bb371-14be-4eec-a1a7-2667c1354051.png)\r\n\r\n    > #### NOTE\r\n    > For more granularity, you may use the explicit **-o PubkeyAuthentication=no**\r\nand **-o PasswordAuthentication=yes** options with the ssh command. This\r\nallows you to override the **ssh** command's defaults and confidently determine that\r\nthe preceding command fails based on the settings you adjusted in **/etc/ssh/\r\nsshd_config** in the preceding step.\r\n\r\n    9.3. Return to the first terminal that has the root user's shell active on servera. Verify\r\nthat **PubkeyAuthentication** is enabled in **/etc/ssh/sshd_config**. You may\r\nuse **vim /etc/ssh/sshd_config** to view the configuration file of sshd.\r\n\r\n    ![](/media/markdownx/aecdc8c4-f982-4f4d-89f0-684405a703dd.png)\r\n\r\n    Notice that the PubkeyAuthentication line is commented. Any commented\r\nline in this file uses the default value. Commented lines indicate the default values of a parameter. The public key authentication of SSH is active by default, as the\r\ncommented line indicates.\r\n\r\n    9.4. Return to the second terminal that has operator2 user's shell active on serverb\r\nand try logging in to servera as operator2. This should succeed because the SSH\r\nkeys are configured for operator2 to log in to servera from serverb.\r\n\r\n    ![](/media/markdownx/4a80c062-6540-4a17-a688-1f8763d8fc3c.png)\r\n\r\n    9.5. From the second terminal, exit the operator2 user's shell on both servera and serverb.\r\n\r\n    ![](/media/markdownx/83a74f3d-5ef9-46e8-80fb-72a1d3aa8609.png)\r\n\r\n    9.6. Close the second terminal on workstation.\r\n\r\n    ![](/media/markdownx/2a86369a-5011-410f-a386-5aa1a5bf064b.png)\r\n\r\n    9.7. From the first terminal, exit the root user's shell on servera.\r\n\r\n    ![](/media/markdownx/89fae6b8-9626-44bd-a41c-3e55cfef319e.png)\r\n\r\n    9.8.  From the first terminal, exit the operator2 user's shell on both servera and serverb.\r\n\r\n    ![](/media/markdownx/da62338b-c12d-4462-a6c7-49042bd14c60.png)\r\n\r\n    9.9.  Log out of serverb and return to the student user's shell on workstation.\r\n \r\n    ![](/media/markdownx/0c8265ad-0a0d-4eab-b781-8c9f4abdb987.png)\r\n\r\n### Finish\r\nOn workstation, run **lab ssh-customize finish** to complete this exercise.\r\n\r\n![](/media/markdownx/d62ce265-fc95-4715-81fe-5960f726ff08.png)\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 254, "fields": {"title": "LAB: CONFIGURING AND SECURING SSH", "slug": "lab-configuring-and-securing-ssh", "content": "", "content_md": "## LAB\r\n\r\n# CONFIGURING AND SECURING SSH\r\n\r\n> ### PERFORMANCE CHECKLIST\r\n> In this lab, you will set up key-based authentication for users, and disable direct login as root and password authentication for all users for the OpenSSH service on one of your servers.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> * Authenticate using SSH keys.\r\n> * Prevent users from directly logging in as root over **ssh**.\r\n> * Prevent users from logging in to the system using SSH password-based authentication.\r\n> ### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\n> \r\n> On workstation, run **lab ssh-review start** to start the exercise. This script creates\r\nthe necessary user accounts and files.\r\n>\r\n> ![](/media/markdownx/9ba4ddb1-bc6c-4ad2-95dd-aa678e232abb.png)\r\n\r\n1.  From workstation, open an SSH session to servera as student.\r\n2. Use the su command to switch to production1 on servera.\r\n3. Use the ssh-keygen command to generate passphrase-less SSH keys for production1 on servera.\r\n4. Use the ssh-copy-id command to send the public key of the SSH key pair to production1 on serverb.\r\n5. Confirm that production1 can successfully log in to serverb using the SSH keys.\r\n6. Configure sshd on serverb to prevent users logging in as root. Use redhat as the password of the superuser.\r\n7. Configure sshd on serverb to allow users to authenticate using SSH keys only, rather than their passwords.\r\n\r\n### Evaluation\r\nOn workstation, run the **lab ssh-review grade** command to confirm success of this\r\nexercise.\r\n\r\n![](/media/markdownx/d7f1c0da-b482-4cc4-81d8-9a48620fb5e3.png)\r\n\r\n### Finish\r\n\r\nOn workstation, run lab ssh-review finish to complete this lab\r\n\r\n![](/media/markdownx/9d3624c3-1138-4227-b9e6-8dcefe834e6e.png)\r\n\r\nThis concludes the lab.\r\n\r\n<br>\r\n\r\n## SOLUTION\r\n\r\n# CONFIGURING AND SECURING SSH\r\n\r\n> ### PERFORMANCE CHECKLIST\r\n>  In this lab, you will set up key-based authentication for users, and disable direct login as\r\nroot and password authentication for all users for the OpenSSH service on one of your\r\nservers.\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> * Authenticate using SSH keys.\r\n>* Prevent users from directly logging in as root over **ssh**.\r\n> * Prevent users from logging in to the system using SSH password-based authentication.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\n> \r\n> On workstation, run **lab ssh-review start** to start the exercise. This script creates\r\nthe necessary user accounts and files.\r\n>\r\n> ![](/media/markdownx/822948bd-1d17-4d19-9607-f96d990fc219.png)\r\n\r\n1. From workstation, open an SSH session to servera as student.\r\n\r\n    ![](/media/markdownx/e2a90dc0-7bb4-467e-ac8c-c1a7c0646007.png)\r\n\r\n2. Use the su command to switch to production1 on servera.\r\n\r\n    ![](/media/markdownx/546621dc-b187-49e6-bc40-8a4cf6d68c8f.png)\r\n\r\n3. Use the **ssh-keygen** command to generate passphrase-less SSH keys for production1\r\non servera.\r\n\r\n    ![](/media/markdownx/b154cf76-637e-4213-be56-7b6574a85d43.png)\r\n    ![](/media/markdownx/8c5b43e8-d494-41db-87ed-790e4f808fca.png)\r\n\r\n4. Use the **ssh-copy-id** command to send the public key of the SSH key pair to\r\nproduction1 on serverb.\r\n\r\n    ![](/media/markdownx/56c3d245-2987-44cd-b4bc-ef058712a77e.png)\r\n\r\n5. Confirm that production1 can successfully log in to serverb using the SSH keys.\r\n\r\n    ![](/media/markdownx/c1cf5ac1-e8ee-48a4-8fd8-2b0362342047.png)\r\n\r\n6. Configure sshd on serverb to prevent users logging in as root. Use redhat as the\r\npassword of the superuser.\r\n\r\n    6.1. Use the su - command to switch to root on serverb.\r\n\r\n    ![](/media/markdownx/5018434f-714d-43b2-8b92-b008ab2fd3d8.png)\r\n\r\n    6.2.  Set PermitRootLogin to **no** in **/etc/ssh/sshd_config** and reload sshd. You\r\nmay use **vim /etc/ssh/sshd_config** to edit the configuration file of sshd.\r\n\r\n    ![](/media/markdownx/d82425ce-9364-4340-a2cd-213d0eeeac3f.png)\r\n\r\n    6.3.  Open another terminal on workstation and open an SSH session to servera as\r\nproduction1. From servera, try logging in to serverb as root. This should fail\r\nbecause you disabled root user login over SSH in the preceding step.\r\n\r\n    > #### NOTE\r\n    > For your convenience, the password-less login is already configured between\r\nworkstation and servera in the classroom environment.\r\n\r\n    ![](/media/markdownx/fd4794d9-d90c-4ef5-9a6a-18edcec39f75.png)\r\n\r\n    The preceding **ssh** command returned after three failed attempts to log in to servera as root. By default, the **ssh** command prefers to use SSH keys for authentication but if it does not find the necessary keys of the user, it requests the user's password for authentication.\r\n\r\n7. Configure sshd on serverb to allow users to authenticate using SSH keys only, rather than\r\ntheir passwords.\r\n\r\n    7.1. Return to the first terminal that has the root user's shell active on serverb. Set PasswordAuthentication to no in **/etc/ssh/sshd_config** and reload sshd.\r\nYou may use vim **/etc/ssh/sshd_config** to edit the configuration file of sshd\r\n\r\n    ![](/media/markdownx/b1246db4-833c-497f-b800-7e71ea99dee5.png)\r\n\r\n    7.2. Go to the second terminal that has production1 user's shell active on servera and try logging in to serverb as production2. This should fail because SSH keys are\r\nnot configured for production2, and the sshd service on serverb does not allow the use of passwords for authentication.\r\n\r\n    ![](/media/markdownx/f67d7c68-3ab5-47c2-88e1-01aa552194c8.png)\r\n\r\n    > #### NOTE\r\n    > For more granularity, you may use the explicit **-o PubkeyAuthentication=no**\r\nand **-o PasswordAuthentication=yes** options with the **ssh** command. This\r\nallows you to override the **ssh** command's defaults and confidently establish\r\nwhether the preceding command actually fails based on the settings you adjusted in\r\n**/etc/ssh/sshd_config** in the preceding step.\r\n\r\n    7.3. Return to the first terminal that has the root user's shell active on serverb. Verify\r\nthat **PubkeyAuthentication** is enabled in **/etc/ssh/sshd_config**. You may use\r\n**vim /etc/ssh/sshd_config** to view the config\r\n\r\n    ![](/media/markdownx/76ced934-89db-407a-a8d5-8e5f9f9675a2.png)\r\n\r\n    Notice that the PubkeyAuthentication line is commented. Any commented\r\nline in this file uses the default value. Commented lines indicate the default values of a parameter. The public key authentication of SSH is active by default, as the\r\ncommented line indicates.\r\n\r\n    7.4. Return to the second terminal that has production1 user's shell active on servera\r\nand try logging in to serverb as production1. This should succeed because SSH\r\nkeys are configured for production1 to log to serverb from servera.\r\n\r\n    ![](/media/markdownx/88eb5839-9cb2-4c59-8d0e-97764e93d5b7.png)\r\n\r\n    7.5.  From the second terminal, exit the production1 user's shell on both serverb and\r\nservera.\r\n\r\n    ![](/media/markdownx/9a6fcdd6-7bc6-4742-999f-31e1872024cd.png)\r\n\r\n    7.6. Close the second terminal on workstation.\r\n \r\n    ![](/media/markdownx/b8cbf46f-6485-4650-a22c-532ef3f6b39a.png)\r\n\r\n    7.7. From the first terminal, exit the root user's shell on serverb.\r\n\r\n    ![](/media/markdownx/73dfb2b4-269e-454c-bdd3-cbbef8aef1f8.png)\r\n\r\n    7.8. From the first terminal, exit the production1 user's shell on both serverb and servera.\r\n\r\n    ![](/media/markdownx/643cfcad-0664-4a0b-82b7-99486cbeb349.png)\r\n\r\n    7.9. Log out of servera and return to the student user's shell on workstation. \r\n\r\n    ![](/media/markdownx/f6ab4d3c-4069-4452-a0e3-862e67d2708f.png)\r\n\r\n    ### Evalution\r\n    On workstation, run the **lab ssh-review grade** command to confirm success of this\r\nexercise.\r\n\r\n    ![](/media/markdownx/46f190b9-311a-49e0-b953-e8c6bb153d3f.png)\r\n\r\n### Finish\r\n\r\nOn workstation, run lab ssh-review finish to complete this lab.\r\n\r\n![](/media/markdownx/bdb33ccb-2364-46e9-8eb1-93f7c36a564f.png)\r\n\r\nThis concludes the lab.", "order": 7, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 255, "fields": {"title": "SUMMARY", "slug": "summary-8", "content": "", "content_md": "## SUMMARY\r\nIn this chapter, you learned:\r\n\r\n* The **ssh** command allows users to access remote systems securely using the SSH protocol.\r\n* A client system stores remote servers' identities in **~/.ssh/known_hosts** and **/etc/ssh/ssh_known_hosts**.\r\n* SSH supports both password-based and key-based authentication.\r\n* The **ssh-keygen** command generates an SSH key pair for authentication. The **ssh-copy-id** command exports the public key to remote systems.\r\n* The sshd service implements the SSH protocol on Red Hat Enterprise Linux systems.\r\n* It is a recommended practice to configure sshd to disable remote logins as root and to require\r\npublic key authentication rather than password-based authentication.", "order": 8, "is_visible": true, "is_task": false, "module": 36, "draft": false, "files": []}}, {"model": "courses.section", "pk": 256, "fields": {"title": "DESCRIBING SYSTEM LOG ARCHITECTURE", "slug": "describing-system-log-architecture", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to describe the basic logging architecture used\r\nby Red Hat Enterprise Linux to record events.\r\n\r\n\r\n##SYSTEM LOGGING\r\nProcesses and the operating system kernel record a log of events that happen. These logs are\r\nused to audit the system and troubleshoot problems.\r\n\r\n\r\nMany systems record logs of events in text files which are kept in the /var/log directory. These\r\nlogs can be inspected using normal text utilities such as less and tail.\r\n\r\n\r\nA standard logging system based on the Syslog protocol is built into Red Hat Enterprise Linux.\r\nMany programs use this system to record events and organize them into log files. The systemd-\r\njournald and rsyslog services handle the syslog messages in Red Hat Enterprise Linux 8.\r\n\r\n\r\nThe systemd-journald service is at the heart of the operating system event logging\r\narchitecture. It collects event messages from many sources including the kernel, output from the\r\nearly stages of the boot process, standard output and standard error from daemons as they start\r\nup and run, and syslog events. It then restructures them into a standard format, and writes them\r\ninto a structured, indexed system journal. By default, this journal is stored on a file system that\r\ndoes not persist across reboots.\r\n\r\n\r\nHowever, the rsyslog service reads syslog messages received by systemd-journald from\r\nthe journal as they arrive. It then processes the syslog events, recording them to its log files or\r\nforwarding them to other services according to its own configuration.\r\n\r\n\r\nThe rsyslog service sorts and writes syslog messages to the log files that do persist across\r\nreboots in /var/log. The rsyslog service sorts the log messages to specific log files based on\r\nthe type of program that sent each message, or facility, and the priority of each syslog message.\r\n\r\n\r\nIn addition to syslog message files, the /var/log directory contains log files from other services\r\non the system. The following table lists some useful files in the /var/log directory.\r\n\r\n\r\n**Selected System Log Files**\r\n\r\n![](/media/markdownx/bd66c3be-dcee-41c4-91fc-dfed9b07e7c2.png)\r\n\r\n* NOTE<br>\r\nSome applications do not use syslog to manage their log messages, although\r\ntypically, they do place their log files in a subdirectory of /var/log. For example, the\r\nApache Web Server saves log messages to files in a subddirectory of the /var/log\r\ndirectory.\r\n\r\n* REFERENCES<br.\r\nsystemd-journald.service(8), rsyslogd(8), and rsyslog.conf(5) man pages\r\n\r\nFor more information refer to the Using the log files to troubleshoot problems\r\nsection in the Red Hat Enterprise Linux 8.0 Configuring basic system settings Guide\r\nat `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#Troubleshoot-log-files_getting-started-with-system-administration`", "order": 1, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 257, "fields": {"title": "QUIZ : DESCRIBING SYSTEM LOG ARCHITECTURE", "slug": "quiz-describing-system-log-architecture", "content": "", "content_md": "## QUIZ\r\n\r\nClick \r\n[https://course.btech.id/quiz/describing-system-log-arch/](https://course.btech.id/quiz/describing-system-log-arch/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 258, "fields": {"title": "REVIEWING SYSLOG FILES", "slug": "reviewing-syslog-files", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to interpret events in relevant syslog files to\r\ntroubleshoot problems or review system status.\r\n\r\n\r\n##LOGGING EVENTS TO THE SYSTEM<br>\r\nMany programs use the syslog protocol to log events to the system. Each log message is\r\ncategorized by a facility (the type of message) and a priority (the severity of the message).\r\nAvailable facilities are documented in the rsyslog.conf(5) man page.\r\n\r\n\r\nThe following table lists the standard eight syslog priorities from highest to lowest.\r\n\r\n**Overview of Syslog Priorities**\r\n\r\n![](/media/markdownx/858eeb39-3cb1-4ca1-94d8-09db9abe5750.png)\r\n\r\nThe rsyslog service uses the facility and priority of log messages to determine how to handle\r\nthem. This is configured by rules in the /etc/rsyslog.conf file and any file in the /etc/\r\nrsyslog.d directory that has a file name extension of .conf. Software packages can easily add\r\nrules by installing an appropriate file in the /etc/rsyslog.d directory.\r\n\r\n\r\nEach rule that controls how to sort syslog messages is a line in one of the configuration files. The\r\nleft side of each line indicates the facility and severity of the syslog messages the rule matches.\r\nThe right side of each line indicates what file to save the log message in (or where else to deliver\r\nthe message). An asterisk (*) is a wildcard that matches all values.\r\n\r\n\r\nFor example, the following line would record messages sent to the authpriv facility at any\r\npriority to the file /var/log/secure:\r\n```\r\nauthpriv.*            /var/log/secure\r\n```\r\n\r\nLog messages sometimes match more than one rule in rsyslog.conf. In such cases, one\r\nmessage is stored in more than one log file. To limit messages stored, the key word none in the\r\npriority field indicates that no messages for the indicated facility should be stored in the given file.\r\n\r\nInstead of logging syslog messages to a file, they can also be printed to the terminals of all\r\nlogged-in users. The rsyslog.conf file has a setting to print all the syslog messages with the\r\nemerg priority to the terminals of all logged-in users.\r\n\r\n##SAMPLE RULES OF RSYSLOG<br>\r\n\r\n![](/media/markdownx/d63f4d3e-e602-42d2-9ebd-93609653054e.png)\r\n\r\n* NOTE<br>\r\nThe syslog subsystem has many more features beyond the scope of this course.\r\nFor those who wish to explore further, consult the rsyslog.conf(5) man page\r\nand the extensive HTML documentation in /usr/share/doc/rsyslog/html/\r\nindex.html contained in the rsyslog-doc package, available from the AppStream\r\nrepository in Red Hat Enterprise Linux 8.\r\n\r\n##LOG FILE ROTATION<br>\r\nThe logrotate tool rotates log files to keep them from taking up too much space in the file\r\nsystem containing the /var/log directory. When a log file is rotated, it is renamed with an\r\nextension indicating the date it was rotated. For example, the old /var/log/messages file may become /var/log/messages-20190130 if it is rotated on 2019-01-30. Once the old log file is\r\nrotated, a new log file is created and the service that writes to it is notified.\r\n\r\nAfter a certain number of rotations, typically after four weeks, the oldest log file is discarded to\r\nfree disk space. A scheduled job runs the logrotate program daily to see if any logs need to be\r\nrotated. Most log files are rotated weekly, but logrotate rotates some faster, or slower, or when\r\nthey reach a certain size.\r\n\r\nConfiguration of logrotate is not covered in this course. For more information, see the\r\nlogrotate(8) man page.\r\n\r\n\r\n##ANALYZING A SYSLOG ENTRY<br>\r\nLog messages start with the oldest message on top and the newest message at the end of the log\r\nfile. The rsyslog service uses a standard format while recording entries in log files. The following\r\nexample explains the anatomy of a log message in the /var/log/secure log file.\r\n\r\n![](/media/markdownx/7bed37d2-7e6e-439d-9c8a-169390f0fe02.png)\r\n\r\n##MONITORING LOGS<br>\r\nMonitoring one or more log files for events is helpful to reproduce problems and issues. The tail\r\n-f /path/to/file command outputs the last 10 lines of the file specified and continues to\r\noutput new lines in the file as they get written.\r\n\r\nFor example, to monitor for failed login attempts, run the tail command in one terminal and\r\nthen in another terminal, run the ssh command as the root user while a user tries to log in to the\r\nsystem.\r\n\r\nIn the first terminal, run the following tail command:\r\n```\r\n[root@host ~]# tail -f /var/log/secure\r\n```\r\n\r\n\r\nIn the second terminal, run the following ssh command:\r\n```\r\n[root@host ~]# ssh root@localhost\r\nroot@localhost's password: redhat\r\n...output omitted...\r\n[root@host ~]#\r\n```\r\n\r\nReturn to the first terminal and view the logs.\r\n```\r\n...output omitted...\r\nFeb 10 09:01:13 host sshd[2712]: Accepted password for root from 172.25.254.254\r\n  port 56801 ssh2\r\nFeb 10 09:01:13 host sshd[2712]: pam_unix(sshd:session): session opened for user\r\n  root by (uid=0)\r\n```\r\n\r\n##SENDING SYSLOG MESSAGES MANUALLY<br>\r\nThe logger command can send messages to the rsyslog service. By default, it sends the\r\nmessage to the user facility with the notice priority (user.notice) unless specified otherwise\r\nwith the -p option. It is useful to test any change to the rsyslog service configuration.\r\n\r\nTo send a message to the rsyslog service that gets recorded in the /var/log/boot.log log\r\nfile, execute the following logger command:\r\n\r\n* REFERENCES<br>\r\nlogger(1), tail(1), rsyslog.conf(5), and logrotate(8) man pages rsyslog Manual\r\n\r\n\t* /usr/share/doc/rsyslog/html/index.html provided by the rsyslog-doc\r\npackage\r\n\r\nFor more information refer to the Using the log files to troubleshoot problems\r\nsection in the Red Hat Enterprise Linux 8.0 Configuring basic system settings Guide\r\nat `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#Troubleshoot-log-files_getting-started-with-system-administration`", "order": 3, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 259, "fields": {"title": "GUIDED EXERCISE : REVIEWING SYSLOG FILES", "slug": "guided-exercise-reviewing-syslog-files", "content": "", "content_md": "In this exercise, you will reconfigure rsyslog to write specific log messages to a new file.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to configure the rsyslog service to write all log messages with the\r\ndebug priority to the /var/log/messages-debug log file.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run lab log-configure start to start the exercise. This script\r\nensures that the environment is setup correctly.\r\n```\r\n[student@workstation ~]$ lab log-configure start\r\n```\r\n\r\n* 1.From workstation, open an SSH session to servera as student.\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Configure rsyslog on servera to log all messages with the debug priority, or higher, for\r\nany service into the new /var/log/messages-debug log file by adding the rsyslog\r\nconfiguration file /etc/rsyslog.d/debug.conf.\r\n\r\n* 2.1.Use the sudo -i command to switch to the root user. Specify student as the\r\npassword for the student user if asked while running the sudo -i command.\r\n\r\n```\r\n[student@servera ~]$ sudo -i\r\n[sudo] password for student: student\r\n[root@servera ~]#\r\n```\r\n\r\n* 2.2.Create the /etc/rsyslog.d/debug.conf file with the necessary entries to\r\nredirect all log messages having the debug priority to /var/log/messages-\r\ndebug. You may use the vim /etc/rsyslog.d/debug.conf command to create\r\nthe file with the following content.\r\n\r\n```\r\n*.debug /var/log/messages-debug\r\n```\r\n\r\n* 2.3.Restart the rsyslog service.\r\n```\r\n[root@servera ~]# systemctl restart rsyslog\r\n```\r\n* 3.Verify that all the log messages with the debug priority appears in the /var/log/\r\nmessages-debug file.\r\n\r\n* 3.1.Use the logger command with the -p option to generate a log message with the\r\nuser facility and the debug priority.\r\n```\r\n[root@servera ~]# logger -p user.debug \"Debug Message Test\"\r\n```\r\n\r\n* 3.2.Use the tail command to view the last ten log messages from the /var/log/\r\nmessages-debug file and confirm that you see the Debug Message Test\r\nmessage among the other log messages.\r\n```\r\n[root@servera ~]# tail /var/log/messages-debug\r\nFeb 13 18:22:38 servera systemd[1]: Stopping System Logging Service...\r\nFeb 13 18:22:38 servera rsyslogd[25176]: [origin software=\"rsyslogd\"\r\nswVersion=\"8.37.0-9.el8\" x-pid=\"25176\" x-info=\"http://\r\nwww.rsyslog.com\"] exiting on signal 15.\r\nFeb 13 18:22:38 servera systemd[1]: Stopped System Logging Service.\r\nFeb 13 18:22:38 servera systemd[1]: Starting System Logging Service...\r\nFeb 13 18:22:38 servera rsyslogd[25410]: environment variable TZ is\r\nnot set, auto correcting this to TZ=/etc/localtime [v8.37.0-9.el8\r\ntry http://www.rsyslog.com/e/2442 ]\r\nFeb 13 18:22:38 servera systemd[1]: Started System Logging Service.\r\nFeb 13 18:22:38 servera rsyslogd[25410]: [origin software=\"rsyslogd\"\r\nswVersion=\"8.37.0-9.el8\" x-pid=\"25410\" x-info=\"http://\r\nwww.rsyslog.com\"] start\r\nFeb 13 18:27:58 servera student[25416]: Debug Message Test\r\n```\r\n\r\n* 3.3.Exit both the root and student users' shells on servera to return to the student\r\nuser's shell on workstation.\r\n```\r\n[root@servera ~]# exit\r\nlogout\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run lab log-configure finish to complete this exercise. This script\r\nensures that the environment is restored back to the clean state.\r\n```\r\n[student@workstation ~]$ lab log-configure finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 260, "fields": {"title": "REVIEWING SYSTEM JOURNAL ENTRIES", "slug": "reviewing-system-journal-entries", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to find and interpret entries in the system journal\r\nto troubleshoot problems or review system status.\r\n\r\n##FINDING EVENTS<br>\r\nThe systemd-journald service stores logging data in a structured, indexed binary file called the\r\njournal. This data includes extra information about the log event. For example, for syslog events\r\nthis includes the facility and the priority of the original message.\r\n\r\n* IMPORTANT<br>\r\nIn Red Hat Enterprise Linux 8, the /run/log directory stores the system journal by\r\ndefault. The contents of the /run/log directory get cleared after a reboot. You can\r\nchange this setting, and how to do so is discussed later in this chapter.\r\n\r\nTo retrieve log messages from the journal, use the journalctl command. You can use this\r\ncommand to view all messages in the journal, or to search for specific events based on a wide\r\nrange of options and criteria. If you run the command as root, you have full access to the journal.\r\nRegular users can also use this command, but might be restricted from seeing certain messages.\r\n\r\n![](/media/markdownx/30e6fd2a-5922-481f-bee3-0df5bb95c044.png)\r\n\r\nThe journalctl command highlights important log messages: messages at notice or warning\r\npriority are in bold text while messages at the error priority or higher are in red text.\r\n\r\n\r\nThe key to successfully using the journal for troubleshooting and auditing is to limit journal\r\nsearches to show only relevant output.\r\n\r\n\r\nBy default, journalctl -n shows the last 10 log entries. You can adjust this with an optional\r\nargument that specifies how many log entries to display. For the last five log entries, run the\r\nfollowing journalctl command:\r\n\r\n![](/media/markdownx/64ca2578-994b-4cb1-bf02-c441f2fc0aee.png)\r\n\r\nSimilar to the tail -f command, the journalctl -f command outputs the last 10 lines of the\r\nsystem journal and continues to output new journal entries as they get written to the journal. To\r\nexit the journalctl -f process, use the Ctrl+C key combination.\r\n\r\n![](/media/markdownx/ddcce147-d0cf-426b-9686-a6a9378b2ee6.png)\r\n\r\nTo help troubleshoot problems, you might want to filter the output of the journal based on the\r\npriority of the journal entries. The journalctl -p takes either the name or the number of a\r\npriority level and shows the journal entries for entries at that priority and above. The journalctl\r\ncommand understands the debug, info, notice, warning, err, crit, alert, and emerg\r\npriority levels.Similar to the tail -f command, the journalctl -f command outputs the last 10 lines of the\r\nsystem journal and continues to output new journal entries as they get written to the journal. To\r\nexit the journalctl -f process, use the Ctrl+C key combination.\r\n\r\nRun the following journalctl command to list journal entries at the err priority or higher:\r\n\r\n![](/media/markdownx/72b7dd2a-0cf3-45a6-9e61-6575fcf4359c.png)\r\n\r\nWhen looking for specific events, you can limit the output to a specific time frame. The\r\njournalctl command has two options to limit the output to a specific time range, the --since\r\nand --until options. Both options take a time argument in the format \"YYYY-MM-DD hh:mm:ss\"\r\n(the double-quotes are required to preserve the space in the option). If the date is omitted,\r\nthe command assumes the current day, and if the time is omitted, the command assumes the\r\nwhole day starting at 00:00:00. Both options take yesterday, today, and tomorrow as valid\r\narguments in addition to the date and time field.\r\n\r\nRun the following journalctl command to list all journal entries from today's records.\r\n\r\n![](/media/markdownx/7baa1f64-385f-48a3-b949-cfb9443bae0c.png)\r\n\r\nRun the following journalctl command to list all journal entries ranging from 2019-02-10\r\n20:30:00 to 2019-02-13 12:00:00.\r\n\r\n```\r\n[root@host ~]# journalctl --since \"2019-02-10 20:30:00\" \\\r\n--until \"2019-02-13 12:00:00\"\r\n...output omitted...\r\n```\r\n\r\nYou can also specify all entries since a time relative to the present. For example, to specify all\r\nentries in the last hour, you can use the following command:\r\n\r\n```\r\n[root@host ~]# journalctl --since \"-1 hour\"\r\n...output omitted...\r\n```\r\n\r\n* NOTE<br>\r\nYou can use other, more sophisticated time specifications with the --since and --\r\nuntil options. For some examples, see the systemd.time(7) man page.\r\n\r\nIn addition to the visible content of the journal, there are fields attached to the log entries that\r\ncan only be seen when verbose output is turned on. Any displayed extra field can be used to filter\r\nthe output of a journal query. This is useful to reduce the output of complex searches for certain\r\nevents in the journal.\r\n\r\n```\r\n\r\n[root@host ~]# journalctl -o verbose\r\n-- Logs begin at Wed 2019-02-20 16:01:17 +07, end at Thu 2019-02-21 18:31:14 +07.\r\n--\r\n...output omitted...\r\nThu 2019-02-21 18:31:14.509128 +07...\r\n   PRIORITY=6\r\n   _BOOT_ID=4409bbf54680496d94e090de9e4a9e23\r\n   _MACHINE_ID=73ab164e278e48be9bf80e80714a8cd5\r\n   SYSLOG_FACILITY=3\r\n   SYSLOG_IDENTIFIER=systemd\r\n  _UID=0\r\n  _GID=0\r\n  CODE_FILE=../src/core/job.c\r\n  CODE_LINE=826\r\n  CODE_FUNC=job_log_status_message\r\n  JOB_TYPE=start\r\n  JOB_RESULT=done\r\n  MESSAGE_ID=39f53479d3a045ac8e11786248231fbf\r\n  _TRANSPORT=journal\r\n  _PID=1\r\n  _COMM=systemd\r\n  _EXE=/usr/lib/systemd/systemd\r\n  _CMDLINE=/usr/lib/systemd/systemd --switched-root --system --deserialize 18\r\n  _CAP_EFFECTIVE=3fffffffff\r\n  _SELINUX_CONTEXT=system_u:system_r:init_t:s0\r\n  _SYSTEMD_CGROUP=/init.scope\r\n  _SYSTEMD_UNIT=init.scope\r\n  _SYSTEMD_SLICE=-.slice\r\n  UNIT=dnf-makecache.service\r\n  MESSAGE=Started dnf makecache.\r\n  _HOSTNAME=host.lab.example.com\r\n  INVOCATION_ID=d6f90184663f4309835a3e8ab647cb0e\r\n  _SOURCE_REALTIME_TIMESTAMP=1550748674509128\r\n```\r\n\r\nThe following list gives the common fields of the system journal that can be used to search for\r\nlines relevant to a particular process or event.\r\n\r\n* _COMM is the name of the command\r\n* _EXE is the path to the executable for the process\r\n* _PID is the PID of the process\r\n* _UID is the UID of the user running the process\r\n* _SYSTEMD_UNIT is the systemd unit that started the proces\r\n\r\nMore than one of the system journal fields can be combined to form a granular search query with\r\nthe journalctl command. For example, the following journalctl command shows all journal\r\nentries related to the sshd.service systemd unit from a process with PID 1182.\r\n\r\n```\r\nroot@host ~]# journalctl _SYSTEMD_UNIT=sshd.service _PID=1182\r\nApr 03 19:34:27 host.lab.example.com sshd[1182]: Accepted password for root\r\n   from ::1 port 52778 ssh2\r\nApr 03 19:34:28 host.lab.example.com sshd[1182]: pam_unix(sshd:session): session\r\n   opened for user root by (uid=0)\r\n...output omitted...\r\n```\r\n\r\n* NOTE<br>\r\nFor a list of commonly used journal fields, consult the systemd.journal-fields(7) man page.\r\n\r\n* REFERENCES\r\njournalctl(1), systemd.journal-fields(7), and systemd.time(7) man pages\r\n\r\nFor more information refer to the Using the log files to troubleshoot problems\r\nsection in the Red Hat Enterprise Linux 8.0 Configuring basic system settings Guide\r\nat `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#Troubleshoot-log-files_getting-started-with-system-administration`", "order": 5, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 261, "fields": {"title": "GUIDED EXERCISE : REVIEWING SYSTEM JOURNAL ENTRIES", "slug": "guided-exercise-reviewing-system-journal-entries", "content": "", "content_md": "In this exercise, you will search the system journal for entries recording events that match\r\nspecific criteria.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to search the system journal for entries recording events based on\r\ndifferent criteria.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\n\r\nOn workstation, run lab log-query start to start the exercise. This script ensures\r\nthat the environment is setup correctly.\r\n```\r\n[student@workstation ~]$ lab log-query start\r\n```\r\n\r\n* 1.From workstation, open an SSH session to servera as student.\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Use the _PID=1 match with the journalctl command to display only log events\r\noriginating from the systemd process running with the process identifier of 1 on servera.\r\nTo quit journalctl, press q.\r\n\r\n```\r\n[student@servera ~]$ journalctl _PID=1\r\n...output omitted...\r\nFeb 13 13:21:08 localhost systemd[1]: Found device /dev/disk/by-uuid/\r\ncdf61ded-534c-4bd6-b458-cab18b1a72ea.\r\nFeb 13 13:21:08 localhost systemd[1]: Started dracut initqueue hook.\r\nFeb 13 13:21:08 localhost systemd[1]: Found device /dev/disk/by-\r\nuuid/44330f15-2f9d-4745-ae2e-20844f22762d.\r\nFeb 13 13:21:08 localhost systemd[1]: Reached target Initrd Root Device.\r\nlines 1-5/5 (END) q\r\n[student@servera ~]$\r\n```\r\n\r\n* 3.Use the _UID=81 match with the journalctl command to display all log events\r\noriginating from a system service started with the user identifier of 81 on servera. To quit\r\njournalctl press q.\r\n\r\n```\r\n[student@servera ~]$ journalctl _UID=81\r\n...output omitted...\r\nFeb 22 01:29:09 servera.lab.example.com dbus-daemon[672]: [system]\r\n   Activating via systemd: service name='org.freedesktop.nm_dispatcher'>\r\nFeb 22 01:29:09 servera.lab.example.com dbus-daemon[672]: [system]\r\n   Successfully activated service 'org.freedesktop.nm_dispatcher'\r\nlines 1-5/5 (END) q\r\n[student@servera ~]$\r\n```\r\n\r\n* 4.Use the -p warning option with the journalctl command to display log events with\r\npriority warning and above on servera. To quit journalctl press q.\r\n\r\n```\r\n[student@servera ~]$ journalctl -p warning\r\n...output omitted...\r\nFeb 13 13:21:07 localhost kernel: Detected CPU family 6 model 13 stepping 3\r\nFeb 13 13:21:07 localhost kernel: Warning: Intel Processor - this hardware\r\n  has not undergone testing by Red Hat and might not >\r\nFeb 13 13:21:07 localhost kernel: acpi PNP0A03:00: fail to add MMCONFIG\r\n  information, can't access extended PCI configuration s>\r\nFeb 13 13:21:07 localhost rpc.statd[288]: Running as root. chown /var/lib/\r\n  nfs/statd to choose different user\r\nFeb 13 13:21:07 localhost rpc.idmapd[293]: Setting log level to 0\r\n...output omitted...\r\nFeb 13 13:21:13 servera.lab.example.com rsyslogd[1172]: environment variable\r\n  TZ is not set, auto correcting this to TZ=/etc/lo>\r\nFeb 13 14:51:42 servera.lab.example.com systemd[1]: cgroup compatibility\r\n  translation between legacy and unified hierarchy sett>\r\nFeb 13 17:15:37 servera.lab.example.com rsyslogd[25176]: environment\r\n  variable TZ is not set, auto correcting this to TZ=/etc/l>\r\nFeb 13 18:22:38 servera.lab.example.com rsyslogd[25410]: environment\r\n  variable TZ is not set, auto correcting this to TZ=/etc/l>\r\nFeb 13 18:47:55 servera.lab.example.com rsyslogd[25731]: environment\r\n  variable TZ is not set, auto correcting this to TZ=/etc/l>\r\nlines 1-17/17 (END) q\r\n```\r\n\r\n* 5.Display all log events recorded in the past 10 minutes from the current time on servera.\r\n\r\n* 5.1.se the --since option with the journalctl command to display all log events\r\nrecorded in the past 10 minutes on servera. To quit journalctl press q.\r\n\r\n```\r\n[student@servera ~]$ journalctl --since \"-10min\"\r\n...output omitted...\r\nFeb 13 22:31:01 servera.lab.example.com CROND[25890]: (root) CMD (run-\r\n  parts /etc/cron.hourly)\r\nFeb 13 22:31:01 servera.lab.example.com run-parts[25893]: (/etc/\r\n  cron.hourly) starting 0anacron\r\nFeb 13 22:31:01 servera.lab.example.com run-parts[25899]: (/etc/\r\n  cron.hourly) finished 0anacron\r\nFeb 13 22:31:41 servera.lab.example.com sshd[25901]: Bad protocol\r\n  version identification 'brain' from 172.25.250.254 port 37450\r\nFeb 13 22:31:42 servera.lab.example.com sshd[25902]: Accepted\r\n  publickey for root from 172.25.250.254 port 37452 ssh2: RSA SHA2>\r\nFeb 13 22:31:42 servera.lab.example.com systemd[1]: Started /run/\r\n  user/0 mount wrapper.\r\nFeb 13 22:31:42 servera.lab.example.com systemd[1]: Created slice User\r\n  Slice of UID 0.\r\nFeb 13 22:31:42 servera.lab.example.com systemd[1]: Starting User\r\n  Manager for UID 0...\r\nFeb 13 22:31:42 servera.lab.example.com systemd[1]: Started Session\r\n  118 of user root.\r\nFeb 13 22:31:42 servera.lab.example.com systemd-logind[712]: New\r\n  session 118 of user root.\r\nFeb 13 22:31:42 servera.lab.example.com systemd[25906]:\r\n  pam_unix(systemd-user:session): session opened for user root by\r\n(uid=0)\r\n...output omitted...\r\nlines 1-32/84 39% q\r\n```\r\n\r\n* 6.Use the --since option and the _SYSTEMD_UNIT=\"sshd.service\" match with the\r\njournalctl command to display all the log events originating from the sshd service\r\nrecorded since 09:00:00 this morning on servera. To quit journalctl press q.\r\n\r\n```\r\n[student@servera ~]$ journalctl --since 9:00:00 _SYSTEMD_UNIT=\"sshd.service\"\r\n...output omitted...\r\nFeb 13 13:21:12 servera.lab.example.com sshd[727]: Server listening on\r\n  0.0.0.0 port 22.\r\nFeb 13 13:21:12 servera.lab.example.com sshd[727]: Server listening on ::\r\n  port 22.\r\nFeb 13 13:22:07 servera.lab.example.com sshd[1238]: Accepted publickey for\r\n  student from 172.25.250.250 port 50590 ssh2: RSA SH>\r\nFeb 13 13:22:07 servera.lab.example.com sshd[1238]: pam_unix(sshd:session):\r\n  session opened for user student by (uid=0)\r\nFeb 13 13:22:08 servera.lab.example.com sshd[1238]: pam_unix(sshd:session):\r\n  session closed for user student\r\nFeb 13 13:25:47 servera.lab.example.com sshd[1289]: Accepted publickey for\r\n  root from 172.25.250.254 port 37194 ssh2: RSA SHA25>\r\nFeb 13 13:25:47 servera.lab.example.com sshd[1289]: pam_unix(sshd:session):\r\n  session opened for user root by (uid=0)\r\nFeb 13 13:25:47 servera.lab.example.com sshd[1289]: pam_unix(sshd:session):\r\n  session closed for user root\r\nFeb 13 13:25:48 servera.lab.example.com sshd[1316]: Accepted publickey for\r\n  root from 172.25.250.254 port 37196 ssh2: RSA SHA25>\r\nFeb 13 13:25:48 servera.lab.example.com sshd[1316]: pam_unix(sshd:session):\r\n  session opened for user root by (uid=0)\r\nFeb 13 13:25:48 servera.lab.example.com sshd[1316]: pam_unix(sshd:session):\r\n  session closed for user root\r\nFeb 13 13:26:07 servera.lab.example.com sshd[1355]: Accepted publickey for\r\n  student from 172.25.250.254 port 37198 ssh2: RSA SH>\r\nFeb 13 13:26:07 servera.lab.example.com sshd[1355]: pam_unix(sshd:session):\r\n  session opened for user student by (uid=0)\r\nFeb 13 13:52:28 servera.lab.example.com sshd[1473]: Accepted publickey for\r\n  root from 172.25.250.254 port 37218 ssh2: RSA SHA25>\r\nFeb 13 13:52:28 servera.lab.example.com sshd[1473]: pam_unix(sshd:session):\r\n  session opened for user root by (uid=0)\r\n...output omitted...\r\nlines 1-32 q\r\n```\r\n\r\n* 7.Log out of servera.\r\n\r\n```\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run lab log-query finish to complete this exercise. This script ensures\r\nthat the environment is restored back to the clean state.\r\n```\r\n[student@workstation ~]$ lab log-query finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 262, "fields": {"title": "PRESERVING THE SYSTEM JOURNAL", "slug": "preserving-the-system-journal", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to configure the system journal to preserve the\r\nrecord of events when a server is rebooted.\r\n\r\n##STORING THE SYSTEM JOURNAL PERMANENTLY<>br\r\nBy default, the system journals are kept in the /run/log/journal directory, which means the\r\njournals are cleared when the system reboots. You can change the configuration settings of the\r\nsystemd-journald service in the /etc/systemd/journald.conf file to make the journals\r\npersist across reboot.\r\n\r\nThe Storage parameter in the /etc/systemd/journald.conf file defines whether to\r\nstore system journals in a volatile manner or persistently across reboot. Set this parameter to\r\npersistent, volatile, or auto as follows:\r\n\r\n* persistent: stores journals in the /var/log/journal directory which persists across\r\nreboots.\r\n\r\nIf the /var/log/journal directory does not exist, the systemd-journald service creates it.\r\n\r\n* volatile: stores journals in the volatile /run/log/journal directory.<br>\r\nAs the /run file system is temporary and exists only in the runtime memory, data stored in it,\r\nincluding system journals, do not persist across reboot.\r\n\r\n* auto: rsyslog determines whether to use persistent or volatile storage. If the /var/log/\r\njournal directory exists, then rsyslog uses persistent storage, otherwise it uses volatile\r\nstorage.\r\n\r\nThis is the default action if the Storage parameter is not set.\r\n\r\nThe advantage of persistent system journals is that the historic data is available immediately\r\nat boot. However, even with a persistent journal, not all data is kept forever. The journal has a\r\nbuilt-in log rotation mechanism that triggers monthly. In addition, by default, the journals are not\r\nallowed to get larger than 10% of the file system it is on, or leave less than 15% of the file system\r\nfree. These values can be tuned for both the runtime and persistent journals in /etc/systemd/\r\njournald.conf. The current limits on the size of the journal are logged when the systemd-\r\njournald process starts. The following command output shows the journal entries that reflect\r\nthe current size limits:\r\n\r\n```\r\n[user@host ~]$ journalctl | grep -E 'Runtime|System journal'\r\nFeb 25 13:01:46 localhost systemd-journald[147]: Runtime journal (/run/log/\r\n  journal/ae06db7da89142138408d77efea9229c) is 8.0M, max 91.4M, 83.4M free.\r\nFeb 25 13:01:48 remotehost.lab.example.com systemd-journald[548]: Runtime journal\r\n  (/run/log/journal/73ab164e278e48be9bf80e80714a8cd5) is 8.0M, max 91.4M, 83.4M free.\r\nFeb 25 13:01:48 remotehost.lab.example.com systemd-journald[548]: System journal\r\n  (/var/log/journal/73ab164e278e48be9bf80e80714a8cd5) is 8.0M, max 3.7G, 3.7G free. Feb 25 \r\nFeb 25 13:01:48 remotehost.lab.example.com systemd[1]: Starting Tell Plymouth To Write\r\n  Out Runtime Data...\r\n13:01:48 remotehost.lab.example.com systemd[1]: Started Tell Plymouth To Write\r\n  Out Runtime Data.\r\n```\r\n\r\n* NOTE<br>\r\nIn the grep above, the pipe (|) symbol acts as an or indicator. That is, grep\r\nmatches any line containing either the Runtime string or the System string\r\nfrom the journalctl output. This fetches the current size limits on the volatile\r\n(Runtime) journal store as well the persistent (System) journal store.\r\n\r\n###Configuring Persistent System Journals\r\n\r\nTo configure the systemd-journald service to preserve system journals persistently across\r\nreboot, set Storage to persistent in the /etc/systemd/journald.conf file. Run the text\r\neditor of your choice as the superuser to edit the /etc/systemd/journald.conf file.\r\n\r\n```\r\n[Journal]\r\nStorage=persistent\r\n...output omitted...\r\n```\r\n\r\nAfter editing the configuration file, restart the systemd-journald service to bring the\r\nconfiguration changes into effect.\r\n\r\n```\r\n[root@host ~]# systemctl restart systemd-journald\r\n```\r\n\r\nif the systemd-journald service successfully restarts, you can see that the /var/log/\r\njournal directory is created and contains one or more subdirectories. These subdirectories have\r\nhexadecimal characters in their long names and contain *.journal files. The *.journal files\r\nare the binary files that store the structured and indexed journal entries.\r\n\r\n\r\n```\r\n[root@host ~]# ls /var/log/journal\r\n73ab164e278e48be9bf80e80714a8cd5\r\n[root@host ~]# ls /var/log/journal/73ab164e278e48be9bf80e80714a8cd5\r\nsystem.journal\r\nuser-1000.journal\r\n```\r\n\r\nWhile the system journals persist across reboot, you get an extensive number of entries in the\r\noutput of the journalctl command that includes entries from the current system boot as well\r\nas the previous ones. To limit the output to a specific system boot, use the -b option with the\r\njournalctl command. The following journalctl command retrieves the entries limited to the\r\nfirst system boot:\r\n\r\n```\r\n[root@host ~]# journalctl -b 1\r\n...output omitted...\r\n```\r\n\r\nThe following journalctl command retrieves the entries limited to the second system boot. The\r\nfollowing argument is meaningful only if the system has been rebooted for more than twice:\r\n\r\n```\r\n[root@host ~]# journalctl -b 2\r\n```\r\n\r\nThe following journalctl command retrieves the entries limited to the current system boot:\r\n\r\n```\r\n[root@host ~]# journalctl -b\r\n```\r\n\r\n* NOTE<br>\r\nWhen debugging a system crash with a persistent journal, it is usually required to\r\nlimit the journal query to the reboot before the crash happened. The -b option can\r\nbe accompanied by a negative number indicating how many prior system boots the\r\noutput should include. For example, journalctl -b -1 limits the output to only\r\nthe previous boot.\r\n\r\n* REFERENCES<br>\r\nsystemd-journald.conf(5), systemd-journald(8) man pages\r\n\r\nFor more information refer to the Using the log files to troubleshoot problems\r\nsection in the Red Hat Enterprise Linux 8.0 Configuring basic system settings Guide\r\nat `https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#Troubleshoot-log-files_getting-started-with-system-administration`", "order": 7, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 263, "fields": {"title": "GUIDED EXERCISE : PRESERVING THE SYSTEM JOURNAL", "slug": "guided-exercise-preserving-the-system-journal", "content": "", "content_md": "In this exercise, you will configure the system journal to preserve its data after a reboot.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to configure the system journal to preserve its data after a reboot.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\n\r\nOn workstation, run lab log-preserve start to start the exercise. This script\r\nensures that the environment is set up correctly.\r\n```\r\n[student@workstation ~]$ lab log-preserve start\r\n```\r\n\r\n* 1.From workstation, open an SSH session to servera as student.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.As the superuser, confirm that the /var/log/journal directory does not exist. Use the\r\nls command to list the /var/log/journal directory contents. Use sudo to elevate the\r\nstudent user privileges. Use student as the password if asked.\r\n\r\n```\r\n[student@servera ~]$ sudo ls /var/log/journal\r\n[sudo] password for student: student\r\nls: cannot access '/var/log/journal': No such file or directory\r\n```\r\n\r\nSince the /var/log/journal directory does not exist, systemd-journald service is\r\nnot preserving its journals.\r\n\r\n* 3.Configure the systemd-journald service on servera to preserve journals across a\r\nreboot.\r\n\r\n* 3.1.Uncomment the Storage=auto line in the /etc/systemd/journald.conf file\r\nand set Storage to persistent. You may use the sudo vim /etc/systemd/\r\njournald.conf command to edit the configuration file. Type / Storage=auto\r\nfrom vim command mode to search for the Storage=auto line.\r\n\r\n```\r\n...output omitted...\r\n[Journal]\r\nStorage=persistent\r\n...output omitted...\r\n```\r\n\r\n* 3.2.Use the systemctl command to restart the systemd-journald service to bring\r\nthe configuration changes into effect.\r\n\r\n```\r\n[student@servera ~]$ sudo systemctl restart systemd-journald.service\r\n```\r\n\r\n* 4.Confirm that the systemd-journald service on servera preserves its journals such that\r\nthe journals persist across reboots.\r\n\r\n* 4.1.Use the systemctl reboot command to restart servera.\r\n\r\n```\r\n[student@servera ~]$ sudo systemctl reboot\r\nConnection to servera closed by remote host.\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\nNotice that the SSH connection was terminated as soon as you restarted the\r\nservera system.\r\n\r\n* 4.2.Open an SSH session to servera again.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 4.3.Use the ls command to confirm that the /var/log/journal directory exists. The\r\n/var/log/journal directory contains a subdirectory with a long hexadecimal\r\nname. The journal files are found in that directory. The subdirectory name on your\r\nsystem will be different.\r\n\r\n```\r\n[student@servera ~]$ sudo ls /var/log/journal\r\n[sudo] password for student: student\r\n73ab164e278e48be9bf80e80714a8cd5\r\n[student@servera ~]$ sudo ls /var/log/\r\njournal/73ab164e278e48be9bf80e80714a8cd5\r\nsystem.journal\r\nuser-1000.journal\r\n```\r\n\r\n* 4.4.Log out of servera.\r\n\r\n```\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run lab log-preserve finish to complete this exercise. This script\r\nensures that the environment is restored back to the clean state.\r\n```\r\n[student@workstation ~]$ lab log-preserve finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 264, "fields": {"title": "MAINTAINING ACCURATE TIME", "slug": "maintaining-accurate-time", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to maintain accurate time synchronization using\r\nNTP and configure the time zone to ensure correct time stamps for events recorded by the system\r\njournal and logs.\r\n\r\n\r\n##SETTING LOCAL CLOCKS AND TIME ZONES<br>\r\nCorrect synchronized system time is critical for log file analysis across multiple systems. The\r\nNetwork Time Protocol (NTP) is a standard way for machines to provide and obtain correct time\r\ninformation on the Internet. A machine may get accurate time information from public NTP\r\nservices on the Internet, such as the NTP Pool Project. A high-quality hardware clock to serve\r\naccurate time to local clients is another option.\r\n\r\n\r\nThe timedatectl command shows an overview of the current time-related system settings,\r\nincluding current time, time zone, and NTP synchronization settings of the system.\r\n\r\n```\r\nuser@host ~]$ timedatectl\r\n               Local time: Fri 2019-04-05 16:10:29 CDT\r\n           Universal time: Fri 2019-04-05 21:10:29 UTC\r\n                 RTC time: Fri 2019-04-05 21:10:29\r\n                Time zone: America/Chicago (CDT, -0500)\r\nSystem clock synchronized: yes\r\n              NTP service: active\r\n          RTC in local TZ: no\r\n\r\n```\r\n\r\nA database of time zones is available and can be listed with the timedatectl list-\r\ntimezones command.\r\n\r\n```\r\n[user@host ~]$ timedatectl list-timezones\r\nAfrica/Abidjan\r\nAfrica/Accra\r\nAfrica/Addis_Ababa\r\nAfrica/Algiers\r\nAfrica/Asmara\r\nAfrica/Bamako\r\n...\r\n```\r\n\r\nTime zone names are based on the public time zone database that IANA maintains. Time zones are\r\nnamed based on continent or ocean, then typically but not always the largest city within the time\r\nzone region. For example, most of the US Mountain time zone is America/Denver.\r\n\r\nSelecting the correct name can be non-intuitive in cases where localities inside the time zone\r\nhave different daylight saving time rules. For example, in the USA, much of the state of Arizona\r\n(US Mountain time) does not have a daylight saving time adjustment at all and is in the time zone\r\nAmerica/Phoenix.\r\n\r\nThe command tzselect is useful for identifying correct zoneinfo time zone names. It\r\ninteractively prompts the user with questions about the system's location, and outputs the name\r\nof the correct time zone. It does not make any change to the time zone setting of the system.\r\n\r\nThe superuser can change the system setting to update the current time zone using the\r\ntimedatectl set-timezone command. The following timedatectl command updates the\r\ncurrent time zone to America/Phoenix.\r\n\r\n```\r\n[root@host ~]# timedatectl set-timezone America/Phoenix\r\nuser@host ~]# timedatectl\r\n               Local time: Fri 2019-04-05 14:12:39 MST\r\n           Universal time: Fri 2019-04-05 21:12:39 UTC\r\n                 RTC time: Fri 2019-04-05 21:12:39\r\n                Time zone: America/Phoenix (MST, -0700)\r\nSystem clock synchronized: yes\r\n              NTP service: active\r\n          RTC in local TZ: no\r\n```\r\n\r\n* NOTE<br>\r\nShould you need to use the Coordinated Universal Time (UTC) on a particular\r\nserver, set its time zone to UTC. The tzselect command does not include\r\nthe name of the UTC time zone. Use the timedatectl set-timezone UTC\r\ncommand to set the system's current time zone to UTC.\r\n\r\nUse the timedatectl set-time command to change the system's current time. The time is\r\nspecified in the \"YYYY-MM-DD hh:mm:ss\" format, where either date or time can be omitted. The\r\nfollowing timedatectl command changes the time to 09:00:00.\r\n\r\n```\r\n[root@host ~]# imedatectl set-time 09:00:00\r\nuser@host ~]# timedatectl\r\n               Local time: Fri 2019-04-05 09:00:00 MST\r\n           Universal time: Fri 2019-04-05 16:00:00 UTC\r\n                 RTC time: Fri 2019-04-05 16:00:00\r\n                Time zone: America/Phoenix (MST, -0700)\r\nSystem clock synchronized: yes\r\n              NTP service: active\r\n          RTC in local TZ: no\r\n```\r\n\r\nThe timedatectl set-ntp command enables or disables NTP synchronization for automatic\r\ntime adjustment. The option requires either a true or false argument to turn it on or off. The\r\nfollowing timedatectl command turns on NTP synchronization.\r\n\r\n```\r\n[root@host ~]# timedatectl set-ntp true\r\n```\r\n\r\n* NOTE<br>\r\nIn Red Hat Enterprise Linux 8, the timedatectl set-ntp command will adjust\r\nwhether or not chronyd NTP service is operating. Other Linux distributions might\r\nuse this setting to adjust a different NTP or SNTP service.\r\n\r\nEnabling or disabling NTP using other utilities in Red Hat Enterprise Linux, such as in\r\nthe graphical GNOME Settings application, also updates this setting.\r\n\r\n##CONFIGURING AND MONITORING CHRONYD<br>\r\nThe chronyd service keeps the usually-inaccurate local hardware clock (RTC) on track by\r\nsynchronizing it to the configured NTP servers. If no network connectivity is available, chronyd\r\ncalculates the RTC clock drift, which is recorded in the driftfile specified in the /etc/\r\nchrony.conf configuration file.\r\n\r\nBy default, the chronyd service uses servers from the NTP Pool Project for the time\r\nsynchronization and does not need additional configuration. It may be useful to change the NTP\r\nservers when the machine in question is on an isolated network.\r\n\r\nThe stratum of the NTP time source determines its quality. The stratum determines the number\r\nof hops the machine is away from a high-performance reference clock. The reference clock is a\r\nstratum 0 time source. An NTP server directly attached to it is a stratum 1, while a machine\r\nsynchronizing time from the NTP server is a stratum 2 time source.\r\n\r\nThe server and peer are the two categories of time sources that you can in the /etc/\r\nchrony.conf configuration file. The server is one stratum above the local NTP server, and the\r\npeer is at the same stratum level. More than one server and more than one peer can be specified,\r\none per line.\r\n\r\nThe first argument of the server line is the IP address or DNS name of the NTP server. Following\r\nthe server IP address or name, a series of options for the server can be listed. It is recommended\r\nto use the iburst option, because after the service starts, four measurements are taken in a\r\nshort time period for a more accurate initial clock synchronization.\r\n\r\nThe following server classroom.example.com iburst line in the /etc/chrony.conf file\r\ncauses the chronyd service to use the classroom.example.com NTP time source.\r\n\r\n```\r\n# Use public servers from the pool.ntp.org project.\r\n...output omitted...\r\nserver classroom.example.com iburst\r\n...output omitted...\r\n```\r\n\r\nAfter pointing chronyd to the local time source, classroom.example.com, you should restart\r\nthe service.\r\n\r\n```\r\n[root@host ~]# systemctl restart chronyd\r\n```\r\n\r\nThe chronyc command acts as a client to the chronyd service. After setting up NTP\r\nsynchronization, you should verify that the local system is seamlessly using the NTP server to\r\nsynchronize the system clock using the chrony sources command. For more verbose output\r\nwith additional explanations about the output, use the chronyc sources -v command.\r\n\r\n![](/media/markdownx/6a88dc98-4bc7-4f05-9c12-73054748a29a.png)\r\n\r\nThe * character in the S (Source state) field indicates that the classroom.example.com server\r\nhas been used as a time source and is the NTP server the machine is currently synchronized to.\r\n\r\n* REFERENCES<br>\r\ntimedatectl(1), tzselect(8), chronyd(8), chrony.conf(5), and chronyc(1) man pages<br>\r\n* NTP Pool Project<br>\r\nhttp://www.pool.ntp.org/<br>\r\n* Time Zone Database<br>\r\nhttp://www.iana.org/time-zones", "order": 9, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 265, "fields": {"title": "GUIDED EXERCISE : MAINTAINING ACCURATE TIME", "slug": "guided-exercise-maintaining-accurate-time", "content": "", "content_md": "In this exercise, you will adjust the time zone on a server and ensure that its system clock is\r\nsynchronized with an NTP time source.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\r\n* Change the time zone on a server.\r\n* Configure the server to synchronize its time with an NTP time source.\r\n\r\n##BEFORE YOU BEGIN<br.\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run lab log-maintain start to start the exercise. This script\r\nensures that the time synchronization is disabled on the servera system to provide you\r\nwith the opportunity to manually update the settings on the system and enable the time\r\nsynchronization.\r\n\r\n```\r\n[student@workstation ~]$ lab log-maintain start\r\n```\r\n\r\n\r\n* 1.From workstation, open an SSH session to servera as student.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.For the sake of the activity, pretend that the servera system is relocated to Haiti and so\r\nyou need to update the time zone appropriately. Use sudo to elevate the privileges of the\r\nstudent user while running the timedatectl command to update the time zone. Use\r\nstudent as the password if asked.\r\n\r\n\r\n* 2.1.Use the tzselect command to determine the appropriate time zone for Haiti.\r\n\r\n![](/media/markdownx/44006f95-a62c-4974-b1c9-1219c16a2686.png)\r\n\r\nNotice that the preceding tzselect command displayed the appropriate time zone\r\nfor Haiti.\r\n\r\n* 2.2.Use the timedatectl command to update the time zone on servera to\r\nAmerica/Port-au-Prince.\r\n\r\n```\r\n[student@servera ~]$ sudo timedatectl set-timezone America/Port-au-\r\nPrince\r\n[sudo] password for student: student\r\n```\r\n\r\n* 2.3.Use the timedatectl command to verify that the time zone has been updated to\r\nAmerica/Port-au-Prince.\r\n\r\n```\r\n[student@servera ~]$ timedatectl\r\n               Local time: Tue 2019-02-19 01:16:29 EST\r\n           Universal time: Tue 2019-02-19 06:16:29 UTC\r\n                 RTC time: Tue 2019-02-19 06:16:29\r\n                Time zone: America/Port-au-Prince (EST, -0500)\r\nSystem clock synchronized: no\r\n              NTP service: inactive\r\n          RTC in local TZ: no\r\n```\r\n\r\n* 3.Configure the chronyd service on servera to synchronize the system time with the NTP\r\ntime source classroom.example.com.\r\n\r\n* 3.1.Edit the /etc/chrony.conf file to specify the classroom.example.com\r\nserver as the NTP time source. You may use the sudo vim /etc/chrony.conf\r\ncommand to edit the configuration file. The following output shows the\r\nconfiguration line you must add to the configuration file:\r\n\r\n```\r\n...output omitted...\r\nserver classroom.example.com iburst\r\n...output omitted...\r\n```\r\n\r\nThe preceding line in the /etc/chrony.conf configuration file includes the\r\niburst option to speed up initial time synchronization.\r\n\r\n* 3.2.Use the timedatectl command to turn on the time synchronization on servera.\r\n\r\n```\r\n[student@servera ~]$ sudo timedatectl set-ntp yes\r\n```\r\n\r\nThe preceding timedatectl command activates the NTP server with the\r\nchanged settings in the /etc/chrony.conf configuration file. The preceding\r\ntimedatectl command may activate either the chronyd or the ntpd service,\r\nbased on what is currently installed on the system.\r\n\r\n* 4.Verify that the time settings on servera are currently configured to synchronize with the\r\nclassroom.example.com time source in the classroom environment.\r\n\r\n* 4.1.Use the timedatectl command to verify that the servera currently has the time\r\nsynchronization enabled.\r\n\r\n```\r\n[student@servera ~]$ timedatectl\r\n               Local time: Tue 2019-02-19 01:52:17 EST\r\n           Universal time: Tue 2019-02-19 06:52:17 UTC\r\n                 RTC time: Tue 2019-02-19 06:52:17\r\n                Time zone: America/Port-au-Prince (EST, -0500)\r\nSystem clock synchronized: yes\r\n              NTP service: inactive\r\n          RTC in local TZ: no\r\n```\r\n\r\n####NOTE<br>\r\nIf the preceding output shows that the clock is not synchronized, wait for two\r\nseconds and re-run the timedatectl command. It takes a few seconds to\r\nsuccessfully synchronize the time settings with the time source.\r\n\r\n* 4.2.Use the chronyc command to verify that the servera system is currently\r\nsynchronizing its time settings with the classroom.example.com time source.\r\n\r\n![](/media/markdownx/6210d23f-436a-42fc-8284-263034dcddf4.png)\r\n\r\nNotice that the preceding output shows an asterisk (*) in the source state (S) field\r\nfor the classroom.example.com NTP time source. The asterisk indicates that the\r\nlocal system time is currently in successful synchronization with the NTP time source.\r\n\r\n* 4.3.Log out of servera.\r\n\r\n```\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Finish<br>\r\nOn workstation, run lab log-maintain finish to complete this exercise. This script\r\nensures that the original time zone is restored along with all the original time settings on servera.\r\n```\r\n[student@workstation ~]$ lab log-maintain finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 10, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 266, "fields": {"title": "LAB : ANALYZING AND STORING LOGS", "slug": "lab-analyzing-and-storing-logs", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\n\r\n\r\nIn this lab, you will change the time zone on an existing server and configure a new log file for\r\nall events related to authentication failures.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n* Update the time zone on an existing server.\r\n* Configure a new log file to store all messages related to authentication failures.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\n\r\nOn workstation, run lab log-review start to start the exercise. This script records\r\nthe current time zone of the serverb system and ensures that the environment is setup\r\ncorrectly.\r\n\r\n```\r\n[student@workstation ~]$ lab log-review start\r\n```\r\n\r\n* 1.From workstation, open an SSH session to serverb as student.\r\n* 2.Pretend that the serverb system has been relocated to Jamaica and you must update\r\nthe time zone appropriately. Use sudo to elevate the student user privileges for the\r\ntimedatectl command to update the time zone. Use student as the password if asked.\r\n* 3.Display the log events recorded in the previous 30 minutes on serverb.\r\n* 4.Create the /etc/rsyslog.d/auth-errors.conf file, configured to have the rsyslog\r\nservice write messages related to authentication and security issues to the new /var/log/\r\nauth-errors file. Use the authpriv facility and the alert priority in the configuration file.\r\n\r\n###Evaluation<br>\r\nOn workstation, run the lab log-review grade command to confirm success of this\r\nexercise.\r\n```\r\n[student@workstation ~]$ lab log-review grade\r\nFinish\r\n```\r\n\r\n\r\nOn workstation, run lab log-review finish to complete this lab. This script ensures that\r\nthe original time zone is restored along with all the original time settings on serverb.\r\n\r\n```\r\n[student@workstation ~]$ lab log-review finish\r\n\r\n```\r\nThis concludes the guided exercise.\r\n```\r\n\r\n##SOLUTION : ANALYZING AND STORING LOGS <br>\r\n\r\n##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will change the time zone on an existing server and configure a new log file for\r\nall events related to authentication failures.\r\n\r\n\r\n##OUTCOMES\r\nYou should be able to:\r\n* Update the time zone on an existing server.\r\n* Configure a new log file to store all messages related to authentication failures.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\n\r\nOn workstation, run lab log-review start to start the exercise. This script records\r\nthe current time zone of the serverb system and ensures that the environment is setup\r\ncorrectly.\r\n\r\n```\r\n[student@workstation ~]$ lab log-review start\r\n```\r\n\r\n* 1.From workstation, open an SSH session to serverb as student.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n* 2.Pretend that the serverb system has been relocated to Jamaica and you must update\r\nthe time zone appropriately. Use sudo to elevate the student user privileges for the\r\ntimedatectl command to update the time zone. Use student as the password if asked.\r\n\r\n* 2.1.Use the timedatectl command to view available time zones and determine the\r\nappropriate time zone for Jamaica.\r\n\r\n```\r\n[student@serverb ~]$ timedatectl list-timezones | grep Jamaica\r\nAmerica/Jamaica\r\n```\r\n\r\n* 2.2.Use the timedatectl command to set the time zone of the serverb system to\r\nAmerica/Jamaica.\r\n\r\n```\r\n[student@serverb ~]$ sudo timedatectl set-timezone America/Jamaica\r\n[sudo] password for student: student\r\n```\r\n\r\n* 2.3.Use the timedatectl command to verify that the time zone is successfully set to\r\nAmerica/Jamaica.\r\n\r\n```\r\n[student@serverb ~]$ timedatectl\r\n               Local time: Tue 2019-02-19 11:12:46 EST\r\n           Universal time: Tue 2019-02-19 16:12:46 UTC\r\n                 RTC time: Tue 2019-02-19 16:12:45\r\n                Time zone: America/Jamaica (EST, -0500)\r\nSystem clock synchronized: yes\r\n              NTP service: active\r\n          RTC in local TZ: no\r\n```\r\n\r\n* 3.Display the log events recorded in the previous 30 minutes on serverb.\r\n\r\n\r\n* 3.1.Use the date command to determine the time frame to view the journal entries.\r\n\r\n```\r\n[student@serverb ~]$ date\r\nFri Feb 22 07:31:05 EST 2019\r\n[student@serverb ~]$ date -d \"-30 minutes\"\r\nFri Feb 22 07:01:31 EST 2019\r\n```\r\n\r\n* 3.2.Use the journalctl command --since and --until options to display log events\r\nrecorded in the previous 30 minutes on serverb. To quit journalctl, press q.\r\n\r\n![](/media/markdownx/2d162fdc-7bca-4a0f-ace6-86673af3515d.png)\r\n\r\n* 4.Create the /etc/rsyslog.d/auth-errors.conf file, configured to have the rsyslog\r\nservice write messages related to authentication and security issues to the new /var/log/\r\nauth-errors file. Use the authpriv facility and the alert priority in the configuration file.\r\n\r\n* 4.1.Create the /etc/rsyslog.d/auth-errors.conf file to specify the new /var/\r\nlog/auth-errors file as the destination for messages related to authentication\r\nand security issues. You may use the sudo vim /etc/rsyslog.d/auth-\r\nerrors.conf command to create the configuration file.\r\n\r\n```\r\nauthpriv.alert    /var/log/auth-errors\r\n```\r\n\r\n* 4.2.Restart the rsyslog service so that the changes in the configuration file take effect.\r\n\r\n```\r\n[student@serverb ~]$ sudo systemctl restart rsyslog\r\n```\r\n\r\n* 4.3.Use the logger command to write a new log message to the /var/log/auth-\r\nerrors file. Apply the -p authpriv.alert option to generate a log message\r\nrelevant to authentication and security issues.\r\n\r\n```\r\n[student@serverb ~]$ logger -p authpriv.alert \"Logging test\r\nauthpriv.alert\"\r\n```\r\n\r\n* 4.4.Use the tail command to confirm that the /var/log/auth-errors file contains\r\nthe log entry with the Logging test authpriv.alert message.\r\n\r\n```\r\n[student@serverb ~]$ sudo tail /var/log/auth-errors\r\nFeb 19 11:56:07 serverb student[6038]: Logging test authpriv.alert\r\n```\r\n\r\n* 4.5.Log out of serverb.\r\n\r\n```\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n###Evaluation<br>\r\nOn workstation, run the lab log-review grade command to confirm success of this\r\nexercise.\r\n```\r\n[student@workstation ~]$ lab log-review grade\r\nFinish\r\n```\r\n\r\n\r\nOn workstation, run lab log-review finish to complete this lab. This script ensures that\r\nthe original time zone is restored along with all the original time settings on serverb.\r\n```\r\n[student@workstation ~]$ lab log-review finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 11, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 267, "fields": {"title": "SUMMARY", "slug": "summary-3", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n\r\n* The systemd-journald and rsyslog services capture and write log messages to the\r\nappropriate files.\r\n* The /var/log directory contains log files.\r\n* Periodic rotation of log files prevent them from filling up the file system space.\r\n* The systemd journals are temporary and do not persist across reboot.\r\n* The chronyd service helps to synchronize time settings with a time source.\r\n* The time zone of the server can be updated based on its location.", "order": 12, "is_visible": true, "is_task": false, "module": 37, "draft": false, "files": []}}, {"model": "courses.section", "pk": 268, "fields": {"title": "DESCRIBING NETWORKING CONCETPS", "slug": "describing-networking-concepts", "content": "", "content_md": "<style>\r\ntable {width: 100%;}\r\nth {  padding: 8px; text-align: center;border-bottom: 1px solid black;}\r\ntd {  padding: 8px; text-align: left;border-bottom: 1px solid black;}\r\n</style>\r\n\r\n##  OBJECTIVES  \r\nAfter completing this section, you should be able to describe fundamental concepts of network addressing and routing for a server.\r\n\r\n## TCP/IP NETWORK MODEL  \r\nThe TCP/IP network model is a simplified, four-layered set of abstractions that describes how different protocols interoperate in order for computers to send traffic from one machine to another over the Internet. It is specified by RFC 1122, Requirements for Internet Hosts -- Communication Layers. The four layers are:    \r\n  \r\n\u2022 **Application**   \r\n  \r\nEach application has specifications for communication so that clients and servers may communicate across platforms. Common protocols include SSH (remote login), HTTPS (secure web), NFS or CIFS (file sharing), and SMTP (electronic mail delivery).  \r\n  \r\n\u2022 **Transport**  \r\n  \r\nTransport protocols are TCP and UDP. TCP is a reliable connection-oriented communication, while UDP is a connectionless datagram protocol. Application protocols use TCP or UDP ports. A list of well-known and registered ports can be found in the /etc/services file.  \r\nWhen a packet is sent on the network, the combination of the service port and IP address forms a socket. Each packet has a source socket and a destination socket. This information can be used when monitoring and filtering.   \r\n  \r\n\u2022 **Internet**    \r\n  \r\nThe Internet, or network layer, carries data from the source host to the destination host. The IPv4 and IPv6 protocols are Internet layer protocols. Each host has an IP address and a prefix used to determine network addresses. Routers are used to connect networks.\r\n  \r\n\u2022  **Link**    \r\n  \r\nThe link, or media access, layer provides the connection to physical media. The most common types of networks are wired Ethernet (802.3) and wireless WLAN (802.11). Each physical device has a hardware address (MAC) which is used to identify the destination of packets on the local network segment.   \r\n\r\n## DESCRIBING NETWORK INTERFACE NAMES  \r\n  \r\nEach network port on a system has a name, which you use to configure and identify it.   \r\n   \r\nOlder versions of RedHat Enterprise Linux used names like eth0, eth1, and eth2 for each network interface. The name eth0 was the first network port detected by the operating system, eth1 the second, and so on. However, as devices are added and removed, the mechanism detecting devices and naming them could change which interface gets which name. Furthermore, the PCIe standard does not guarantee the order in which PCIe devices will be detected on boot, which could change device naming unexpectedly due to variations during device or system startup.  \r\n  \r\nNewer versions of RedHat EnterpriseLinux use a different naming system. Instead of being based on detection order, the names of network interfaces are assigned based on information from the firmware, the PCI bus topology, and type of network device.  \r\n  \r\nNetwork interface names start with the type of interface:  \r\n\u2022  **Ethernet** interfaces begin with en  \r\n\u2022  **WLAN** interfaces begin with wl  \r\n\u2022  **WWAN** interfaces begin with ww    \r\n  \r\nThe rest of the interface name after the type will be based on information provided by the server's firmware or determined by the location of the device in the PCI topology.  \r\n  \r\n\u2022  **oN** indicates that this is an on-board device and the server's firmware provided index number N for the device. So eno1 is on-board Ethernet device 1. Many servers will not provide this information.  \r\n\u2022  **sN** indicates that this device is in PCI hotplug slot N. So ens3 is an Ethernet card in PCI hotplug slot 3.  \r\n\u2022  **pMsN** indicates that this is a PCI device on bus M in slot N. So wlp4s0 is a WLAN card on PCI bus 4 in slot 0. If the card is a multi-function device (possible with an Ethernet card with multiple ports, or devices that have Ethernet plus some other functionality), you may see fN added to the device name. So enp0s1f0 is function 0 of the Ethernet card on bus 0 in slot 1. There might also be a second interface named enp0s1f1 that is function 1 of that same device.  \r\n\r\n## IPV4 NETWORKING  \r\nIPv4 is the primary network protocol used on the Internet today. You should have at least a basic understanding of IPv4 networking in order to manage network communication for your servers.  \r\n\r\n**IPv4 Addresses**  \r\nAn IPv4 address is a 32-bit number, normally expressed in decimal as four 8-bit octets ranging in value from 0 to 255, separated by dots. The address is divided into two parts: the network part and the host part. All hosts on the same subnet, which can talk to each other directly without a router, have the same network part; the network part identifies the subnet. No two hosts on the same subnet can have the same host part; the host part identifies a particular host on a subnet.  \r\n  \r\nIn the modern Internet, the size of an IPv4 subnet is variable. To know which part of an IPv4 address is the network part and which is the host part, an administrator must know the netmask, which is assigned to the subnet. The netmask indicates how many bits of the IPv4 address belong to the subnet. The more bits available for the host part, the more hosts can be on the subnet.  \r\n  \r\nThe lowest possible address on a subnet (host part is all zeros in binary) is sometimes called the network address. The highest possible address on a subnet (host part is all ones in binary) is used for broadcast messages in IPv4, and is called the broadcast address.  \r\n  \r\nNetwork masks are expressed in two forms. The older syntax for a netmask uses 24 bits for the network part and reads 255.255.255.0. A newer syntax, called CIDR notation, specifies a network prefix of /24. Both forms convey the same information; namely, how many leading bits in the IP address contribute to its network address.  \r\n  \r\nThe following examples illustrate how the IP address, prefix (netmask), network part, and host part are related.  \r\n  \r\n![](/media/markdownx/7da514c9-ae25-4832-83cb-b92ea6ea5f93.png)   \r\n    \r\n![](/media/markdownx/cfb81bbe-6bbd-44ac-9a9d-25e2cf06353d.png)  \r\n  \r\n![](/media/markdownx/30f3909e-260e-4eb5-8d4d-3418d30d9a0d.png)  \r\n  \r\nThe special address 127.0.0.1 always points to the local system (localhost), and the network 127.0.0.0/8 belongs to the local system, so that it can talk to itself using network protocols.  \r\n\r\n**IPV4 Routing**  \r\n  \r\nWhether using IPv4 or IPv6, network traffic needs to move from host to host and network to network. Each host has a routing table, which tells it how to route traffic for particular networks. A routing table entry lists a destination network, which interface to use when sending traffic, and the IP address of any intermediate router required to relay a message to its final destination. The routing table entry matching the destination of the network traffic is used to route it. If two entries match, the one with the longest prefix is used.  \r\n  \r\nIf the network traffic does not match a more specific route, the routing table usually has an entry for a default route to the entire IPv4 Internet: 0.0.0.0/0. This default route points to a router on a reachable subnet (that is, on a subnet that has a more specific route in the host's routing table).   \r\n  \r\nIf a router receives traffic that is not addressed to it, instead of ignoring it like a normal host, it forwards the traffic based on its own routing table. This may send the traffic directly to the destination host (if the router happens to be on the destination's subnet), or it may be forwarded on to another router. This process of forwarding continues until the traffic reaches its final destination.  \r\n  \r\n![](/media/markdownx/a0a18b95-1536-411f-b8bc-889d822419f1.png)  \r\n   \r\n![](/media/markdownx/61d04d2c-5706-4862-b293-5bce5fd52fc5.png)  \r\n  \r\nIn this example, traffic headed for the IP address 192.0.2.102 from this host is transmitted directly to that destination via the wlo1 wireless interface, because it matches the 192.0.2.0/24 route most closely. Traffic for the IP address 192.168.5.3 is transmitted directly to that destination via the enp3s0 Ethernet interface, because it matches the 192.168.5.0/24 route most closely.  \r\n  \r\nTraffic to the IP address 10.2.24.1 is transmitted out the enp3s0 Ethernet interface to a router at 192.168.5.254, which forwards that traffic on to its final destination. That traffic matches the 0.0.0.0/0 route most closely, as there is not a more specific route in the routing table of this host. The router uses its own routing table to determine where to forward that traffic to next.  \r\n\r\n**IPv4 Address and Route Configuration**  \r\n  \r\nA server can automatically configure its IPv4 network settings at boot time from a DHCP server. A local client daemon queries the link for a server and network settings, and obtains a lease to use those settings for a specific length of time. If the client does not request a renewal of the lease periodically, it might lose its network configuration settings.  \r\n   \r\nAs an alternative, you can configure a server to use a static network configuration. In this case, network settings are read from local configuration files. You must get the correct settings from your network administrator and update them manually as needed to avoid conflicts with other servers.  \r\n\r\n\r\n**Host Names and IP Addresses**  \r\n    \r\nIt would be inconvenient if you always had to use IP addresses to contact your servers. Humans generally would prefer to work with names than long and hard-to-remember strings of numbers. And so Linux has a number of mechanisms to map a host name to an IP address, collectively called name resolution.\r\nOne way is to set a static entry for each name in the /etc/hosts file on each system. This requires you to manually update each server's copy of the file.  \r\n\r\nFor most hosts, you can look up the address for a host name (or a host name from an address) from a network service called the Domain Name System (DNS). DNS is a distributed network of servers providing mappings of host names to IP addresses. In order for name service to work, a host needs to be pointed at a nameserver. This nameserver does not need to be on the same subnet; it just needs to be reachable by the host. This is typically configured through DHCP or a static setting in a file called /etc/resolv.conf. Later sections of this chapter will discuss how to configure name resolution.", "order": 1, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 269, "fields": {"title": "QUIZ: DESCRIBING NETWORKING CONCEPTS", "slug": "quiz-describing-networking-concepts", "content": "", "content_md": "## Quiz\r\n\r\nClick \r\n[https://course.btech.id/quiz/describing-network-concepts/](https://course.btech.id/quiz/describing-network-concepts/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 270, "fields": {"title": "VALIDATING NETWORK CONFIGURATION", "slug": "validatin-network-configuration", "content": "", "content_md": "## OBJECTIVES  \r\nAfter completing this section, you should be able to test and inspect current network configuration with command-line utilities.  \r\n  \r\n## GATHERING NETWORK INTERFACE INFORMATION  \r\n**Gathering Network Interface Information**    \r\n**Identifying Network Interfaces. **  \r\nThe ip link command will list all network interfaces available on your system :  \r\n  \r\n```bash\r\n[user@host ~]$ ip link show\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n2: ens3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000\r\n    link/ether 52:54:00:00:00:0a brd ff:ff:ff:ff:ff:ff\r\n3: ens4: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000\r\n    link/ether 52:54:00:00:00:1e brd ff:ff:ff:ff:ff:ff\r\n\r\n```\r\n  \r\nIn the preceding example, the server has three network interfaces: lo, which is the loopback device that is connected to the server itself, and two Ethernet interfaces, ens3 and ens4.  \r\n  \r\nTo configure each network interface correctly, you need to know which one is connected to which network. In many cases, you will know the MAC address of the interface connected to each network, either because it is physically printed on the card or server, or because it is a virtual machine and you know how it is configured. The MAC address of the device is listed after link/ether for each interface. So you know that the network card with the MAC address 52:54:00:00:00:0a is the network interface ens3.  \r\n   \r\n\r\n**Displaying IP Addresses. **  \r\n  \r\nUse the ip command to view device and address information. A single network interface can have multiple IPv4 or IPv6 addresses.  \r\n  \r\n\r\n  \r\n![](/media/markdownx/5ed90b0c-51a4-4be1-aca2-5ad8ba10408a.png)\r\n![](/media/markdownx/49e4c72d-84d2-417f-adc8-5ddc351c6489.png)  \r\n     \r\n![](/media/markdownx/a96ece8e-8aec-47fa-b54e-d97893ab06ec.png)  \r\n  \r\n**Displaying Performance Statistics.**  \r\nThe ip command may also be used to show statistics about network performance. Counters for each network interface can be used to identify the presence of network issues. The counters record statistics for things like the number of received (RX) and transmitted (TX) packets, packet errors, and packets that were dropped.  \r\n\r\n```bash\r\n[user@host ~]$ ip -s link show ens3\r\n2: ens3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\r\nlink/ether 52:54:00:00:00:0a brd ff:ff:ff:ff:ff:ff\r\n    RX: bytes  packets  errors  dropped overrun mcast\r\n    269850     2931     0       0       0       0\r\n    TX: bytes  packets  errors  dropped carrier collsns\r\n    300556     3250     0       0       0       0\r\n```  \r\n  \r\n**CHECKING CONNECTIVITY BETWEEN HOSTS**  \r\nThe ping command is used to test connectivity. The command continues to run until Ctrl+c is pressed unless options are given to limit the number of packets sent.  \r\n  \r\n```bash\r\n[user@host ~]$ ping -c3 192.0.2.254\r\nPING 192.0.2.1 (192.0.2.254) 56(84) bytes of data.\r\n64 bytes from 192.0.2.254: icmp_seq=1 ttl=64 time=4.33 ms\r\n64 bytes from 192.0.2.254: icmp_seq=2 ttl=64 time=3.48 ms\r\n64 bytes from 192.0.2.254: icmp_seq=3 ttl=64 time=6.83 ms\r\n\r\n--- 192.0.2.254 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\r\nrtt min/avg/max/mdev = 3.485/4.885/6.837/1.424 ms\r\n```  \r\n\r\n**TROUBLESHOOTING ROUTING**  \r\n  \r\nNetwork routing is complex, and sometimes traffic does not behave as you might have expected. Here are some useful diagnosis tools.  \r\n\r\n**Displaying the Routing Table. **  \r\n  \r\nUse the ip command with the route option to show routing information.  \r\n```bash\r\n[user@host ~]$ ip route\r\ndefault via 192.0.2.254 dev ens3 proto static metric 1024\r\n192.0.2.0/24 dev ens3 proto kernel scope link src 192.0.2.2\r\n10.0.0.0/8 dev ens4 proto kernel scope link src 10.0.0.11\r\n```\r\n\r\nThis shows the IPv4 routing table. All packets destined for the `10.0.0.0/8` network are sent directly to the destination through the device `ens4`. All packets destined for the `192.0.2.0/24` network are sent directly to the destination through the device `ens3`. All other packets are sent to the default router located at `192.0.2.254`, and also through device `ens3`.    \r\n  \r\n** Tracing Routes Taken by Traffic.**     \r\n  \r\nTo trace the path that network traffic takes to reach a remote host through multiple routers, use either traceroute or tracepath. This can identify whether an issue is with one of your routers or an intermediate one. Both commands use UDP packets to trace a path by default; however, many networks block UDP and ICMP traffic. The traceroute command has options to trace the path with UDP (default), ICMP (-I), or TCP (-T) packets. Typically, however, the traceroute command is not installed by default.  \r\n  \r\n```bash\r\n[user@host ~]$ tracepath access.redhat.com\r\n...output omitted...\r\n 4:  71-32-28-145.rcmt.qwest.net                          48.853ms asymm  5\r\n 5:  dcp-brdr-04.inet.qwest.net                          100.732ms asymm  7\r\n 6:  206.111.0.153.ptr.us.xo.net                          96.245ms asymm  7\r\n 7:  207.88.14.162.ptr.us.xo.net                          85.270ms asymm  8\r\n 8:  ae1d0.cir1.atlanta6-ga.us.xo.net                     64.160ms asymm  7\r\n 9:  216.156.108.98.ptr.us.xo.net                        108.652ms\r\n10:  bu-ether13.atlngamq46w-bcr00.tbone.rr.com           107.286ms asymm 12\r\n...output omitted...\r\n```\r\n   \r\nEach line in the output of tracepath represents a router or hop that the packet passes through between the source and the final destination. Additional information is provided as available, including the round trip timing (RTT) and any changes in the maximum transmission unit (MTU) size. The asymm indication means traffic reached that router and returned from that router using different (asymmetric) routes. The routers shown are the ones used for outbound traffic, not the return traffic.  \r\n\r\n**TROUBLESHOOTING PORTS AND SERVICES**  \r\n  \r\nTCP services use sockets as end points for communication and are made up of an IP address, protocol, and port number. Services typically listen on standard ports while clients use a random available port. Well-known names for standard ports are listed in the /etc/services file.  \r\n  \r\nThe ss command is used to display socket statistics. The ss command is meant to replace the older tool netstat, part of the net-tools package, which may be more familiar to some system administrators but which is not always installed.  \r\n\r\n![](/media/markdownx/27efe714-21c8-482e-9bc8-d3bce3077d68.png)   \r\n![](/media/markdownx/100cb30e-3573-4909-8727-468146d4e4cf.png)  \r\n\r\n  <style>\r\ntable {width: 100%;}\r\nth {  padding: 8px; text-align: center;border-bottom: 1px solid black;}\r\ntd {  padding: 8px; text-align: left;border-bottom: 1px solid black;}\r\n</style>\r\n<table border=1><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-n</td><td>Show numbers instead of names for interfaces and ports.</td></tr><tr><td>-t</td><td>Show TCP sockets.</td></tr><tr><td>-u</td><td>Show UDP sockets.</td></tr><tr><td>-l</td><td>Show only listening sockets.</td></tr><tr><td>-a</td><td>Show all (listening and established) sockets.</td></tr><tr><td>-p</td><td>Show the process using the sockets.</td></tr><tr><td>-A inet</td><td>Display active connections (but not listening sockets) for the inet address family. That is, ignore local UNIX domain sockets.<br>For ss, both IPv4 and IPv6 connections are displayed. For netstat, only IPv4 connections are displayed. (netstat -A inet6 displays IPv6 connections, and netstat -46displays IPv4 and IPv6 at the same time.)</td></tr></tbody></table>", "order": 3, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 271, "fields": {"title": "GUIDED EXERCISE: VALIDATING NETWORK CONFIGURATION", "slug": "guided-exercise-validating-network-configuration", "content": "", "content_md": "In this exercise, you will inspect the network configuration of one of your servers.\r\n\r\n##OUTCOMES<br>\r\nIdentify the current network interfaces and basic network addresses.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab net-validate start command. The command runs a\r\nstart script that determine if the host, servera, is reachable on the network.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-validate start\r\n```\r\n<br>\r\n1. Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication and passwordless access to servera.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n>**IMPORTANT**<br><hr>\r\n>Network interface names are determined by their bus type and the detection order\r\n>of devices during boot. Your network interface names will vary according to the\r\n>course platform and hardware in use.\r\n\r\n>On your system now, locate the interface name (such as ens06 or en1p2)\r\n>associated with the Ethernet address 52:54:00:00:fa:0a. Use this interface\r\n>name to replace the enX placeholder used throughout this exercise.\r\n\r\n<br>\r\n2. Locate the network interface name associated with the Ethernet address\r\n52:54:00:00:fa:0a. Record or remember this name and use it to replace the enX\r\nplaceholder in subsequent commands.\r\n\r\n```bash\r\n[student@servera ~]$ ip link\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group\r\ndefault qlen 1000\r\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP\r\ngroup default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\n```\r\n\r\n<br>\r\n3. Display the current IP address and netmask for all interfaces.\r\n\r\n```bash\r\n[student@servera ~]$ ip addr\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group\r\ndefault qlen 1000\r\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\ninet 127.0.0.1/8 scope host lo\r\nvalid_lft forever preferred_lft forever\r\ninet6 ::1/128 scope host\r\nvalid_lft forever preferred_lft forever\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP\r\ngroup default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\ninet 10.X0.X0.10/24 brd 10.X0.X0.255 scope global noprefixroute ens3\r\nvalid_lft forever preferred_lft forever\r\ninet6 fe80::3059:5462:198:58b2/64 scope link noprefixroute\r\nvalid_lft forever preferred_lft forever\r\n```\r\n\r\n<br>\r\n4. Display the statistics for the enX interface.\r\n\r\n![](/media/markdownx/fac0e996-6795-4b97-81f9-d6c5037c2300.png)\r\n\r\n<br>\r\n5. Display the routing information.\r\n\r\n```bash\r\n[student@servera ~]$ ip route\r\ndefault via 10.X0.X0.254 dev enX proto static metric 100\r\n10.X0.X0.0/24 dev enX proto kernel scope link src 10.X0.X0.10 metric 100\r\n```\r\n\r\n<br>\r\n6. Verify that the router is accessible.\r\n\r\n```bash\t\r\n[student@servera ~]$ ping -c3 10.X0.X0.254\r\nPING 10.X0.X0.254 (10.X0.X0.254) 56(84) bytes of data.\r\n64 bytes from 10.X0.X0.254: icmp_seq=1 ttl=64 time=0.196 ms\r\n64 bytes from 10.X0.X0.254: icmp_seq=2 ttl=64 time=0.436 ms\r\n64 bytes from 10.X0.X0.254: icmp_seq=3 ttl=64 time=0.361 ms\r\n--- 10.X0.X0.254 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 49ms\r\nrtt min/avg/max/mdev = 0.196/0.331/0.436/0.100 ms\r\n```\r\n\r\n<br>\r\n7. Show all the hops between the local system and classroom.example.com.\r\n\r\n![](/media/markdownx/028946e9-febf-43ef-a075-205c77a552c5.png)\r\n\r\n<br>\r\n8. Display the listening TCP sockets on the local system.\r\n\r\n![](/media/markdownx/12d0daba-e971-401d-b0ab-d6e77d6c66a0.png)\r\n\r\n<br>\r\n9. Exit from servera.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run the lab net-validate finish script to finish this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-validate finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 272, "fields": {"title": "CONFIGURING NETWORKING FROM THE COMMAND LINE", "slug": "configuring-networking-from-the-command-line", "content": "", "content_md": "<style>\r\ntable {width: 100%;}\r\nth {  padding: 8px; text-align: center;border-bottom: 1px solid black;}\r\ntd {  padding: 8px; text-align: left;border-bottom: 1px solid black;}\r\n</style>\r\n##  OBJECTIVES  \r\nAfter completing this section, you should be able to manage network settings and devices using the `nmcli ` command.\r\n  \r\n## DESCRIBING NETWORKMANAGER CONCEPTS  \r\n`NetworkManager` is a daemon that monitors and manages network settings. In addition to the daemon, there is a GNOME Notification Area applet providing network status information. Command-line and graphical tools talk to `NetworkManager` and save configuration files in the `/etc/sysconfig/network-scripts` directory.  \r\n  \r\n\u2022 A device is a network interface.  \r\n  \r\n\u2022 A connection is a collection of settings that can be configured for a device.  \r\n  \r\n\u2022 Only one connection can be active for any one device at a time. Multiple connections may exist for use by different devices or to allow a configuration to be altered for the same device. If you need to temporarily change networking settings, instead of changing the configuration of a connection, you can change which connection is active for a device. For example, a device for a wireless network interface on a laptop might use different connections for the wireless network at a work site and for the wireless network at home.  \r\n  \r\n\u2022 Each connection has a name or ID that identifies it.  \r\n  \r\n\u2022  The nmcli utility is used to create and edit connection files from the command line.  \r\n  \r\n**VIEWING NETWORKING INFORMATION**  \r\nThe **nmcli dev status** command displays the status of all network devices:  \r\n```bash\r\n[user@host ~]$ nmcli dev status\r\nDEVICE  TYPE      STATE         CONNECTION\r\neno1    ethernet  connected     eno1\r\nens3    ethernet  connected     static-ens3\r\neno2    ethernet  disconnected  --\r\nlo      loopback  unmanaged     --\r\n```\r\n  \r\nThe **nmcli con show** command displays a list of all connections. To list only the active connections, add the --active option.\r\n  \r\n```bash\r\n[user@host ~]$ nmcli con show\r\nNAME         UUID                                  TYPE            DEVICE\r\neno2         ff9f7d69-db83-4fed-9f32-939f8b5f81cd  802-3-ethernet  --\r\nstatic-ens3  72ca57a2-f780-40da-b146-99f71c431e2b  802-3-ethernet  ens3\r\neno1         87b53c56-1f5d-4a29-a869-8a7bdaf56dfa  802-3-ethernet  eno1\r\n[user@host ~]$ nmcli con show --active\r\n\r\nNAME         UUID                                  TYPE            DEVICE\r\nstatic-ens3  72ca57a2-f780-40da-b146-99f71c431e2b  802-3-ethernet  ens3\r\neno1         87b53c56-1f5d-4a29-a869-8a7bdaf56dfa  802-3-ethernet  eno1\r\n\r\n```\r\n  \r\n**ADDING A NETWORK CONNECTION**  \r\n  \r\nThe **nmcli con add** command is used to add new network connections. The following example **nmcli con add** commands assume that the name of the network connection being added is not already in use.  \r\n  \r\nThe following command adds a new connection named eno2 for the interface eno2, which gets IPv4 networking information using DHCP and auto connects on startup. It also gets IPv6 networking settings by listening for router advertisements on the local link. The name of the configuration file is based on the value of the con-name option, eno2, and is saved to the `/etc/sysconfig/network-scripts/ifcfg-eno2` file.  \r\n  \r\n```bash\r\n[root@host ~]# nmcli con add con-name eno2 type ethernet ifname eno2\r\n```\r\n\r\nThe next example creates an eno2 connection for the eno2 device with a static IPv4 address, using the IPv4 address and network prefix `192.168.0.5/24` and default gateway `192.168.0.254`, but still autoconnects at startup and saves its configuration into the same file. Due to screen size limitations, terminate the first line with a shell \\ escape and complete the command on the next line.  \r\n\r\n```bash\r\n[root@host ~]# nmcli con add con-name eno2 type ethernet ifname eno2 \\\r\nipv4.address 192.168.0.5/24 ipv4.gateway 192.168.0.254\r\n```\r\n  \r\n**CONTROLLING NETWORK CONNECTIONS**  \r\n  \r\nThe nmcli con up name command activates the connection name on the network interface it is bound to. Note that the command takes the name of a connection, not the name of the network interface. Remember that the nmcli con show command displays the names of all available connections.\r\n\r\n```bash\r\n[root@host ~]# nmcli con up static-ens3\r\n```\r\n  \r\nThe nmcli dev disconnect device command disconnects the network interface device and brings it down. This command can be abbreviated nmcli dev dis device:\r\n\r\n```bash\r\n[root@host ~]# nmcli dev dis ens3\r\n```\r\n \r\n**MODIFYING NETWORK CONNECTION SETTINGS**  \r\n\r\nNetworkManager connections have two kinds of settings. There are static connection properties, configured by the administrator and stored in the configuration files in `/etc/sysconfig/network-scripts/ifcfg-*`. There may also be active connection data, which the connection gets from a DHCP server and which are not stored persistently.  \r\n  \r\nTo list the current settings for a connection, run the **nmcli con show** name command, where name is the name of the connection. Settings in lowercase are static properties that the administrator can change. Settings in all caps are active settings in temporary use for this instance of the connection.   \r\n  \r\n```bash\r\n[root@host ~]# nmcli con show static-ens3\r\nconnection.id:                          static-ens3\r\nconnection.uuid:                        87b53c56-1f5d-4a29-a869-8a7bdaf56dfa\r\nconnection.interface-name:              --\r\nconnection.type:                        802-3-ethernet\r\nconnection.autoconnect:                 yes\r\nconnection.timestamp:                   1401803453\r\nconnection.read-only:                   no\r\nconnection.permissions:\r\nconnection.zone:                        --\r\nconnection.master:                      --\r\nconnection.slave-type:                  --\r\nconnection.secondaries:\r\nconnection.gateway-ping-timeout:        0\r\n802-3-ethernet.port:                    --\r\n802-3-ethernet.speed:                   0\r\n802-3-ethernet.duplex:                  --\r\n802-3-ethernet.auto-negotiate:          yes\r\n802-3-ethernet.mac-address:             CA:9D:E9:2A:CE:F0\r\n802-3-ethernet.cloned-mac-address:      --\r\n802-3-ethernet.mac-address-blacklist:\r\n802-3-ethernet.mtu:                     auto\r\n802-3-ethernet.s390-subchannels:\r\n802-3-ethernet.s390-nettype:            --\r\n802-3-ethernet.s390-options:\r\nipv4.method:                            manual\r\nipv4.dns:                               192.168.0.254\r\nipv4.dns-search:                        example.com\r\nipv4.addresses:                         { ip = 192.168.0.2/24, gw = 192.168.0.254 }\r\nipv4.routes:\r\nipv4.ignore-auto-routes:                no\r\nipv4.ignore-auto-dns:                   no\r\nipv4.dhcp-client-id:                    --\r\nipv4.dhcp-send-hostname:                yes\r\nipv4.dhcp-hostname:                     --\r\nipv4.never-default:                     no\r\nipv4.may-fail:                          yes\r\nipv6.method:                            manual\r\nipv6.dns:                               2001:4860:4860::8888\r\nipv6.dns-search:                        example.com\r\nipv6.addresses:                         { ip = 2001:db8:0:1::7/64, gw = 2001:db8:0:1::1 }\r\nipv6.routes:\r\nipv6.ignore-auto-routes:                no\r\nipv6.ignore-auto-dns:                   no\r\nipv6.never-default:                     no\r\nipv6.may-fail:                          yes\r\nipv6.ip6-privacy:                       -1 (unknown)\r\nipv6.dhcp-hostname:                     --\r\n...output omitted...\r\n\r\n```\r\n  \r\nThe **nmcli con mod** name command is used to change the settings for a connection. These changes are also saved in the `/etc/sysconfig/network-scripts/ifcfg-name` file for the connection. Available settings are documented in the nm-settings(5) man page.  \r\nTo set the IPv4 address to 192.0.2.2/24 and default gateway to 192.0.2.254 for the connection static-ens3:  \r\n  \r\n\r\n```bash\r\n[root@host ~]# nmcli con mod static-ens3 ipv4.address 192.0.2.2/24 \\\r\nipv4.gateway 192.0.2.254\r\n```  \r\n\r\n**DELETING A NETWORK CONNECTION**  \r\n  \r\nThe nmcli con del name command deletes the connection named name from the system, disconnecting it from the device and removing the file /etc/sysconfig/network-scripts/ifcfg-name.  \r\n```bash\r\n[root@host ~]# nmcli con del static-ens3\r\n```  \r\n\r\n  **WHO CAN MODIFY NETWORK SETTINGS?**  \r\n The **root** user can make any necessary network configuration changes with nmcli.  \r\n   \r\nHowever, regular users that are logged in on the local console can also make many network configuration changes to the system. They have to log in at the system's keyboard to either a text-based virtual console or the graphical desktop environment to get this control. The logic behind this is that if someone is physically present at the computer's console, it's likely being used as a workstation or laptop and they may need to configure, activate, and deactivate wireless or wired network interfaces at will. By contrast, if the system is a server in the data center, generally the only users logging in locally to the machine itself should be administrators.  \r\n  \r\nRegular users that log in using ssh do not have access to change network permissions without becoming root.\r\nYou can use the **nmcli gen permissions** command to see what your current permissions are.  \r\n\r\n**Summary of Commands**  \r\n  \r\n<table border=1><thead><tr><th>Command</th><th>Purpose</th></tr></thead><tbody><tr><td>nmcli dev status</td><td>Show the NetworkManager status of all network interfaces.</td></tr><tr><td>nmcli con show</td><td>List all connections.</td></tr><tr><td>nmcli con show name</td><td>List the current settings for the connection name.</td></tr><tr><td>nmcli con add con-name name</td><td>Add a new connection named name.</td></tr><tr><td>nmcli con mod name</td><td>Modify the connection name.</td></tr><tr><td>nmcli con reload</td><td>Reload the configuration files (useful after they have been edited by hand).</td></tr><tr><td>nmcli con up name</td><td>Activate the connection name.</td></tr><tr><td>nmcli dev dis dev</td><td>Deactivate and disconnect the current connection on the network interface dev.</td></tr><tr><td>nmcli con del name</td><td>Delete the connection name and its configuration file.</td></tr></tbody></table>", "order": 5, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 273, "fields": {"title": "GUIDED EXERCISE: CONFIGURING NETWORKING FROM THE COMMAND LINE", "slug": "guided-exercise-configuring-networking-from-the-command-line", "content": "", "content_md": "In this exercise, you will configure network settings using nmcli.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to convert a system from DHCP to static configuration.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab net-configure start command. The command runs\r\na start script that determine if the host, servera, is reachable on the network.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-configure start\r\n```\r\n\r\n>**NOTE**<br>\r\n>If prompted by the sudo command for student's password, enter student as\r\n>the password.\r\n\r\n<br>\r\n1. Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, so a password is not required to log in to\r\nservera.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<br>\r\n2. Locate network interface names.\r\n\r\n>**IMPORTANT**<br>\r\n>Network interface names are determined by their bus type and the detection order\r\n>of devices during boot. Your network interface names will vary according to the\r\n>course platform and hardware in use.\r\n\r\n>On your system now, locate the interface name (such as ens06 or en1p2)\r\n>associated with the Ethernet address 52:54:00:00:fa:0a. Use this interface\r\n>name to replace the enX placeholder used throughout this exercise.\r\n\r\nLocate the network interface name associated with the Ethernet address\r\n52:54:00:00:fa:0a. Record or remember this name and use it to replace the enX\r\nplaceholder in subsequent commands.\r\n\r\n```bash\r\n[student@servera ~]$ ip link\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group\r\ndefault qlen 1000\r\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP\r\ngroup default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\n```\r\n\r\n<br>\r\n3. View network settings using nmcli.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Show all connections.\r\n\r\n![](/media/markdownx/8353f035-420f-4339-a8d3-62ce60c0cf30.png)\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. Display only the active connection.\r\nYour network interface name should appear under DEVICE, and the name of the\r\nconnection active for that device is listed on the same line under NAME. This exercise\r\nassumes that the active connection is Wired connection 1.\r\n\r\nIf the name of the active connection is different, use that instead of Wired\r\nconnection 1 for the rest of this exercise.\r\n\r\n![](/media/markdownx/b4ad5019-7b98-4862-a3a4-fca2c1d98fa7.png)\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.3. Display all configuration settings for the active connection.\r\n\r\n```bash\r\n[student@servera ~]$ nmcli con show \"Wired connection 1\"\r\nconnection.id:                         Wired connection 1\t\t\t\t\r\nconnection.uuid:                       03da038a-3257-4722-a478-53055cc90128\t\r\nconnection.stable-id:                  --\r\nconnection.type:                       802-3-ethernet  \t\t\r\nconnection.interface-name:             --\r\nconnection.autoconnect:                yes\r\n...output omitted...\r\nipv4.method:                           manual\r\nipv4.dns:                              10.X0.X0.254\t\t\r\nipv4.dns-search:                       lab.example.com,example.com\r\nipv4.dns-options:                      \"\"\t\t\r\nipv4.dns-priority:                     0\r\nipv4.addresses:                        10.X0.X0.10/24\r\nipv4.gateway:                          10.X0.X0.254\r\n...output omitted...\r\nGENERAL.NAME:                          Wired connection 1                      \r\nGENERAL.UUID:                          03da038a-3257-4722-a478-53055cc90128\t\t                         \r\nGENERAL.DEVICES:                       enX\r\nGENERAL.STATE:                         activated\r\nGENERAL.DEFAULT:                       yes\r\nGENERAL.DEFAULT6:                      no\r\nGENERAL.SPEC-OBJECT:                   --\r\nGENERAL.VPN:                           no\r\nGENERAL.DBUS-PATH:                     /org/freedesktop/NetworkManager/ \r\nActiveConnection/1\r\nGENERAL.CON-PATH:                      /org/freedesktop/NetworkManager/\r\nSettings/1\r\nGENERAL.ZONE:                          --\r\nGENERAL.MASTER-PATH:                   --\r\nIP4.ADDRESS[1]:                        10.X0.X0.10/24\r\nIP4.GATEWAY:                           10.X0.X0.254\r\nIP4.ROUTE[1]:                          dst = 10.X0.X0.0/24, nh = 0.0.0.0, mt =\r\n100\r\nIP4.ROUTE[2]:                          dst = 0.0.0.0/0, nh = 10.X0.X0.254, mt\r\n= 100\r\nIP4.DNS[1]:                            10.X0.X0.254\r\nIP6.ADDRESS[1]:                        fe80::3059:5462:198:58b2/64\t\r\nIP6.GATEWAY:                             --\r\nIP6.ROUTE[1]:                          dst = fe80::/64, nh = ::, mt = 100\r\nIP6.ROUTE[2]:                          dst = ff00::/8, nh = ::, mt = 256,\r\ntable=255\r\n```\r\n\r\nPress q to exit the command.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.4. Show device status.\r\n\r\n![](/media/markdownx/9f1864b6-91ab-4531-b090-a594544866d4.png)\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.5. Display the settings for the enX device.\r\n\r\n```bash\r\n[student@servera ~]$ nmcli dev show enX\r\nGENERAL.DEVICE:                     enX\r\nGENERAL.TYPE:                       ethernet\r\nGENERAL.HWADDR:                     52:54:00:00:FA:0A\r\nGENERAL.MTU:                        1500\r\nGENERAL.STATE:                      100 (connected)\r\nGENERAL.CONNECTION:                 Wired connection 1\r\nGENERAL.CON-PATH:                   /org/freedesktop/NetworkManager/\r\nActiveConnection/1\r\nWIRED-PROPERTIES.CARRIER:           on\r\nIP4.ADDRESS[1]:                     10.X0.X0.10/24\r\nIP4.GATEWAY:                        10.X0.X0.254\r\nIP4.ROUTE[1]:                       dst = 10.X0.X0.0/24, nh = 0.0.0.0, mt =\r\n100\r\nIP4.ROUTE[2]:                        dst = 0.0.0.0/0, nh = 10.X0.X0.254, mt\r\n= 100\r\nIP4.DNS[1]:                          10.X0.X0.254\r\nIP6.ADDRESS[1]:                        fe80::3059:5462:198:58b2/64\r\nIP6.GATEWAY:                          -- \r\nIP6.ROUTE[1]:                         dst = fe80::/64, nh = ::, mt = 100\r\nIP6.ROUTE[2]:                         dst = ff00::/8, nh = ::, mt = 256,\r\ntable=255\r\n```\r\n<br>\r\n4. Create a static connection with the same IPv4 address, network prefix, and default gateway.\r\nName the new connection static-addr.\r\n\r\n>**WARNING**<br>\r\n>Since access to your machine is provided over the primary network connection,\r\n>setting incorrect values during network configuration may make your machine\r\n>unreachable. If this happens, use the Reset button located above what used to be\r\n>your machine's graphical display and try again.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con add con-name \"static-addr\" ifname enX \\\r\ntype ethernet ipv4.method manual \\\r\nipv4.address 10.X0.X0.10/24 ipv4.gateway 10.X0.X0.254\r\nConnection 'static-addr' (15aa3901-555d-40cb-94c6-cea6f9151634) successfully\r\nadded.\r\n```\r\n\r\n<br>\r\n5. Modify the new connection to add the DNS setting.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con mod \"static-addr\" ipv4.dns\r\n10.X0.X0.254\r\n```\r\n\r\n<br>\r\n6. Display and activate the new connection.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. View all connections.\r\n\r\n![](/media/markdownx/e0229fb3-c9f4-4ae4-9d50-19e4bc7a98fb.png)\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2. View the active connection.\r\n\r\n![](/media/markdownx/c198f732-be9e-4835-804a-ee554149810e.png)\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.3. Activate the new static-addr connection.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con up \"static-addr\"\r\nConnection successfully activated (D-Bus active path: /org/\r\nfreedesktop/NetworkManager/ActiveConnection/2)\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.4. Verify the new active connection.\r\n\r\n![](/media/markdownx/b692780a-c48f-4345-a8f1-bb4b4269f52c.png)\r\n\r\n<br>\r\n7. Configure the original connection so that it does not start at boot, and verify that the static\r\nconnection is used when the system reboots.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.1. Disable the original connection from autostarting at boot.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con mod \"Wired connection 1\" \\\r\nconnection.autoconnect no\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.2. Reboot the system.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl reboot\r\nConnection to servera closed by remote host.\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.3. View the active connection.\r\n\r\n![](/media/markdownx/3d19a96d-393e-4a98-aff5-367401f5786d.png)\r\n\r\n<br>\r\n8. Test connectivity using the new network addresses.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1. Verify the IP address.\r\n\r\n```bash\r\n[student@servera ~]$ ip addr show enX\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel\r\nstate UP group default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\ninet 10.X0.X0.10/24 brd 10.X0.X0.255 scope global\r\nnoprefixroute enX\r\nvalid_lft forever preferred_lft forever\r\ninet6 fe80::6556:cdd9:ce15:1484/64 scope link noprefixroute\r\nvalid_lft forever preferred_lft forever\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2. Verify the default gateway.\r\n\r\n```bash\r\n[student@servera ~]$ ip route\r\ndefault via 10.X0.X0.254 dev enX proto static metric 100\r\n10.X0.X0.0/24 dev enX proto kernel scope link src 10.X0.X0.10\r\nmetric 100\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3. Ping the DNS address.\r\n\r\n```bash\r\n[student@servera ~]$ ping -c3 10.X0.X0.254\r\nPING 10.X0.X0.254 (10.X0.X0.254) 56(84) bytes of data.\r\n64 bytes from 10.X0.X0.254: icmp_seq=1 ttl=64 time=0.225 ms\r\n64 bytes from 10.X0.X0.254: icmp_seq=2 ttl=64 time=0.314 ms\r\n64 bytes from 10.X0.X0.254: icmp_seq=3 ttl=64 time=0.472 ms\r\n--- 10.X0.X0.254 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 46ms\r\nrtt min/avg/max/mdev = 0.225/0.337/0.472/0.102 ms\r\n```\r\n\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.4. Exit from servera.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Finish<br><hr>\r\nOn workstation, run the lab net-configure finish script to finish this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-configure finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 274, "fields": {"title": "EDITING NETWORK CONFIGURATION FILES", "slug": "editing-network-configuration-files", "content": "", "content_md": "##  OBJECTIVES\r\nAfter completing this section, you should be able to modify network configuration by editing configuration files.  \r\n## DESCRIBING CONNECTION CONFIGURATION FILES  \r\n  \r\nBy default, changes made with **nmcli con mod** name are automatically saved to `/etc/sysconfig/network-scripts/ifcfg-name`. That file can also be manually edited with a text editor. After doing so, run **nmcli con reload** so that `NetworkManager` reads the configuration changes.  \r\n  \r\nFor backward-compatibility reasons, the directives saved in that file have different names and syntax than the nm-settings(5) names. The following table maps some of the key setting names to ifcfg-* directives.  \r\n  \r\n![](/media/markdownx/1fdb4096-2931-45c0-a3fe-6f4102b0863a.png)  \r\n  \r\n![](/media/markdownx/5d80644d-c83a-4ae7-9795-2925ad1987b6.png)  \r\n![](/media/markdownx/225de345-9743-4bde-b155-ca06fafc00dd.png)  \r\n  \r\n**MODIFYING NETWORK CONFIGURATION**  \r\n  \r\nIt is also possible to configure the network by directly editing the connection configuration files. Connection configuration files control the software interfaces for individual network devices. These files are usually named /etc/sysconfig/network-scripts/ifcfg-name, where name refers to the name of the device or connection that the configuration file controls. The following are standard variables found in the file used for static or dynamic IPv4 configuration.  \r\n   \r\n![](/media/markdownx/6444d7ec-91be-4c37-a202-19c8fb56ecaa.png)\r\n  \r\nIn the static settings, variables for IP address, prefix, and gateway have a number at the end. This allows multiple sets of values to be assigned to the interface. The DNS variable also has a number used to specify the order of lookup when multiple servers are specified.  \r\n\r\nAfter modifying the configuration files, run nmcli con reload to make NetworkManager read the configuration changes. The interface still needs to be restarted for changes to take effect.  \r\n\r\n```bash\r\n[root@host ~]# nmcli con reload\r\n[root@host ~]# nmcli con down \"static-ens3\"\r\n[root@host ~]# nmcli con up \"static-ens3\"\r\n```", "order": 7, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 275, "fields": {"title": "GUIDED EXERCISE: EDITING NETWORK CONFIGURATION FILES", "slug": "guided-exercise-editing-network-configuration-files", "content": "", "content_md": "In this exercise, you will manually modify network configuration files and ensure that the new settings take effect.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to add an additional network address to each system.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab net-edit start command. The command runs a start\r\nscript that determine if the hosts, servera and serverb, are reachable on the network.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-edit start\r\n```\r\n\r\n<br>\r\n1. Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, so a password is not required to log in to\r\nservera.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<br>\r\n2. Locate network interface names.\r\n\r\n>**IMPORTANT**<br><hr>\r\n>Network interface names are determined by their bus type and the detection order\r\n>of devices during boot. Your network interface names will vary according to the\r\n>course platform and hardware in use.\r\n>On your system now, locate the interface name (such as ens06 or en1p2)\r\n>associated with the Ethernet address 52:54:00:00:fa:0a. Use this interface\r\n>name to replace the enX placeholder used throughout this exercise.\r\n\r\nLocate the network interface name associated with the Ethernet address\r\n52:54:00:00:fa:0a. Record or remember this name and use it to replace the enX\r\nplaceholder in subsequent commands. The active connection is also named Wired\r\nconnection 1 (and therefore is managed by the file /etc/sysconfig/network-\r\nscripts/ifcfg-Wired_connection_1).\r\n\r\nIf you have done previous exercises in this chapter and this was true for your system, it\r\nshould be true for this exercise as well.\r\n\r\n```bash\r\n[student@servera ~]$ ip link\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group\r\ndefault qlen 1000\r\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP\r\ngroup default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\n[student@servera ~]$ nmcli con show --active\r\nNAME UUID TYPE DEVICE\r\nWired connection 1 03da038a-3257-4722-a478-53055cc90128 ethernet enX\r\n[student@servera ~]$ ls /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1\r\n```\r\n\r\n<br>\r\n3. Edit the /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1 file on\r\nservera to add an additional address of 10.X0.X0.20/24.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Append an entry to the file to specify the IPv4 address.\r\n\r\n```bash\r\n[student@servera ~]$ echo \"IPADDR1=10.X0.X0.20\" | \\\r\nsudo tee -a /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1\r\n[sudo] password for student: student\r\nIPADDR1=10.X0.X0.20\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. Append an entry to the file to specify the network prefix.\r\n\r\n```bash\r\n[student@servera ~]$ echo \"PREFIX1=24\" | \\\r\nsudo tee -a /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1\r\nPREFIX1=24\r\n```\r\n\r\n<br>\r\n4. Activate the new address.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Reload the configuration changes.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con reload\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2. Restart the connection with the new settings.\r\n\r\n```bash\r\n[student@servera ~]$ sudo nmcli con up \"Wired connection 1\"\r\nConnection successfully activated (D-Bus active path: /org/\r\nfreedesktop/NetworkManager/ActiveConnection/3)\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.3. Verify the new IP address.\r\n\r\n```bash\r\n[student@servera ~]$ ip addr show enX\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel\r\nstate UP group default qlen 1000\r\nlink/ether 52:54:00:00:fa:0a brd ff:ff:ff:ff:ff:ff\r\ninet 10.X0.X0.10/24 brd 10.X0.X0.255 scope global\r\nnoprefixroute enX\r\nvalid_lft forever preferred_lft forever\r\ninet 10.X0.X0.20/24 brd 10.X0.X0.2155 scope global noprefixroute enX\r\nvalid_lft forever preferred_lft forever\r\ninet6 fe80::4bf3:e1d9:3076:f8d7/64 scope link noprefixroute\r\nvalid_lft forever preferred_lft forever\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.4. Exit from servera to return to workstation as student user.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<br>\r\n5. As the student user on serverb, edit the /etc/sysconfig/network-scripts/\r\nifcfg-Wired_connection_1 file to add an additional address of 10.X0.X0.21/24, then\r\nload the new configuration.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1. From workstation, use the ssh command to log in to serverb as the student user.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2. Modify the ifcfg-Wired_connection_1 file to add the second IPv4 address and network prefix.\r\n\r\n```bash\r\n[student@serverb ~]$ echo \"IPADDR2=10.X0.X0.21\" | \\\r\nsudo tee -a /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1\r\n[sudo] password for student: student\r\nIPADDR2=10.X0.X0.21\r\n[student@serverb ~]$ echo \"PREFIX2=24\" | \\\r\nsudo tee -a /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1\r\nPREFIX2=24\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.3. Reload the configuration changes.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo nmcli con reload\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.4. Bring up the connection with the new settings.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo nmcli con up \"Wired connection 1\"\r\nConnection successfully activated (D-Bus active path: /org/\r\nfreedesktop/NetworkManager/ActiveConnection/4)\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.5. Verify the new IP address.\r\n\r\n```bash\r\n[student@serverb ~]$ ip addr show enX\r\n2: enX: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel\r\nstate UP group default qlen 1000\r\nlink/ether 52:54:00:00:fa:0b brd ff:ff:ff:ff:ff:ff\r\ninet 10.X0.X0.11/24 brd 10.X0.X0.255 scope global\r\nnoprefixroute enX\r\nvalid_lft forever preferred_lft forever\r\ninet 10.X0.X0.21/24 brd 10.X0.X0.2155 scope global noprefixroute enX\r\nvalid_lft forever preferred_lft forever\r\ninet6 fe80::74c:3476:4113:463f/64 scope link noprefixroute\r\nvalid_lft forever preferred_lft forever\r\n```\r\n\r\n<br>\r\n6. Test connectivity using the new network addresses.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1. From serverb, ping the new address of servera.\r\n\r\n```bash\r\n[student@serverb ~]$ ping -c3 10.X0.X0.20\r\nPING 10.X0.X0.20 (10.X0.X0.20) 56(84) bytes of data.\r\n64 bytes from 10.X0.X0.20: icmp_seq=1 ttl=64 time=0.342 ms\r\n64 bytes from 10.X0.X0.20: icmp_seq=2 ttl=64 time=0.188 ms\r\n64 bytes from 10.X0.X0.20: icmp_seq=3 ttl=64 time=0.317 ms\r\n--- 10.X0.X0.20 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 35ms\r\nrtt min/avg/max/mdev = 0.188/0.282/0.342/0.068 ms\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2. Exit from serverb to return to workstation.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.3. From workstation, use the ssh command to access servera as the student user to ping the new address of serverb.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@servera ping -c3 10.X0.X0.21\r\nPING 10.X0.X0.21 (10.X0.X0.21) 56(84) bytes of data.\r\n64 bytes from 10.X0.X0.21: icmp_seq=1 ttl=64 time=0.269 ms\r\n64 bytes from 10.X0.X0.21: icmp_seq=2 ttl=64 time=0.338 ms\r\n64 bytes from 10.X0.X0.21: icmp_seq=3 ttl=64 time=0.361 ms\r\n--- 10.X0.X0.21 ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 48ms\r\nrtt min/avg/max/mdev = 0.269/0.322/0.361/0.044 ms\r\n```\r\n\r\n##Finish<br><hr>\r\nOn workstation, run the lab net-edit finish script to finish this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-edit finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 276, "fields": {"title": "CONFIGURING HOST NAMES AND NAME RESOLUTION", "slug": "configuring-host-names-and-name-resolution", "content": "", "content_md": "## OBJECTIVES  \r\n  \r\nAfter completing this section, you should be able to configure a server\u2019s static host name and its name resolution and test the results.  \r\n  \r\n## CHANGING THE SYSTEM HOST NAME  \r\nThe hostname command displays or temporarily modifies the system's fully qualified host name.  \r\n```bash\r\n[root@host ~]# hostname\r\nhost@example.com\r\n```  \r\n  \r\nA static host name may be specified in the /etc/hostname file. The hostnamectl command is used to modify this file and may be used to view the status of the system's fully qualified host name. If this file does not exist, the host name is set by a reverse DNS query once the interface has an IP address assigned.  \r\n  \r\n```bash\r\n[root@host ~]# hostnamectl set-hostname host@example.com\r\n[root@host ~]# hostnamectl status\r\n   Static hostname: host.example.com\r\n         Icon name: computer-vm\r\n           Chassis: vm\r\n        Machine ID: 73ab164e278e48be9bf80e80714a8cd5\r\n           Boot ID: 6b1cbc4177164ef58c0e9ed4adb2904f\r\n    Virtualization: kvm\r\n  Operating System: Red Hat Enterprise Linux 8.0 beta (Ootpa)\r\n       CPE OS Name: cpe:/o:redhat:enterprise_linux:8.0:beta\r\n            Kernel: Linux 4.18.0-60.el8.x86_64\r\n      Architecture: x86-64\r\n[root@host ~]# cat /etc/hostname\r\nhost@example.com\r\n```  \r\n**CONFIGURING NAME RESOLUTION**  \r\n  \r\nThe stub resolver is used to convert host names to IP addresses or the reverse. It determines where to look based on the configuration of the /etc/nsswitch.conf file. By default, the contents of the /etc/hosts file are checked first.  \r\n```bash\r\n[root@host ~]# cat /etc/hosts\r\n127.0.0.1       localhost localhost.localdomain localhost4 localhost4.localdomain4\r\n::1             localhost localhost.localdomain localhost6 localhost6.localdomain6\r\n\r\n172.25.254.254 classroom.example.com\r\n172.25.254.254 content.example.com\r\n\r\n```  \r\n  \r\nThe **getent hosts** hostname command can be used to test host name resolution using the /etc/hosts file.\r\nIf an entry is not found in the /etc/hosts file, by default the stub resolver tries to look up the hostname by using a DNS nameserver. The /etc/resolv.conf file controls how this query is performed:  \r\n  \r\n\u2022  search: a list of domain names to try with a short host name. Both this and domain should not be set in the same file; if they are, the last instance wins. See resolv.conf(5) for details.  \r\n  \r\n\u2022  nameserver: the IP address of a nameserver to query. Up to three nameserver directives may be given to provide backups if one is down.   \r\n  \r\n```bash\r\n[root@host ~]# cat /etc/resolv.conf\r\n# Generated by NetworkManager\r\ndomain example.com\r\nsearch example.com\r\nnameserver 172.25.254.254\r\n```\r\n`NetworkManager` updates the `/etc/resolv.conf` file using DNS settings in the connection configuration files. Use the **nmcli** to modify the connections.  \r\n  \r\n```bash\r\n[root@host ~]# nmcli con mod ID ipv4.dns IP\r\n[root@host ~]# nmcli con down ID\r\n[root@host ~]# nmcli con up ID\r\n[root@host ~]# cat /etc/sysconfig/network-scripts/ifcfg-ID\r\n...output omitted...\r\nDNS1=8.8.8.8\r\n...output omitted...\r\n\r\n```  \r\nThe default behavior of nmcli con mod ID ipv4.dns IP is to replace any previous DNS settings with the new IP list provided. A + or - symbol in front of the ipv4.dns argument adds or removes an individual entry.   \r\n  \r\n```bash\r\n[root@host ~]# nmcli con mod ID +ipv4.dns IP\r\n``` \r\n   \r\n**Testing DNS Name Resolution**  \r\n  \r\nThe host HOSTNAME command can be used to test DNS server connectivity.  \r\n  \r\n```bash\r\n[root@host ~]# host classroom.example.com\r\nclassroom.example.com has address 172.25.254.254\r\n[root@host ~]# host 172.25.254.254\r\n254.254.25.172.in-addr.arpa domain name pointer classroom.example.com.\r\n```", "order": 9, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 277, "fields": {"title": "GUIDED EXERCISE: CONFIGURING HOST NAMES AND NAME RESOLUTION", "slug": "guided-exercise-configuring-host-names-and-name-resolution", "content": "", "content_md": "In this exercise, you will manually configure the system\u2019s static host name, /etc/hosts file,\r\nand DNS name resolver.\r\n\t\r\n##OUTCOMES<br>\r\nYou should be able to set a customized host name and configure name resolution settings.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\t\r\nFrom workstation, run the lab net-hostnames start command. The command runs\r\na start script that determine if the host, servera, is reachable on the network.\r\n\t\r\n```bash\r\n[student@workstation ~]$ lab net-hostnames start\r\n```\r\n\t\r\n<br>\r\n1. Use the ssh command to log in to servera as the student user. The systems are\r\nconfigured to use SSH keys for authentication, so a password is not required to log in to\r\nservera.\r\n\t\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\t\r\n<br>\r\n2. View the current host name settings.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Display the current host name.\r\n\r\n```bash\r\n[student@servera ~]$ hostname\r\nservera.lab.example.com\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2. Display the host name status.\r\n\r\n```bash\r\n[student@servera ~]$ hostnamectl status\r\nStatic hostname:    n/a\r\nTransient hostname: servera.lab.example.com\r\nIcon name:          computer-vm\r\nChassis:            vm\r\nMachine ID:         73ab164e278e48be9bf80e80714a8cd5\r\nBoot ID:            76b13a300c944ab49445af778cb8f749\r\nVirtualization:     kvm\r\nOperating System:   Red Hat Enterprise Linux 8.0 (Ootpa)\r\nCPE OS Name:        cpe:/o:redhat:enterprise_linux:8.0:GA\r\nKernel:             Linux 4.18.0-80.el8.x86_64\r\nArchitecture:       x86-64\r\n```\r\n\r\n<br>\r\n3. Set a static host name to match the current transient host name.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Change the host name and host name onfiguration file.\r\n\r\n```bash\r\n[student@servera ~]$ sudo hostnamectl set-hostname\r\nservera.lab.example.com\r\n[sudo] password for student: student\r\n[student@servera ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. View the configuration file providing the host name at network start.\r\n\r\n```bash\r\n[student@servera ~]$ cat /etc/hostname\r\nservera.lab.example.com\r\n```\r\n\t\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.3. Display the host name status.\r\n\r\n![](/media/markdownx/e9b31134-d167-49de-bb2f-9bdf8c207536.png)\r\n\r\n<br>\r\n4. Temporarily change the host name.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Change the host name.\r\n\r\n```bash\r\n[student@servera ~]$ sudo hostname testname\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2. Display the current host name.\r\n\r\n```bash\r\n[student@servera ~]$ hostname\r\ntestname\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.3. View the configuration file providing the host name at network start.\r\n\r\n```bash\r\n[student@servera ~]$ cat /etc/hostname\r\nservera.lab.example.com\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.4. Reboot the system.\r\n\r\n```bash\r\n[student@servera ~]$ sudo systemctl reboot\r\nConnection to servera closed by remote host.\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.5. From workstation log in to servera as student user.\r\n\t\r\n```bash\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.6. Display the current host name.\r\n\r\n```bash\r\n[student@servera ~]$ hostname\r\nservera.lab.example.com\r\n```\r\n\r\n<br>\r\n5. Add a local nickname for the classroom server.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1. Look up the IP address of the classroom.example.com.\r\n\r\n```bash\r\n[student@servera ~]$ host classroom.example.com\r\nclassroom.example.com has address 172.25.254.254\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2. Modify /etc/hosts so that the additional name of class can be used to access the IP address 172.25.254.254.\r\n\r\n```bash\r\n[student@servera ~]$ sudo vim /etc/hosts\r\n[student@servera ~]$ cat /etc/hosts\r\n127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\r\n::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\r\n172.25.254.254 classroom.example.com classroom class\r\n172.25.254.254 content.example.com content\r\n...content omitted...\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.3. Look up the IP address of class.\r\n\r\n```bash\r\n[student@servera ~]$ host class\r\nHost class not found: 2(SERVFAIL)\r\n[student@servera ~]$ getent hosts class\r\n172.25.254.254 classroom.example.com class\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.4. Ping class.\r\n\r\n```bash\r\n[student@servera ~]$ ping -c3 class\r\nPING classroom.example.com (172.25.254.254) 56(84) bytes of data.\r\n64 bytes from classroom.example.com (172.25.254.254): icmp_seq=1\r\nttl=64 time=0.397 ms\r\n64 bytes from classroom.example.com (172.25.254.254): icmp_seq=2\r\nttl=64 time=0.447 ms\r\n64 bytes from classroom.example.com (172.25.254.254): icmp_seq=3\r\nttl=64 time=0.470 ms\r\n--- classroom.example.com ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 2000ms\r\nrtt min/avg/max/mdev = 0.397/0.438/0.470/0.030 ms\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.5. Exit from servera.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Finish<br><hr>\r\nOn workstation, run the lab net-hostnames finish script to finish this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab net-hostnames finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 10, "is_visible": true, "is_task": false, "module": 38, "draft": false, "files": []}}, {"model": "courses.section", "pk": 278, "fields": {"title": "MANAGING COMPRESSED TAR ARCHIVES", "slug": "managing-compressed-tar-archives", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to archive files and directories into a compressed\r\nfile using tar, and extract the contents of an existing tar archive.\r\n\r\n##THE tar COMMAND<br>\r\nArchiving and compressing files are useful when creating backups and transferring data across a\r\nnetwork. One of the oldest and most common commands for creating and working with backup\r\narchives is the tar command.\r\n\r\nWith tar, users can gather large sets of files into a single file (archive). A tar archive is a\r\nstructured sequence of file data mixed in with metadata about each file and an index so that\r\nindividual files can be extracted. The archive can be compressed using gzip, bzip2, or xz\r\ncompression.\r\n\r\nThe tar command can list the contents of archives or extract their files to the current system.\r\n\r\n##SELECTED tar OPTIONS<br>\r\n\r\ntar command options are divided into operations (the action you want to take): general options\r\nand compression options. The table below shows common options, long version of options, and\r\ntheir description:\r\n\r\n**Overview of tar Operations**\r\n\r\n![](/media/markdownx/04036a7e-d777-4ea2-a894-0b1265a37bf7.png)\r\n\r\n**Selected tar General Options**\r\n\r\n![](/media/markdownx/31f28c70-2ccc-411b-bb52-d5be97afc67b.png)\r\n\r\n**Overview of tar Compression Options**\r\n\r\n![](/media/markdownx/2f537775-7d55-4445-b27f-6a8b2d4ed6ad.png)\r\n\r\n##LISTING OPTIONS OF THE tar COMMAND<br>\r\nThe tar command expects one of the three following options:\r\n* Use the -c or --create option to create an archive.\r\n* Use the -t or --list option to list the contents of an archive.\r\n* Use the -x or --extract option to extract an archive.\r\n\r\n\r\nOther commonly used options are:\r\n* Use the -f or --file= option with a file name as an argument of the archive to operate.\r\n* Use the -v or --verbose option for verbosity; useful to see which files get added to or\r\nextracted from the archive.\r\n\r\n* NOTE\r\nThe tar command actually supports a third, old option style that uses the standard\r\nsingle-letter options with no leading -. It is still commonly encountered, and\r\nyou might run into this syntax when working with other people's instructions or\r\ncommands. The info tar 'old options' command discusses how this differs\r\nfrom normal short options in some detail.\r\n\r\nYou can ignore old options for now and focus on the standard short and long options sytax.\r\n\r\n##ARCHIVING FILES AND DIRECTORIES<br>\r\nThe first option to use when creating a new archive is the c option, followed by the f option, then\r\na single space, then the file name of the archive to be created, and finally the list of files and\r\ndirectories that should get added to the archive. The archive is created in the current directory\r\nunless specified otherwise.\r\n\r\n##WARNING<br>\r\nBefore creating a tar archive, verify that there is no other archive in the directory\r\nwith the same name as the new archive to be created. The tar command overwrites\r\nan existing archive without warning.\r\n\r\nThe following command creates an archive named archive.tar with the contents of file1,\r\nfile2, and file3 in the user's home directory.\r\n\r\n```\r\n[user@host ~]$ tar -cf archive.tar file1 file2 file3\r\n[user@host ~]$ ls archive.tar\r\narchive.tar\r\n```\r\n\r\nThe above tar command can also be executed using the long version options.\r\n\r\n```\r\n[user@host ~]$ tar --file=archive.tar --create file1 file2 file3\r\n```\r\n\r\n* NOTE<br>\r\nWhen archiving files by absolute path names, the leading / of the path is removed\r\nfrom the file name by default. Removing the leading / of the path help users to\r\navoid overwriting important files when extracting the archive. The tar command\r\nextracts files relative to the current working directory.\r\n\r\nFor tar to be able to archive the selected files, it is mandatory that the user executing the tar\r\ncommand can read the files. For example, creating a new archive of the /etc folder and all of\r\nits content requires root privileges, because only the root user is allowed to read all of the\r\nfiles present in the /etc directory. An unprivileged user can create an archive of the /etc\r\ndirectory, but the archive omits files which do not include read permission for the user, and it omits\r\ndirectories which do not include both read and execute permission for the user.\r\n\r\nTo create the tar archive named, /root/etc.tar, with the /etc directory as content as user\r\nroot:\r\n\r\n```\r\n[root@host ~]# tar -cf /root/etc.tar /etc\r\ntar: Removing leading `/' from member names\r\n[root@host ~]#\r\n```\r\n\r\n* IMPORTANT<br>\r\nSome advanced permissions that we have not covered in this course, such as ACLs\r\nand SELinux contexts, are not automatically stored in a tar archive. Use the --\r\nxattrs option when creating an archive to store those extended attributes in the\r\ntar archive.\r\n\r\n##LISTING CONTENTS OF AN ARCHIVE<br>\r\nThe t option directs tar to list the contents (table of contents, hence t) of the archive. Use the f\r\noption with the name of the archive to be queried. For example:\r\n\r\n```\r\n[root@host ~]# tar -tf /root/etc.tar\r\netc/\r\netc/fstab\r\netc/crypttab\r\netc/mtab\r\n...output omitted...\r\n```\r\n\r\n##EXTRACTING FILES FROM AN ARCHIVE<br>\r\nA tar archive should usually be extracted in an empty directory to ensure it does not overwrite any\r\nexisting files. When root extracts an archive, the tar command preserves the original user and\r\ngroup ownership of the files. If a regular user extracts files using tar, the file ownership belongs to\r\nthe user extracting the files from the archive.\r\n\r\nTo restore files from the /root/etc.tar archive to the /root/etcbackup directory, run:\r\n\r\n```\r\n[root@host ~]# mkdir /root/etcbackup\r\n[root@host ~]# cd /root/etcbackup\r\n[root@host etcbackup]# tar -tf /root/etc.tar\r\netc/\r\netc/fstab\r\netc/crypttab\r\netc/mtab\r\n...output omitted...\r\n[root@host etcbackup]# tar -xf /root/etc.tar\r\n```\r\n\r\nBy default, when files get extracted from an archive, the umask is subtracted from the permissions\r\nof archive content. To preserve the permissions of an archived file, the p option when extracting an\r\narchive.\r\n\r\nIn this example, an archive named, /root/myscripts.tar, is extracted in the /root/scripts\r\ndirectory while preserving the permissions of the extracted files:\r\n\r\n```\r\n[root@host ~]# mkdir /root/scripts\r\n[root@host ~]# cd /root/scripts\r\n[root@host scripts]# tar -xpf /root/myscripts.tar\r\n```\r\n\r\n##CREATING A COMPRESSED ARCHIVE<br>\r\nThe tar command supports three compression methods. There are three different compression\r\nmethods supported by the tar command. The gzip compression is the fastest and oldest one\r\nand is most widely available across distributions and even across platforms. bzip2 compression\r\ncreates smaller archive files compared to gzip but is less widely available than gzip, while the\r\nxz compression method is relatively new, but usually offers the best compression ratio of the\r\nmethods available.\r\n\r\n* NOTE<br>\r\nThe effectiveness of any compression algorithm depends on the type of data that\r\nis compressed. Data files that are already compressed, such as compressed picture\r\nformats or RPM files, usually lead to a low compression ratio.\r\n\r\nIt is good practice to use a single top-level directory, which can contain other directories and files,\r\nto simplify the extraction of the files in an organized way.\r\n\r\nUse one of the following options to create a compressed tar archive:\r\n\r\n* -z or --gzip for gzip compression (filename.tar.gz or filename.tgz)\r\n* -j or --bzip2 for bzip2 compression (filename.tar.bz2)\r\n* -J or -xz for xz compression (filename.tar.xz)\r\n\r\nTo create a gzip compressed archive named /root/etcbackup.tar.gz, with the contents\r\nfrom the /etc directory on host:\r\n\r\n```\r\n[root@host ~]# tar -czf /root/etcbackup.tar.gz /etc\r\ntar: Removing leading `/' from member names\r\n```\r\n\r\nTo create a bzip2 compressed archive named /root/logbackup.tar.bz2, with the contents\r\nfrom the /var/log directory on host:\r\n\r\n```\r\n[root@host ~]$ tar -cjf /root/logbackup.tar.bz2 /var/log\r\ntar: Removing leading `/' from member names\r\n```\r\n\r\nTo create a xz compressed archive named, /root/sshconfig.tar.xz, with the contents from\r\nthe /etc/ssh directory on host:\r\n\r\n```\r\n[root@host ~]$ tar -cJf /root/sshconfig.tar.xz /etc/ssh\r\ntar: Removing leading `/' from member names\r\n```\r\n\r\nAfter creating an archive, verify the content of an archive using the tf options. It is not mandatory\r\nto use the option for compression agent when listing the content of a compressed archive file. For\r\nexample, to list the content archived in the /root/etcbackup.tar.gz file, which uses the gzip\r\ncompression, use the following command:\r\n\r\n```\r\n[root@host ~]# tar -tf /root/etcbackup.tar.gz /etc\r\netc/\r\netc/fstab\r\netc/crypttab\r\netc/mtab\r\n...output omitted...\r\n```\r\n\r\n##EXTRACTING A COMPRESSED ARCHIVE<br>\r\nThe first step when extracting a compressed tar archive is to determine where the archived\r\nfiles should be extracted to, then create and change to the target directory. The tar command\r\ndetermines which compression was used and it is usually not necessary to use the same\r\ncompression option used when creating the archive. It is valid to add the decompression method\r\nto the tar command. If one chooses to do so, the correct decompression type option must be\r\nused; otherwise tar yields an error about the decompression type specified in the options not\r\nmatching the file's decompression type.\r\n\r\nTo extract the contents of a gzip compressed archive named /root/etcbackup.tar.gz in the\r\n/tmp/etcbackup directory:\r\n\r\n```\r\n[root@host ~]# mkdir /tmp/etcbackup\r\n[root@host ~]# cd /tmp/etcbackup\r\n[root@host etcbackup]# tar -tf /root/etcbackup.tar.gz\r\netc/\r\netc/fstab\r\netc/crypttab\r\netc/mtab\r\n...output omitted...\r\n[root@host etcbackup]# tar -xzf /root/etcbackup.tar.gz\r\n```\r\n\r\nTo extract the contents of a bzip2 compressed archive named /root/logbackup.tar.bz2 in\r\nthe /tmp/logbackup directory:\r\n\r\n```\r\n[root@host ~]# mkdir /tmp/logbackup\r\n[root@host ~]# cd /tmp/logbackup\r\n[root@host logbackup]# tar -tf /root/logbackup.tar.bz2\r\nvar/log/\r\nvar/log/lastlog\r\nvar/log/README\r\nvar/log/private/\r\nvar/log/wtmp\r\nvar/log/btmp\r\n...output omitted...\r\n```\r\n\r\nTo extract the contents of a xz compressed archive named /root/sshbackup.tar.xz in the /\r\ntmp/sshbackup directory:\r\n\r\n```\r\n[root@host ~]$ mkdir /tmp/sshbackup\r\n[root@host ~]# cd /tmp/sshbackup\r\n[root@host logbackup]# tar -tf /root/sshbackup.tar.xz\r\netc/ssh/\r\netc/ssh/moduli\r\netc/ssh/ssh_config\r\netc/ssh/ssh_config.d/\r\netc/ssh/ssh_config.d/05-redhat.conf\r\netc/ssh/sshd_config\r\n...output omitted...\r\n```\r\n\r\nListing a compressed tar archive works in the same way as listing an uncompressed tar archive.\r\n\r\n* NOTE\r\nAdditionally, gzip, bzip2, and xz can be used independently to compress single\r\nfiles. For example, the gzip etc.tar command results in the etc.tar.gz\r\ncompressed file, while the bzip2 abc.tar command results in the abc.tar.bz2\r\ncompressed file, and the xz myarchive.tar command results in the\r\nmyarchive.tar.xz compressed file.\r\n\r\n\r\nThe corresponding commands to decompress are gunzip, bunzip2, and unxz.\r\nFor example, the gunzip /tmp/etc.tar.gz command results in the etc.tar\r\nuncompressed tar file, while the bunzip2 abc.tar.bz2 command results in the\r\nabc.tar uncompressed tar file, and the unxz myarchive.tar.xz command\r\nresults in the myarchive.tar uncompressed tar file.\r\n\r\n* REFERENCES\r\ntar(1), gzip(1), gunzip(1), bzip2(1), bunzip2(1), xz(1), unxz(1) man pages", "order": 1, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 279, "fields": {"title": "GUIDED EXERCISE : MANAGING COMPRESSED TAR ARCHIVES", "slug": "guided-exercise-managing-compressed-tar-archives", "content": "", "content_md": "In this exercise, you will create archive files and extract their contents with the tar command.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to archive a directory tree and extract the archive content to another\r\nlocation.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\n\r\nFrom workstation, run the lab archive-manage start command. The command\r\nruns a start script that determines if the host, servera, is reachable on the network. The\r\nscript also ensures that the file and directory to be created in the exercise does not exist on\r\nservera.\r\n```\r\n[student@workstation ~]$ lab archive-manage start\r\n```\r\n\r\n* 1.Use the ssh command to log in to servera as the student user.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Switch to the root user as only the root user can access all of the content of the /etc\r\ndirectory.\r\n\r\n```\r\n[student@servera ~]$ su -\r\nPassword: redhat\r\n[root@servera ~]#\r\n```\r\n\r\n* 3.Use the tar command with the -czf options to create an archive of the /etc directory\r\nusing gzip compression. Save the archive file as /tmp/etc.tar.gz.\r\n\r\n```\r\n[root@servera ~]# tar -czf /tmp/etc.tar.gz /etc\r\ntar: Removing leading `/' from member names\r\n[root@servera ~]#\r\n```\r\n\r\n* 4.Use the tar command with the -tzf options to verify that the etc.tar.gz archive\r\ncontains the files from the /etc directory.\r\n\r\n```\r\n[root@servera ~]# tar -tzf /tmp/etc.tar.gz\r\netc/\r\netc/mtab\r\netc/fstab\r\netc/crypttab\r\netc/resolv.conf\r\n...output omitted...\r\n```\r\n\r\n* 5.On servera, create a directory named /backuptest. Verify that the etc.tar.gz\r\nbackup file is a valid archive by decompressing the file to the /backuptest directory.\r\n\r\n* 5.1.Create the /backuptest directory.\r\n\r\n```\r\n[root@servera ~]# mkdir /backuptest\r\n```\r\n\r\n* 5.2.Change to the /backuptest directory.\r\n\r\n```\r\n[root@servera ~]# cd /backuptest\r\n[root@servera backuptest]#\r\n```\r\n\r\n* 5.3.List the contents of the etc.tar.gz archive before extracting.\r\n\r\n```\r\n[root@servera backuptest]# tar -tzf /tmp/etc.tar.gz\r\netc/\r\netc/mtab\r\netc/fstab\r\netc/crypttab\r\netc/resolv.conf\r\n...output omitted...\r\n```\r\n\r\n* 5.4.Extract the /tmp/etc.tar.gz archive to the /backuptest directory.\r\n\r\n```\r\n[root@servera backuptest]# tar -xzf /tmp/etc.tar.gz\r\n[root@servera backuptest]#\r\n```\r\n* 5.5.List the content of the /backuptest directory. Verify that the directory contains\r\nthe files from the /etc directory.\r\n\r\n```\r\n[root@servera backuptest]# ls -l\r\ntotal 12\r\ndrwxr-xr-x. 95 root root 8192 Feb 8 10:16 etc\r\n[root@servera backuptest]# cd etc\r\n[root@servera etc]# ls -l\r\ntotal 1204\r\n-rw-r--r--.  1  root root    16  16 adjtime\r\n-rw-r--r--.  1  root root  1518  19 aliases\r\ndrwxr-xr-x.  2  root root   169  4  alternatives\r\n-rw-r--r--.  1  root root   541  2  anacrontab\r\n\r\n```\r\n\r\n* 6.Exit from servera.\r\n\r\n```\r\n[root@servera backuptest]# exit\r\nlogout\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation]$\r\n```\r\n\r\n###Finish<br.\r\nOn workstation, run the lab archive-manage finish script to complete this exercise.\r\n```\r\n[student@workstation ~]$ lab archive-manage finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 2, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 280, "fields": {"title": "TRANSFERRING FILES BETWEEN SYSTEMS SECURELY", "slug": "transferring-files-between-systems-securely", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to transfer files to or from a remote system\r\nsecurely using SSH.\r\n\r\n##TRANSFERRING FILES USING SECURE COPY<br>\r\nOpenSSH is useful for securely running shell commands on remote systems. The Secure Copy\r\ncommand, scp, which is part of the OpenSSH suite, copies files from a remote system to the\r\nlocal system or from the local system to a remote system. The command uses the SSH server for\r\nauthentication and encrypts data when it is being transferred.\r\n\r\nYou can specify a remote location for the source or destination of the files you are copying. The\r\nformat of the remote location should be in the form [user@]host:/path. The user@ portion\r\nof the argument is optional. If it is missing, your current local username will be used. When you run\r\nthe command, your scp client will authenticate to the remote SSH server just like ssh, using key-\r\nbased authentication or prompting you for your password.\r\n\r\nThe following example demonstrates how to copy the local /etc/yum.conf and /etc/hosts\r\nfiles on host, to the remoteuser's home directory on the remotehost remote system:\r\n\r\n```\r\n[user@host ~]$ scp /etc/yum.conf /etc/hosts remoteuser@remotehost:/home/remoteuser\r\nremoteuser@remotehost's password: password\r\nyum.conf                100%    813     0.08KB/s   00:00\r\nhosts                   100%    227     0.02KB/s   00:00\r\n\r\n```\r\n\r\n\r\nYou can also copy a file in the other direction, from a remote system to the local file system. In this\r\nexample, the file /etc/hostname on remotehost is copyed to the local directory /home/user.\r\nThe scp command authenticates to remotehost as the user remoteuser.\r\n\r\n```\r\n[user@host ~]$ scp remoteuser@remotehost:/etc/hostname /home/user\r\nremoteuser@remotehost's password: password\r\nhostname                100%   22       0.0.KB/s   00:00\r\n\r\n```\r\n\r\nTo copy a whole directory tree recursively, use the -r option. In the following example, the remote\r\ndirectory /var/log on remotehost is copied recursively to the local directory /tmp/ on host.\r\nYou must connect to the remote system as root to make sure you can read all files in the remote\r\n/var/log directory.\r\n\r\n```\r\n[user@host ~]$ scp -r root@remoteuser:/var/log /tmp\r\nroot@remotehost's password: password\r\n...output omitted...\r\n```\r\n\r\n##TRANSFERRING FILES USING THE SECURE FILE TRANSFER PROGRAM<br>\r\nTo interactively upload or download files from a SSH server, use the Secure File Transfer Program,\r\nsftp. A session with the sftp command uses the secure authentication mechanism and\r\nencrypted data transfer to and from the SSH server.\r\n\r\nJust like the scp command, the sftp command uses [user@]host to identify the target system\r\nand user name. If you do not specify a user, the command will attempt to log in using your local\r\nuser name as the remote user name. You will then be presented with an sftp> prompt.\r\n\r\n```\r\n[user@host ~]$ sftp remoteuser@remotehost\r\nremoteuser@remotehost's password: password\r\nConnected to remotehost.\r\nsftp>\r\n```\r\n\r\nThe interactive sftp session accepts various commands that work the same way on the remote\r\nfile system as they do in the local file system, such as ls, cd, mkdir, rmdir, and pwd. The put\r\ncommand uploads a file to the remote system. The get command downloads a file from the\r\nremote system. The exit command exits the sftp session.\r\n\r\n\r\nTo upload the /etc/hosts file on the local system to the newly created directory /home/\r\nremoteuser/hostbackup on remotehost. The sftp session always assumes that the put\r\ncommand is followed by a file on the local file system and starts in the connecting user's home\r\ndirectory; in this case, /home/remoteuser:\r\n\r\n```\r\nsftp> mkdir hostbackup\r\nsftp> cd hostbackup\r\nsftp> put /etc/hosts\r\nUploading /etc/hosts to /home/remoteuser/hostbackup/hosts\r\n/etc/hosts                                 100%   227   0.2KB/s  00:00\r\nsftp>\r\n```\r\n\r\nTo download /etc/yum.conf from the remote host to the current directory on the local system,\r\nexecute the command get /etc/yum.conf and exit the sftp session with the exit command.\r\n\r\n```\r\nsftp> get /etc/yum.conf\r\nFetching /etc/yum.conf to yum.conf\r\n/etc/yum.conf                            100%  813  0.8KB/s 00:00\r\nsftp> exit\r\n[user@host ~]$\r\n```", "order": 3, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 281, "fields": {"title": "GUIDED EXERCISE : TRANSFERRING FILES BETWEEN SYSTEMS SECURELY", "slug": "guided-exercise-transferring-files-between-systems-securely", "content": "", "content_md": "In this exercise, you will copy files from a remote system to a local directory using scp.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to copy files from a remote host to a directory on the local machine.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\n\r\nFrom workstation, run the lab archive-transfer start command. The command\r\nruns a start script that determines whether hosts servera and serverb are reachable on\r\nthe network. The script also ensures that the file and directory to be created in the exercise\r\ndoes not exist on servera.\r\n```\r\n[student@workstation ~]$ lab archive-transfer start\r\n```\r\n\r\n* 1.Use the ssh command to log in to servera as the student user.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Use the scp command to copy the /etc/ssh directory from serverb to the /home/\r\nstudent/serverbackup directory on servera.\r\n\r\n\r\n* 2.1.On servera, create a directory named /home/student/serverbackup.\r\n\r\n```\r\n[student@servera ~]$ mkdir ~/serverbackup\r\n```\r\n\r\n* 2.2.Use the scp command to recursively copy the /etc/ssh directory from serverb\r\nto the /home/student/serverbackup directory on servera. When prompted,\r\nenter redhat as the password. Note that only the root user can read all the\r\ncontent in the /etc/ssh directory.\r\n\r\n```\r\n[student@servera ~]$ scp -r root@serverb:/etc/ssh ~/serverbackup\r\nThe authenticity of host 'serverb (172.25.250.11)' can't be\r\n  established.\r\nECDSA key fingerprint is\r\n  SHA256:qaS0PToLrqlCO2XGklA0iY7CaP7aPKimerDoaUkv720.\r\nAre you sure you want to continue connecting (yes/no)? yes\r\n```\r\n\r\n![](/media/markdownx/5060b8b0-69c3-4dd3-a798-275207139d44.png)\r\n\r\n* 2.3.Verify that the /etc/ssh directory from serverb is copied to the /home/\r\nstudent/serverbackup directory to servera\r\n\r\n![](/media/markdownx/b6b72803-d8f8-4d79-986d-0cb201d6056a.png)\r\n\r\n* 3.Exit from servera.\r\n\r\n```\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation]$\r\n```\r\n\r\n###Finish\r\nOn workstation, run the lab archive-transfer finish script to complete this exercise.\r\n```\r\n[student@workstation ~]$ lab archive-transfer finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 282, "fields": {"title": "SYNCHRONIZING FILES BETWEEN SYSTEMS SECURELY", "slug": "synchronizing-files-between-systems-securely", "content": "", "content_md": "##OBJECTIVES<br>\r\nAfter completing this section, you should be able to efficiently and securely synchronize the\r\ncontents of a local file or directory with a copy on a remote server.\r\n\r\n##SYNCHRONIZE FILES AND DIRECTORIES WITH rsync<br>\r\nThe rsync command is another way to securely copy files from one system to another. The tool\r\nuses an algorithm that minimizes the amount of data copied by synchronizing only the changed\r\nportions of files. It differs from scp in that if two files or directories are similar between two\r\nservers, rsync copies only the differences between the file systems, while scp would still copy\r\neverything.\r\n\r\nAn advantage of rsync is that it can copy files between a local system and a remote system\r\nsecurely and efficiently. While an initial directory synchronization takes about the same time\r\nas copying it, subsequent synchronizations only require the differences to be copied over the\r\nnetwork, substantially speeding updates.\r\n\r\nAn important option of rsync is the -n option to perform a dry run. A dry run is a simulation of\r\nwhat happens when the command gets executed. The dry run shows the changes rsync would\r\nperform when the command is run normally. Perform a dry run before the actual rsync operation\r\nto ensure no important files get overwritten or deleted.\r\n\r\nTwo common options when synchronizing with rsync are the -v and -a options.\r\n\r\nThe -v or --verbose option provides more detailed output. This is useful for troubleshooting and\r\nto view live progress.\r\n\r\nThe -a or --archive option enables \"archive mode\". This enables recursive copying and turns\r\non a large number of useful options that preserve most characteristics of the files. Archive mode is\r\nthe same as specifying the following options:\r\n\r\n**Options Enabled with rsync -a (Archive Mode)**\r\n\r\n![](/media/markdownx/ed91c960-4256-4eab-8c8f-f5fa36e7242b.png)\r\n\r\nArchive mode does not preserve hard links, because this can add significant time to the\r\nsynchronization. If you want to preserve hard links too, add the -H option.\r\n\r\n* NOTE <br>\r\nIf you are using advanced permissions, you might need two additional options:\r\n\r\n* -A to preserve ACLs\r\n* -X to preserve SELinux contexts\r\n\r\nYou can use rsync to synchronize the contents of a local file or directory with a file or directory on\r\na remote machine, using either machine as the source. You can also synchronize the contents of\r\ntwo local files or directories.\r\n\r\n\r\nFor example, to synchronize contents of the /var/log directory to the /tmp directory:\r\n\r\n```\r\n[user@host ~]$ su -\r\nPassword: password\r\n[root@host ~]# rsync -av /var/log /tmp\r\nreceiving incremental file list\r\nlog/\r\nlog/README\r\nlog/boot.log\r\n...output omitted...\r\nlog/tuned/tuned.log\r\nsent 11,592,423 bytes   received 779 bytes  23,186,404.00 bytes/sec\r\ntotal size is 11,586,755 speedup is 1.00\r\n[user@host ~]$ ls /tmp\r\nlog\r\nssh-RLjDdarkKiW1\r\n```\r\n\r\nA trailing slash on the source directory synchronizes the content of that directory without newly\r\ncreating the subdirectory in the target directory. In this example, the log directory is not created in\r\nthe /tmp directory, only the content of /var/log/ is synchronized into /tmp.\r\n```\r\n[root@host ~]# rsync -av /var/log/ /tmp\r\nsending incremental file list\r\n./\r\nREADME\r\nboot.log\r\n...output omitted...\r\ntuned/tuned.log\r\nsent 11,592,389 bytes received 778 bytes   23,186,334.00 bytes/sec\r\ntotal size is 11,586,755 speedup is 1.00\r\n[root@host ~]# ls /tmp\r\nanaconda                   dnf.rpm.log-20190318  private\r\naudit                      dnf.rpm.log-20190324  qemu-ga\r\nboot.log                   dnf.rpm.log-20190331  README\r\n\r\n```\r\n\r\n* IMPORTANT<br>\r\nWhen typing the source directory in the rsync command, it is significant whether a\r\ntrailing slash is present on the directory name. It determines whether the directory\r\nor just the contents of the directory are synchronized to the target.\r\n\r\n\r\nBash Tab-completion automatically adds a trailing slash to directory names.\r\n\r\nLike the scp and sftp commands, rsync specifies remote locations using the [user@]host:/\r\npath format. The remote location can be either the source or destination system, but one of the\r\ntwo machines has to be local.\r\n\r\nTo preserve file ownership, you need to be root on the destination system. If the destination is\r\nremote, authenticate as root. If the destination is local, you must run rsync as root.\r\n\r\nIn this example, synchronize the local /var/log directory to the /tmp directory on the\r\nremotehost system:\r\n\r\n```\r\n[root@host ~]# rsync -av /var/log remotehost:/tmp\r\nroot@remotehost's password: password\r\nreceiving incremental file list\r\nlog/\r\nlog/README\r\nlog/boot.log\r\n...output omitted...\r\nsent 9,783 bytes received 290,576 bytes 85,816.86 bytes/sec\r\ntotal size is 11,585,690 speedup is 38.57\r\n```\r\n\r\nIn the same way, the /var/log remote directory on remotehost can be synchronized to the /\r\ntmp local directory on host:\r\n\r\n```\r\n[root@host ~]# rsync -av remotehost:/var/log /tmp\r\nroot@remotehost's password: password\r\nreceiving incremental file list\r\nlog/boot.log\r\nlog/dnf.librepo.log\r\nlog/dnf.log\r\n...output omitted...\r\nsent 9,783 bytes received 290,576 bytes 85,816.86 bytes/sec\r\ntotal size is 11,585,690 speedup is 38.57\r\n```", "order": 5, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 283, "fields": {"title": "GUIDED EXERCISE : SYNCHRONIZING FILES BETWEEN SYSTEMS SECURELY", "slug": "guided-exercise-synchronizing-files-between-systems-securely", "content": "", "content_md": "In this exercise, you will synchronize the contents of a local directory with a copy on a remote\r\nserver by using rsync over SSH.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be to use the rsync command to synchronize the content of a local directory\r\nwith a copy on a remote server.\r\n\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\n\r\nFrom workstation, run the lab archive-sync start command. The command runs\r\na start script that determines if the hosts, servera and serverb, are reachable on the\r\nnetwork. The script also ensures that the file and directory to be created in the exercise does\r\nnot exist on servera.\r\n```\r\n[student@workstation ~]$ lab archive-sync start\r\n```\r\n\r\n* 1.Use the ssh command to log in to servera as the student user.\r\n\r\n\r\n```\r\n[student@workstation ~]$ ssh student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n* 2.Create a directory named /home/student/serverlogs on servera. Use the rsync\r\ncommand to securely create an initial copy of the /var/log directory tree on serverb in\r\nthe /home/student/serverlogs directory on servera.\r\n\r\n* 2.1.On servera, create the target directory named /home/student/serverlogs to\r\nstore the log files synchronized from serverb.\r\n\r\n```\r\n[student@servera ~]$ mkdir ~/serverlogs\r\n```\r\n\r\n* 2.2.Use the rsync command to synchronize the /var/log directory tree on serverb\r\nto the /home/student/serverlogs directory on servera. Note that only the\r\nroot user can read all the content in the /var/log directory on serverb. All files\r\nare transferred in the initial synchronization.\r\n\r\n```\r\n[student@servera ~]$ rsync -av root@serverb:/var/log ~/serverlogs\r\nroot@serverb's password: redhat\r\nreceiving incremental file list\r\nlog/\r\nlog/README\r\nlog/boot.log\r\n...output omitted...\r\nlog/tuned/tuned.log\r\nsent 992 bytes received 13,775,064 bytes 2,119,393.23 bytes/sec\r\ntotal size is 13,768,109 speedup is 1.00\r\n```\r\n\r\n* 3.As root on serverb, execute the logger \"Log files synchronized\" command\r\nto get a new entry in the /var/log/messages log file to reflect when the last\r\nsynchronization took place.\r\n\r\n```\r\n[student@servera ~]$ ssh root@serverb 'logger \"Log files synchronized\"'\r\nPassword: redhat\r\n[student@servera ~]$\r\n```\r\n\r\n* 4.Use the rsync command to securely synchronize from the /var/log directory tree on\r\nserverb to the /home/student/serverlogs directory on servera. Note that this\r\ntime only log files that have changed are transferred.\r\n\r\n```\r\n[student@servera ~]$ rsync -av root@serverb:/var/log ~/serverlogs\r\nroot@serverb's password: redhat\r\nreceiving incremental file list\r\nlog/messages\r\nlog/secure\r\nlog/audit/audit.log\r\n\r\nsent 3,496 bytes received 27,243 bytes 8,782.57 bytes/sec\r\ntotal size is 11,502,695 speedup is 374.21\r\n```\r\n\r\n* 5.Exit from servera\r\n\r\n```\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@workstation]$\r\n```\r\n\r\n###Finish<br.\r\nOn workstation, run the lab archive-sync finish script to complete this exercise.\r\n```\r\n[student@workstation ~]$ lab archive-sync finish\r\n```\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 284, "fields": {"title": "LAB : ARCHIVING AND TRANSFERRING FILES", "slug": "lab-archiving-and-transferring-files", "content": "", "content_md": "##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will use tar, rsync, and scp to archive and back up the contents of\r\ndirectories.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\r\n* Synchronize a remote directory to a local directory.\r\n* Create an archive of the contents of a synchronized directory.\r\n* Securely copy an archive to a remote host.\r\n* Extract an archive.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab archive-review start command. The command runs\r\na start script that determines whether hosts servera and serverb are reachable on the\r\nnetwork. The script also ensures that the files and directories to be created in the lab do not\r\nexist on serverb, and workstation.\r\n\r\n```\r\n[student@workstation ~]$ lab archive-review start\r\n```\r\n\r\n\r\n* 1.On serverb, synchronize the /etc directory tree from servera to the /configsync\r\ndirectory.\r\n* 2.Use gzip compression to create an archive named configfile-backup-\r\nservera.tar.gz with the contents of the /configsync directory.\r\n* 3.Securely copy the /root/configfile-backup-servera.tar.gz archive file from\r\nserverb to the /home/student directory on workstation as the student user using\r\nstudent as the password.\r\n* 4.On workstation, extract the contents of the /home/student/configfile-backup-\r\nservera.tar.gz archive to the /tmp/savedconfig/ directory.\r\n* 5.On workstation return to the student home directory.\r\n```\r\n[student@workstation savedconfig]$ cd\r\n```\r\n\r\n###Evaluation<br>\r\nOn workstation, run the lab archive-review grade script to confirm success on this lab.\r\n```\r\n[student@workstation ~]$ lab archive-review grade\r\nFinish\r\n```\r\n\r\n\r\nOn workstation, run the lab archive-review finish script to complete this exercise.\r\n\r\n```\r\n[student@workstation ~]$ lab archive-review finish\r\n```\r\n\r\nThis concludes the lab.\r\n\r\n##SOLUTION : ARCHIVING AND TRANSFERRING FILES\r\n\r\n##PERFORMANCE CHECKLIST<br>\r\nIn this lab, you will use tar, rsync, and scp to archive and back up the contents of\r\ndirectories.\r\n\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n* Synchronize a remote directory to a local directory.\r\n* Create an archive of the contents of a synchronized directory.\r\n* Securely copy an archive to a remote host.\r\n* Extract an archive.\r\n\r\n\r\n##BEFORE YOU BEGIN\r\nLog in as the student user on workstation using student as the password.\r\n\r\n\r\nFrom workstation, run the lab archive-review start command. The command runs\r\na start script that determines whether hosts servera and serverb are reachable on the\r\nnetwork. The script also ensures that the files and directories to be created in the lab do not\r\nexist on serverb, and workstation.\r\n```\r\n[student@workstation ~]$ lab archive-review start\r\n```\r\n\r\n* 1.On serverb, synchronize the /etc directory tree from servera to the /configsync\r\ndirectory.\r\n\r\n* 1.1.Use the ssh command to log in to serverb as the student user.\r\n\r\n```\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n* 1.2.Use the su command to switch to the root user because creating the /configsync\r\ndirectory requires superuser privileges. In later steps, you will archive the files present\r\nin the /etc directory tree, which are owned by the root user this also requires\r\nsuperuser privileges.\r\n\r\n```\r\n[student@serverb ~]$ su -\r\nPassword: redhat\r\n[root@serverb ~]#\r\n```\r\n\r\n* 1.3.Create the /configsync directory to store the synchronized configuration files from\r\nservera.\r\n\r\n```\r\n[root@serverb ~]# mkdir /configsync\r\n```\r\n\r\n* 1.4.Use the rsync command to synchronize the /etc directory tree from servera to\r\nthe /configsync directory on serverb.\r\n\r\nBe aware that only the root user can read all the content in the /etc directory on\r\nservera.\r\n\r\n```\r\n[root@serverb ~]# rsync -av root@servera:/etc /configsync\r\nroot@servera's password: redhat\r\nreceiving incremental file list\r\netc/\r\netc/.pwd.lock\r\n...output omitted...\r\netc/yum/protected.d -> ../dnf/protected.d\r\netc/yum/vars -> ../dnf/vars\r\nsent 10,958 bytes received 21,665,987 bytes  3,334,914.62 bytes/sec\r\ntotal size is 21,615,767 speedup is 1.00\r\n```\r\n\r\n* 2.Use gzip compression to create an archive named configfile-backup-\r\nservera.tar.gz with the contents of the /configsync directory.\r\n\r\n* 2.1.Use the tar command with the -czf options to create a gzip compressed archive.\r\n\r\n```\r\n[root@serverb ~]# tar -czf configfile-backup-servera.tar.gz /configsync\r\ntar: Removing leading `/' from member names\r\n[root@serverb ~]#\r\n```\r\n\r\n* 2.2.Use the tar command with the -tzf options to list the contents of the\r\nconfigfile-backup-servera.tar.gz archive.\r\n\r\n```\r\n[root@serverb ~]# tar -tzf configfile-backup-servera.tar.gz\r\n...output omitted...\r\nconfigsync/etc/vimrc\r\nconfigsync/etc/wgetrc\r\nconfigsync/etc/xattr.conf\r\n```\r\n\r\n* 3. Securely copy the /root/configfile-backup-servera.tar.gz archive file from\r\nserverb to the /home/student directory on workstation as the student user using\r\nstudent as the password.\r\n\r\n```\r\nroot@serverb ~]# scp ~/configfile-backup-servera.tar.gz \\\r\nstudent@workstation:/home/student\r\n...output omitted...\r\nstudent@workstation's password: student\r\nconfigfile-backup-servera.tar.gz      100% 5110KB    64.5MB/s 00:00\r\n```\r\n\r\n\r\n* 4.On workstation, extract the contents of the /home/student/configfile-backup-\r\nservera.tar.gz archive to the /tmp/savedconfig/ directory.\r\n\r\n* 4.1.Exit from serverb.\r\n\r\n```\r\n[root@serverb ~]# exit\r\nlogout\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation]$\r\n```\r\n\r\n* 4.2.Create the /tmp/savedconfig directory, where the contents of the /home/\r\nstudent/configfile-backup-servera.tar.gz archive will be extracted.\r\n\r\n```\r\n[student@workstation ~]$ mkdir /tmp/savedconfig\r\n```\r\n\r\n* 4.3.Change to the /tmp/savedconfig directory.\r\n\r\n```\r\n[student@workstation ~]$ cd /tmp/savedconfig\r\n[student@workstation savedconfig]$\r\n```\r\n\r\n* 4.4.Use the tar command with the -tzf options to list the contents of the\r\nconfigfile-backup-servera.tar.gz archive\r\n\r\n```\r\n[student@workstation savedconfig]$ tar -tzf ~/configfile-backup-\r\nservera.tar.gz\r\n...output omitted...\r\nconfigsync/etc/vimrc\r\nconfigsync/etc/wgetrc\r\nconfigsync/etc/xattr.conf\r\n```\r\n\r\n* 4.5.Use the tar command with the -xzf options to extract the contents of the /\r\nhome/student/configfile-backup-servera.tar.gz archive to the /tmp/\r\nsavedconfig/ directory.\r\n\r\n```\r\n[student@workstation savedconfig]$ tar -xzf ~/configfile-backup-\r\nservera.tar.gz\r\n[student@workstation savedconfig]$\r\n```\r\n\r\n* 4.6.List the directory tree to verify that the directory contains files from the /etc\r\ndirectory.\r\n\r\n```\r\n[student@workstation savedconfig]$ ls -lR\r\n.:\r\ntotal 0\r\ndrwxr-xr-x. 3 student student 17 Feb 13 10:13 configsync\r\n./configsync:\r\ntotal 12\r\ndrwxr-xr-x. 95 student student 8192 Feb 13 09:41 etc\r\n./configsync/etc:\r\ntotal 1212\r\n-rw-r--r--. 1 student student   16 Jan 16 23:41 adjtime\r\n-rw-r--r--. 1 student student 1518 Sep 10 17:21 aliases\r\ndrwxr-xr-x. 2 student student  169 Feb 4 21:58 alternatives\r\n\r\n```\r\n\r\n\r\n* 5.On workstation return to the student home directory.\r\n\r\n```\r\n[student@workstation savedconfig]$ cd\r\n```\r\n\r\n###Evaluation\r\nOn workstation, run the lab archive-review grade script to confirm success on this lab.\r\n```\r\n[student@workstation ~]$ lab archive-review grade\r\n```\r\n\r\n\r\n###Finish\r\nOn workstation, run the lab archive-review finish script to complete this exercise.\r\n```\r\n[student@workstation ~]$ lab archive-review finish\r\n```", "order": 7, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 285, "fields": {"title": "SUMMARY", "slug": "summary-5", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n* The tar command creates an archive file from a set of files and directories, extracts files from\r\nthe archive, and lists the contents of an archive.\r\n* The tar command provides a set of different compression methods reduce archive size.\r\n* Besides providing a secure remote shell, the SSH service also provides the scp and sftp\r\ncommands as secure ways to transfer files from and to a remote system running the SSH server.\r\n* The rsync command securely and efficiently synchronizes files between two directories, either\r\none of which can be on a remote system.", "order": 8, "is_visible": true, "is_task": false, "module": 39, "draft": false, "files": []}}, {"model": "courses.section", "pk": 286, "fields": {"title": "REGISTERING SYSTEMS FOR RED\u00a0HAT SUPPORT", "slug": "registering-systems-for-red-hat-support", "content": "", "content_md": "# REGISTERING SYSTEMS FOR RED HAT SUPPORT\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to register a system to your Red Hat account\r\nand assign it entitlements for software updates and support services using Red Hat Subscription\r\nManagement.\r\n\r\n## RED HAT SUBSCRIPTION MANAGEMENT\r\nRed Hat Subscription Management provides tools that can be used to entitle machines to product subscriptions, allowing administrators to get updates to software packages and track information about support contracts and subscriptions used by the systems. Standard tools such as **PackageKit** and **yum** can obtain software packages and updates through a content distribution network provided by Red Hat. \r\n\r\nThere are four basic tasks performed with Red Hat Subscription Management tools:\r\n* **Register** a system to associate that system to a Red Hat account. This allows Subscription Manager to uniquely inventory the system. When no longer in use, a system may be unregistered.\r\n* **Subscribe** a system to entitle it to updates for selected Red Hat products. Subscriptions have\r\nspecific levels of support, expiration dates, and default repositories. The tools can be used to either auto-attach or select a specific entitlement. As needs change, subscriptions may be removed.\r\n* **Enable repositories** to provide software packages. Multiple repositories are enabled by\r\ndefault with each subscription, but other repositories such as updates or source code can be\r\nenabled or disabled as needed.\r\n* **Review and track** entitlements that are available or consumed. Subscription information can be viewed locally on a specific system or, for an account, in either the Red Hat Customer Portal\r\nSubscriptions page or the Subscription Asset Manager (SAM).\r\n\r\n### Registering a System\r\nThere are a number of different ways to register a system with Red Hat Customer Portal. There is a graphical interface that you can access with a GNOME application or through the Web Console\r\nservice, and there is a command-line tool. \r\n\r\nTo register a system with the GNOME application, launch **Red Hat Subscription Manager** by selecting **Activities**. Type subscription in the **Type to search**... field and click on **Red Hat Subscription Manager**. Enter the appropriate password when prompted to authenticate. This displays the following **Subscriptions** window:\r\n\r\n![](/media/markdownx/111a996b-7a21-4377-96b9-e9422177ee57.png)\r\n\r\nTo register the system, click the ***Register*** button in the ***Subscriptions*** window. This displays the following dialog:\r\n\r\n![](/media/markdownx/84090ec2-44e7-4cf4-bc72-fca1468b8c7c.png)\r\n\r\nThis dialog box registers a system with a subscription server. By default, it registers the server to Red Hat Customer Portal. Provide the ***Login*** and ***Password*** for the Red Hat Customer Portal account to which the system should be registered, and click the ***Register*** button.\r\n\r\nWhen registered, the system automatically has a ***subscription*** attached if one is available.\r\n\r\nAfter the system is registered and a subscription has been assigned, close the ***Subscriptions*** window. The system is now properly subscribed and ready to receive updates or install new software from Red Hat.\r\n\r\n## REGISTRATION FROM THE COMMAND LINE\r\n\r\n* Register a system to a Red Hat account:\r\n\r\n![](/media/markdownx/8dbd13a2-0767-4757-a894-70280d9446d8.png)\r\n* View available subscriptions:\r\n\r\n![](/media/markdownx/51c61464-6bbb-457d-ab08-a991def13ab5.png)\r\n\r\n* Auto-attach a subscription:\r\n\r\n![](/media/markdownx/33d50e1b-fb8d-4117-bfb2-7b29ed53dc3b.png)\r\n\r\n* Alternatively, attach a subscription from a specific pool from the list of available subscriptions:\r\n\r\n![](/media/markdownx/60564065-35e8-43ce-b329-778fc07c8ff9.png)\r\n\r\n* View consumed subscriptions:\r\n\r\n![](/media/markdownx/b9dba9c4-2d4d-46c5-b0c2-cc5b58870e57.png)\r\n\r\n* Unregister a system:\r\n\r\n![](/media/markdownx/b9ad5f7a-17a3-4427-ad6a-7304f3491fe4.png)\r\n\r\n> #### NOTE\r\n> **subscription-manager** can also be used in conjunction with activation keys,\r\nallowing registration and assignment of predefined subscriptions, without using\r\na username or password. This method of registration can be very useful for\r\nautomated installations and deployments. Activation keys are often issued by an on\u0002premise subscription management service, such as Subscription Asset Manager or\r\nRed Hat Satellite, and are not discussed in detail in this course.\r\n\r\n## ENTITLEMENT CERTIFICATES\r\n\r\nAn entitlement is a subscription that has been attached to a system. Digital certificates are used to store current information about entitlements on the local system. Once registered, entitlement certificates are stored in /etc/pki and its subdirectories.\r\n\r\n* /etc/pki/product contains certificates indicating which Red Hat products are installed on the system.\r\n* /etc/pki/consumer contains certificates identifying the Red Hat account to which the system is registered.\r\n* /etc/pki/entitlement contains certificates indicating which subscriptions are attached to the system.\r\n\r\nThe certificates can be inspected with the rct utility directly, but the **subscription-manager** tools provide easier ways to examine the subscriptions attached to the system.\r\n\r\n> #### REFERENCES \r\n> subscription-manager(8) and rct(8) man pages\r\n> \r\n> **Get started with Red Hat Subscription Management**\r\nhttps://access.redhat.com/site/articles/433903", "order": 1, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 287, "fields": {"title": "QUIZ: REGISTERING SYSTEMS FOR RED HAT SUPPORT", "slug": "quiz-registering-systems-for-red-hat-support", "content": "", "content_md": "## Quiz", "order": 2, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 288, "fields": {"title": "EXPLAINING AND INVESTIGATING RPM SOFTWARE PACKAGES", "slug": "explaining-and-investigating-rpm-software-packages", "content": "", "content_md": "# EXPLAINING AND INVESTIGATING RPM SOFTWARE PACKAGES\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to explain how software is provided as RPM\r\npackages, and investigate the packages installed on the system with Yum and RPM.\r\n\r\n## SOFTWARE PACKAGES AND RPM\r\n\r\nThe ***RPM Package Manager***, originally developed by Red Hat, provides a standard way to package software for distribution. Managing software in the form of RPM packages is much simpler than working with software that has simply been extracted into a file system from an archive. It lets administrators track which files were installed by the software package and which ones need to be removed if it is uninstalled, and check to ensure that supporting packages are present when it is\r\ninstalled. Information about installed packages is stored in a local RPM database on each system.\r\nAll software provided by Red Hat for Red Hat Enterprise Linux is provided as an RPM package.\r\n\r\nRPM package files names consist of four elements (plus the **.rpm** suffix): **name-version-release.architecture**:\r\n\r\n![](/media/markdownx/98c5233a-3127-40c2-9730-75b182090127.png)\r\n\r\n* NAME is one or more words describing the contents (coreutils).\r\n* VERSION is the version number of the original software (8.30).\r\n* RELEASE is the release number of the package based on that version, and is set by the packager, who might not be the original software developer (4.el8).\r\n* ARCH is the processor architecture the package was compiled to run on. noarch indicates that this package's contents are not architecture-specific (as opposed to x86_64 for 64-bit, aarch64 for 64-bit ARM, and so on).\r\n\r\nOnly the package name is required for installing packages from repositories. If multiple versions exist, the package with the higher version number is installed. If multiple releases of a single version exist, the package with the higher release number is installed.\r\n\r\nEach RPM package is a special archive made up of three components:\r\n\r\n* The files installed by the package.\r\n* Information about the package (metadata), such as the name, version, release, and arch; a summary and description of the package; whether it requires other packages to be installed;\r\nlicensing; a package change log; and other details.\r\n* Scripts that may run when this package is installed, updated, or removed, or are triggered when other packages are installed, updated, or removed.\r\n\r\nTypically, software providers digitally sign RPM packages using GPG keys (Red Hat digitally signs all packages it releases). The RPM system verifies package integrity by confirming that the package was signed by the appropriate GPG key. The RPM system refuses to install a package if the GPG signature does not match.\r\n\r\n### Updating Software with RPM Packages\r\n\r\nRed Hat generates a complete RPM package to update software. An administrator installing that\r\npackage gets only the most recent version of the package. Red Hat does not require that older\r\npackages be installed and then patched. To update software, RPM removes the older version\r\nof the package and installs the new version. Updates usually retain configuration files, but the\r\npackager of the new version defines the exact behavior.\r\n\r\nIn most cases, only one version or release of a package may be installed at a time. However, if a\r\npackage is built so that there are no conflicting file names, then multiple versions may be installed.\r\nThe most important example of this is the kernel package. Since a new kernel can only be tested\r\nby booting to that kernel, the package is specifically designed so that multiple versions may be\r\ninstalled at once. If the new kernel fails to boot, the old kernel is still available and bootable.\r\n\r\n## EXAMINING RPM PACKAGES\r\n\r\nThe **rpm** utility is a low-level tool that can get information about the contents of package files\r\nand installed packages. By default, it gets information from the local database of installed packages. However, you can use the **-p** option to specify that you want to get information about\r\na downloaded package file. You might want to do this in order to inspect the contents of the package file before installing it.\r\n\r\nThe general form of a query is:\r\n\r\n* **rpm -q [select-options] [query-options]**\r\n\r\n**RPM queries: General information about installed packages**\r\n\r\n* **rpm -qa**: List all installed packages\r\n\r\n* **rpm -qf FILENAME**: Find out what package provides FILENAME\r\n\r\n![](/media/markdownx/c5d7e7ab-7047-438b-8eeb-0ccc136df54a.png)\r\n\r\n**RPM queries: Information about specific packages**\r\n\r\n* **rpm -q**: List what version of the package is currently installed\r\n\r\n![](/media/markdownx/9998202b-f377-4c05-b7e1-2e609edecc95.png)\r\n\r\n* **rpm -qi**: Get detailed information about the package\r\n\r\n* **rpm -ql**: List the files installed by the package\r\n\r\n![](/media/markdownx/f735cae4-6763-4c6c-929d-8382c82049ad.png)\r\n\r\n* rpm -qc: List just the configuration files installed by the package\r\n\r\n![](/media/markdownx/0c2abe34-8404-4122-a3e5-61d90a835954.png)\r\n\r\n* **rpm -qd**: List just the documentation files installed by the package\r\n\r\n![](/media/markdownx/4380cf28-1418-4aab-a319-90f3424d4571.png)\r\n\r\n* **rpm -q --scripts**: List shell scripts that run before or after the package is installed or\r\nremoved\r\n\r\n![](/media/markdownx/0270829a-ea50-4964-8efb-22db40e1bf2a.png)\r\n![](/media/markdownx/c1dc27a7-4b56-41a1-953f-286d0e9e7c5e.png)\r\n\r\n* **rpm -q --changelog**: list change information for the package\r\n\r\n![](/media/markdownx/d5478d86-dcc5-490c-a9bf-f126a363bf91.png)\r\n\r\nQuerying local package files:\r\n\r\n![](/media/markdownx/64223302-be86-4c97-a798-df3ac461558b.png)\r\n\r\n## INSTALLING RPM PACKAGES\r\nThe **rpm** command can also be used to install an RPM package that you have downloaded to your\r\nlocal directory.\r\n\r\n![](/media/markdownx/c09b28ad-a034-49f3-adad-dcc17a2e8384.png)\r\n\r\nHowever, the next section of this chapter will discuss a more powerful tool for managing RPM\r\ninstallation and updates from the command line, yum.\r\n\r\n> #### WARNING\r\n> Be careful when installing packages from third parties, not just because of the software that they may install, but because the RPM package may include arbitrary scripts that run as the root user as part of the installation process.\r\n\r\n<br>\r\n\r\n> #### NOTE\r\n> You can extract files from an RPM package file without installing the package. The\r\n**rpm2cpio** utility can pass the contents of the RPM to a special archiving tool called\r\ncpio, which can extract all files or individual files.\r\n>\r\n> Pipe the output of **rpm2cpio** **PACKAGEFILE.rpm** into **cpio -id**, to extract all files stored in the RPM package. Subdirectory trees are created as needed, relative\r\nto the current working directory\r\n>\r\n> ![](/media/markdownx/6f7d72ab-dde2-4df6-be64-fc617e7e08cb.png)\r\n>\r\n> ![](/media/markdownx/39737048-b1ef-420c-9e17-f86eb1a691c9.png)\r\n\r\n## SUMMARY OF RPM QUERY COMMANDS\r\nInstalled packages can be queried directly with the rpm command. Add the -p option to query a package file before installation.\r\n\r\n![](/media/markdownx/1fc48a1b-8ab4-4cd1-9b0d-89a5ecc69e3e.png)\r\n![](/media/markdownx/619b66c5-500d-4641-84e3-d79e9556f6a5.png)\r\n\r\n> #### REFERENCES\r\n> rpm(8), rpm2cpio(8), cpio(1), and rpmkeys(8) man pages", "order": 3, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 289, "fields": {"title": "GUIDED EXERCISE: EXPLAINING AND INVESTIGATING RPM SOFTWARE PACKAGES", "slug": "guided-exercise-explaining-and-investigating-rpm-software-packages", "content": "", "content_md": "## GUIDED EXERCISE :\r\n\r\n# EXPLAINING AND INVESTIGATING RPM SOFTWARE PACKAGES\r\n\r\n>In this exercise, you will gather information about a package from a third party, extract files\r\nfrom it for inspection, and then install it on a server.\r\n> ### OUTCOMES\r\n> You should be able to install a package not provided by software repositories on a server.\r\n> ### BEFORE YOU BEGIN\r\n> Log in as the student user on workstation using student as the password.\r\n> \r\n>From workstation run the **lab software-rpm start** command. The script runs a start script that determines whether the host, servera, is reachable on the network. The script also downloads the *rhcsa-script-1.0.0-1.noarch.rpm* package in the **/home/student** directory on servera.\r\n> \r\n> ![](/media/markdownx/2adbd666-a742-4901-9e43-31681fc9336c.png)\r\n\r\n1. Use the ssh command to log in to servera as the student user.\r\n\r\n    ![](/media/markdownx/029b86ff-a0cd-429f-85fb-726fd9ea9a1d.png)\r\n\r\n2. View package information and list files in the rhcsa-script-1.0.0-1.noarch.rpm package. Also\r\nview the script that runs when the package is installed or uninstalled.\r\n\r\n    2.1. View information for the *rhcsa-script-1.0.0-1.noarch.rpm* package.\r\n\r\n    ![](/media/markdownx/db81ffb1-da0c-435d-9f42-00f4fcf3cb82.png)\r\n    ![](/media/markdownx/1dfa3629-b6f0-409b-b98d-59c779c9ebff.png)\r\n\r\n    2.2. List files in the *rhcsa-script-1.0.0-1.noarch.rpm* package\r\n\r\n    ![](/media/markdownx/6b144196-60c4-435f-8679-d02624515da4.png)\r\n\r\n    2.3. View the script that runs when the *rhcsa-script-1.0.0-1.noarch.rpm* package is installed or uninstalled.\r\n\r\n    ![](/media/markdownx/75000d8e-9260-4749-ad59-ec577911cf97.png)\r\n\r\n3. Extract the contents of the *rhcsa-script-1.0.0-1.noarch.rpm package* in the **/home/student**\r\ndirectory.\r\n\r\n    3.1. Use the **rpm2cpio** and **cpio -tv** commands to list the files in the *rhcsa-script-1.0.0-1.noarch.rpm* package.\r\n\r\n    ![](/media/markdownx/17312757-82ff-40d3-af92-5d5d94582ae8.png)\r\n\r\n    3.2.  Extract all files from the *rhcsa-script-1.0.0-1.noarch.rpm* package in the **/home/\r\nstudent** directory. Use the **rpm2cpio** and **cpio-idv** commands to extract the files and create the leading directories where needed in verbose mode.\r\n\r\n    ![](/media/markdownx/8ace21a0-cd28-4faf-8ff4-a06be41fb48a.png)\r\n\r\n    3.3. List to verify the extracted files in the **/home/student/opt** directory.\r\n\r\n    ![](/media/markdownx/9094e5e0-77de-4e56-a286-0349080d793f.png)\r\n\r\n4. Install the *rhcsa-script-1.0.0-1.noarch.rpm* package. Use the **sudo** command to gain\r\nsuperuser privileges to install the package.\r\n\r\n    4.1. Use the **sudo rpm -ivh** command to install the *rhcsa-script-1.0.0-1.noarch.rpm*\r\nRPM package.\r\n\r\n    ![](/media/markdownx/531b94df-15f7-497f-a7a8-419a3b14259e.png)\r\n\r\n    4.2. Use the rpm command to verify that the package is installed.\r\n\r\n    ![](/media/markdownx/dbfd949f-ff24-41fc-b1a5-718cbb0e89ae.png)\r\n    \r\n5. Exit from servera\r\n\r\n![](/media/markdownx/e3d851f5-2192-4063-a243-dd44088b9632.png)\r\n\r\n### Finish\r\nOn workstation, run the lab software-rpm finish script to complete this exercise. This script removes all the packages installed on servera during the exercise.\r\n\r\n![](/media/markdownx/78dbe2fd-a227-4c1d-81ed-8c2cd891f3a3.png)\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 290, "fields": {"title": "INSTALLING AND UPDATING SOFTWARE PACKAGES WITH YUM", "slug": "installing-and-updating-software-packages-with-yum", "content": "", "content_md": "# INSTALLING AND UPDATING SOFTWARE PACKAGES WITH YUM\r\n\r\n<br>\r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to find, install, and update software packages,\r\nusing the **yum** command.\r\n\r\n## MANAGING SOFTWARE PACKAGES WITH YUM\r\nThe low-level **rpm** command can be used to install packages, but it is not designed to work with\r\npackage repositories or resolve dependencies from multiple sources automatically.\r\n\r\nYum is designed to be a better system for managing RPM-based software installation and updates. The **yum** command allows you to install, update, remove, and get information about software packages and their dependencies. You can get a history of transactions performed and work with multiple Red Hat and third-party software repositories.\r\n\r\n**Finding Software with Yum**\r\n\r\n* yum help displays usage information.\r\n\r\n* yum list displays installed and available packages.\r\n\r\n![](/media/markdownx/2bf5c61f-7daf-44b0-a73d-e50c8885af2e.png)\r\n\r\n* **yum search**  *KEYWORD* lists packages by keywords found in the name and summary fields only. \r\n\r\n    To search for packages that have \"web server\" in their name, summary, and description fields, use **search all**:\r\n\r\n    ![](/media/markdownx/0d7d9599-f07e-43e9-8f8e-7360f4df0cf1.png)\r\n    ![](/media/markdownx/a1454736-a587-442f-82aa-a7d2aa48c286.png)\r\n\r\n* **yum info** *PACKAGENAME** returns detailed information about a package, including the disk space needed for installation. \r\n\r\n    To get information on the Apache HTTP Server:\r\n\r\n    ![](/media/markdownx/51d1bf57-5203-4b5f-bd77-45df1b770a5e.png)\r\n\r\n* **yum provides** *PATHNAME* displays packages that match the path name specified (which often include wildcard characters). \r\n\r\n    To find packages that provide the **/var/www/html** directory, use:\r\n \r\n    ![](/media/markdownx/eaa6c98a-34f9-4491-a013-28c384c17a9e.png)\r\n\r\n**Installing and removing software with yum**\r\n\r\n* **yum install** *PACKAGENAME* obtains and installs a software package, including any dependencies.\r\n\r\n    ![](/media/markdownx/f63d0411-24b2-4049-a415-8e42afb10a07.png)\r\n    ![](/media/markdownx/29c77b2c-0ee3-4b6c-8e2a-acfddab952cd.png)\r\n\r\n* **yum update** *PACKAGENAME* obtains and installs a newer version of the specified package, including any dependencies. Generally the process tries to preserve configuration files in place, but in some cases, they may be renamed if the packager thinks the old one will not work after the update. With no PACKAGENAME specified, it installs all relevant updates. \r\n\r\n![](/media/markdownx/432c4d2e-a04d-42d0-a770-3fb104dba251.png)\r\n\r\nSince a new kernel can only be tested by booting to that kernel, the package is specifically designed so that multiple versions may be installed at once. If the new kernel fails to boot, the old kernel is still available. Using yum update kernel will actually install the new kernel. The\r\nconfiguration files hold a list of packages to always install even if the administrator requests an\r\nupdate.\r\n\r\n> #### NOTE\r\n> Use **yum list** kernel to list all installed and available kernels. To view the currently running kernel, use the **uname** command. The -r option only shows the kernel version and release, and the -a option shows the kernel release and additional information.\r\n>\r\n>  ![](/media/markdownx/43728d13-09ea-452c-a42e-bc0efedb9a81.png)\r\n\r\n* **yum remove** *PACKAGENAME* removes an installed software package, including any supported\r\npackages.\r\n\r\n    ![](/media/markdownx/2f5bb057-708f-4de2-8b8a-dbc5197c7a05.png)\r\n\r\n> #### WARNING\r\n> The **yum remove** command removes the packages listed and *any package that requires the packages being removed* (and packages which require those packages, and so on). This can lead to unexpected removal of packages, so carefully review the list of packages to be removed.\r\n\r\n**Installing and removing groups of software with yum**\r\n\r\n* **yum** also has the concept of groups, which are collections of related software installed together\r\nfor a particular purpose. In Red Hat Enterprise Linux 8, there are two kinds of groups. Regular groups are collections of packages. Environment groups are collections of regular groups. The packages or groups provided by a group may be mandatory (they must be installed if the group is installed), default (normally installed if the group is installed), or optional (not installed when the group is installed, unless specifically requested).\r\n\r\n    Like **yum list**, the **yum group** list command shows the names of installed and available groups.\r\n\r\n    ![](/media/markdownx/9f93323c-462c-4739-8270-4d2674355953.png)\r\n    ![](/media/markdownx/c8e9053f-e747-4dfd-949f-172641ece069.png)\r\n\r\n    Some groups are normally installed through environment groups and are hidden by default. List these hidden groups with the **yum group list hidden** command.\r\n\r\n* **yum group info** displays information about a group. It includes a list of mandatory, default,\r\nand optional package names.\r\n\r\n    ![](/media/markdownx/ecb19444-c724-453e-9b73-4af9957fba56.png)\r\n\r\n* **yum group install** installs a group that installs its mandatory and default packages and the\r\npackages they depend on.\r\n\r\n    ![](/media/markdownx/ecd44d4a-11ec-409e-aa47-a15720c2762a.png)\r\n\r\n> #### IMPORTANT\r\n> The behavior of Yum groups changed starting in Red Hat Enterprise Linux 7. In RHEL 7 and later, groups are treated as objects, and are tracked by the system. If an installed group is updated, and new mandatory or default packages have been added to the group by the Yum repository, those new packages are installed upon update.\r\n>\r\n> RHEL 6 and earlier consider a group to be installed if all its mandatory packages\r\nhave been installed, or if it had no mandatory packages, or if any default or optional\r\npackages in the group are installed. Starting in RHEL 7, a group is considered to be installed only if **yum group install** was used to install it. The command **yum group mark install** *GROUPNAME* can be used to mark a group as installed, and any missing packages and their dependencies are installed upon the next update.\r\n>\r\n> Finally, RHEL 6 and earlier did not have the two-word form of the **yum group** commands. In other words, in RHEL 6 the command **yum grouplist** existed, but the equivalent RHEL 7 and RHEL 8 command yum group list did not.\r\n\r\n**Viewing transaction history**\r\n\r\n* All install and remove transactions are logged in /var/log/dnf.rpm.log\r\n\r\n    ![](/media/markdownx/1ffbacb4-5e01-4a32-b188-8e028ca94934.png)\r\n\r\n* **yum history** displays a summary of install and remove transactions.\r\n\r\n    ![](/media/markdownx/c04ef2ea-f917-4e4e-9967-cf3665309858.png)\r\n\r\n* The history undo option reverses a transaction.\r\n\r\n    ![](/media/markdownx/583324ed-ddcf-4882-ae06-dda9f880a3b4.png)\r\n\r\n## SUMMARY OF YUM COMMANDS\r\n\r\nPackages can be located, installed, updated, and removed by name or by package groups.\r\n\r\n![](/media/markdownx/b4a4a2f7-2b54-4309-8331-6d9c1ef13bfa.png)\r\n\r\n> #### REFERENCES\r\n> yum(1) and yum.conf(5) man pages\r\n> \r\n>For more information, refer to the Installing software with yum chapter in the Red Hat Enterprise Linux 8.0 Configuring basic system settings at\r\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/installing-software-with-yum_configuring-basic-system-settings", "order": 5, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 291, "fields": {"title": "GUIDED EXERCISE: INSTALLING AND UPDATING SOFTWARE PACKAGES WITH YUM", "slug": "guided-exercise-installing-and-updating-software-packages-with-yum", "content": "", "content_md": "## GUIDED EXERCISE :\r\n# INSTALLING AND UPDATING SOFTWARE PACKAGES WITH YUM\r\n\r\n> In this exercise, you will install and remove packages and package groups.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to install and remove packages with dependencies.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n> Log in as the student user on workstation using student as the password.\r\n> \r\n> From workstation run the **lab software-yum** start command. The command runs a\r\nstart script that determines if the host, servera, is reachable on the network.\r\n>\r\n> ![](/media/markdownx/781d1486-6c0d-440f-9dff-59a259f8e676.png)\r\n\r\n1. Use the ssh command to log in to servera as the student user. The systems are configured to use SSH keys for authentication, so a password is not required to log in to servera.\r\n\r\n    ![](/media/markdownx/fe7de89c-38aa-4360-8397-82f34cb11f58.png)\r\n\r\n2. Use the su - to switch to the root user at the shell prompt.\r\n\r\n    ![](/media/markdownx/1fd61f14-abfc-4608-a25f-994aadafc74a.png)\r\n\r\n3. Search for a specific package.\r\n    3.1. Attempt to run the command guile. You should find that it is not installed.\r\n\r\n    ![](/media/markdownx/a7eefa3b-a5a5-4906-9c8d-a56b2cbb23aa.png)\r\n\r\n    3.2. Use the yum search command to search for packages that have guile as part of their name or summary.\r\n\r\n    ![](/media/markdownx/25f322ab-c0d2-43e9-857f-976c825f6819.png)\r\n\r\n    3.3. Use the yum info command to find out more information about the guile package.\r\n\r\n    ![](/media/markdownx/cca34102-3bc9-4e79-aeee-a2385cd67417.png)\r\n\r\n4. Use the **yum install** command to install the guile package.\r\n\r\n    ![](/media/markdownx/06fa49d1-184f-42f2-9b44-1a3b5ee0c7a3.png)\r\n\r\n5. Remove packages.\r\n    5.1. Use the **yum remove** command to remove the **guile** package, but respond with no when prompted. How many packages would be removed?\r\n\r\n    ![](/media/markdownx/f376402e-0a9b-48a3-9b42-952d4d9d6901.png)\r\n\r\n    5.2. Use the yum remove command to remove the gc package, but respond with no\r\nwhen prompted. How many packages would be removed?\r\n\r\n    ![](/media/markdownx/f6f7f5ab-5489-4072-8cba-aef7a54d131a.png)\r\n    ![](/media/markdownx/2ae9b8c7-8c09-4e61-ba56-9cdd480b1465.png)\r\n\r\n6. Gather information about the \u0432\u0402\u045aRPM Development Tools\u0432\u0402\u045c component group and install it on servera.\r\n    6.1. Use the yum group list command to list all available component groups.\r\n\r\n    ![](/media/markdownx/fe1367bc-c17e-45f7-b490-a87519a6cd71.png)\r\n\r\n    6.2. Use the yum group info command to find out more information about the RPM\r\nDevelopment Tools component group, including a list of included packages.\r\n\r\n    ![](/media/markdownx/b002358f-8ee8-48e4-9ca1-419dd590d969.png)\r\n\r\n    6.3. Use the yum group install command to install the RPM Development Tools component group.\r\n\r\n    ![](/media/markdownx/95237614-f84e-4b72-a73e-4241949762e8.png)\r\n    ![](/media/markdownx/7f04b6d9-4667-4fb4-b982-5069a9a96ed7.png)\r\n\r\n7. Explore the history and undo options of **yum**.\r\n\r\n    7.1. Use the **yum history** command to display recent **yum** history.\r\n\r\n    ![](/media/markdownx/e6301e7d-8328-45dd-b683-84b583c9e655.png)\r\n    ![](/media/markdownx/6da4e87e-b012-4871-9d5e-631650c6a43b.png)\r\n\r\n    7.2.  Use the **yum history info** command to confirm that the last transaction is the group installation.\r\n\r\n     ![](/media/markdownx/891164d4-88cc-4325-8200-02ca1d650788.png)\r\n\r\n    7.3. Use the **yum history undo** command to remove the set of packages that were installed when the guile package was installed.\r\n\r\n    ![](/media/markdownx/971cf448-d0cd-432f-9a7b-eaa8a532b63c.png)\r\n\r\n    7.4. Log out of the servera system.\r\n\r\n    ![](/media/markdownx/d01fd712-70f5-44e6-8c1f-fc23489eb363.png)\r\n\r\n### Finish\r\nOn workstation, run the **lab software-yum finish** script to finish this exercise.\r\n\r\n![](/media/markdownx/f9969bdd-5686-41ba-8be3-106fb2b18cbe.png)\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 292, "fields": {"title": "ENABLING YUM SOFTWARE REPOSITORIES", "slug": "enabling-yum-software-repositories", "content": "", "content_md": "# ENABLING YUM SOFTWARE REPOSITORIES \r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to enable and disable use of Red Hat or third-party Yum repositories by a server.\r\n\r\n## ENABLING RED HAT SOFTWARE REPOSITORIES\r\nRegistering a system to the subscription management service automatically configures access to software repositories based on the attached subscriptions. To view all available repositories:\r\n\r\n![](/media/markdownx/ba2abbc2-040d-496d-ba29-d503b392a225.png)\r\n\r\nThe **yum-config-manager** command can be used to enable or disable repositories. To enable a repository, the command sets the enabled parameter to 1. For example, the following command enables the **rhel-8-server-debug-rpms** repository:\r\n\r\n![](/media/markdownx/d64b1bf9-8345-423c-b5ad-bec30d2dd1a0.png)\r\n\r\nNon-Red Hat sources provide software through third-party repositories, which can be accessed\r\nby the **yum** command from a website, FTP server, or the local file system. For example, Adobe\r\nprovides some of its software for Linux through a Yum repository. In a Red Hat classroom, the\r\ncontent.example.com classroom server hosts Yum repositories.\r\n\r\nTo enable support for a new third-party repository, create a file in the **/etc/yum.repos.d/**\r\ndirectory. Repository configuration files must end with a **.repo** extension. The repository\r\ndefinition contains the URL of the repository, a name, whether to use GPG to check the package\r\nsignatures, and if so, the URL pointing to the trusted GPG key.\r\n\r\n### Creating Yum Repositories\r\nCreate Yum repositories with the yum-config-manager command. The following command creates a file named **/etc/yum.repos.d/\r\ndl.fedoraproject.org_pub_epel_8_x86_64_.repo** with the output shown.\r\n\r\n> #### WARNING\r\n> EPEL 8 had not yet been released by the community project when this section was\r\nwritten. An EPEL release can lag the Red Hat Enterprise Linux release since it is\r\nnot provided by Red Hat but by a volunteer community. The below URL might not\r\nbe valid, we have used the below example to illustrate how to enable third-party\r\npackage repository.\r\n\r\n![](/media/markdownx/7be693a2-52b1-4165-ab6c-4c246608fba0.png)\r\n\r\nModify this file to provide customized values and location of a GPG key. Keys are stored in various\r\nlocations on the remote repository site, such as, http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8. Administrators should download the key to a local file rather than\r\nallowing yum to retrieve the key from an external source. For example:\r\n\r\n![](/media/markdownx/ea7217cd-8b3a-450f-bf3f-cd96cf43d424.png)\r\n\r\n### RPM Configuration Packages for Local Repositories\r\nSome repositories provide a configuration file and GPG public key as part of an RPM package\r\nthat can be downloaded and installed using the **yum localinstall** command. For example,\r\nthe volunteer project called Extra Packages for Enterprise Linux (EPEL) provides software not\r\nsupported by Red Hat but compatible with Red Hat Enterprise Linux.\r\n\r\n> #### WARNING\r\n> EPEL 8 had not yet been released by the community project when this section was written. We have written this section to reflect the expected configuration process for EPEL 8, based on the EPEL 7 process, as an example of how to enable a third-party package repository that provides its repository configuration to clients by using an RPM package.\r\n\r\nThe following command installs the Red Hat Enterprise Linux 8 EPEL repository package:\r\n\r\n![](/media/markdownx/75b37e77-ce40-4972-bddc-42d26d9369f0.png)\r\n\r\nConfiguration files often list multiple repository references in a single file. Each repository\r\nreference begins with a single-word name in square brackets.\r\n\r\n![](/media/markdownx/86c9873f-bd16-41cd-b250-f09a771b691b.png)\r\n\r\nTo define a repository, but not search it by default, insert the enabled=0 parameter. Repositories\r\ncan be enabled and disabled persistently with **yum-config-manager** command or temporarily\r\nwith **yum** command options, **--enablerepo=PATTERN and --disablerepo=PATTERN.**\r\n\r\n> #### WARNING\r\n> Install the RPM GPG key before installing signed packages. This verifies that the packages belong to a key which has been imported. Otherwise, the **yum** command fails due to a missing key. The **--nogpgcheck** option can be used to ignore missing GPG keys, but this could cause forged or insecure packages to be installed on the system, potentially compromising its security.\r\n<br>\r\n\r\n> REFERENCES\r\n> yum(1), yum.conf(5), and yum-config-manager(1) man pages\r\nFor more information, refer to the Installing software with yum chapter in the\r\nRed Hat Enterprise Linux 8.0 Configuring basic system settings at\r\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/\r\nhtml-single/configuring_basic_system_settings/installing-software-with-yum_configuring-basic-system-settings", "order": 7, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 293, "fields": {"title": "GUIDED EXERCISE: ENABLING YUM SOFTWARE REPOSITORIES", "slug": "guided-exercise-enabling-yum-software-repositories", "content": "", "content_md": "## GUIDED EXERCISE :\r\n# ENABLING YUM SOFTWARE REPOSITORIES\r\n\r\n>In this exercise, you will configure your server to get packages from a remote Yum repository, then update or install a package from that repository.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to configure a system to obtain software updates from a classroom server and update the system to use latest packages.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n>Log in as the student user on workstation using student as the password.\r\n>\r\n> From workstation run the **lab software-repo start** command. The command runs a start script that determines whether the host servera is reachable on the network. The script also ensures that the yum package is installed.\r\n>\r\n> ![](/media/markdownx/ac29562f-a81c-46d5-985f-ea9b8ce7f5e0.png)\r\n\r\n1. Use the ssh command to log in to servera as the student user.\r\n\r\n    ![](/media/markdownx/43bc7a7b-ec07-4324-9d9d-a318fe1e9ff0.png)\r\n    \r\n2. Use the su - command to switch to root at the shell prompt.\r\n\r\n    ![](/media/markdownx/154c9398-20aa-42f2-9a46-84d5fcb996e5.png)\r\n\r\n3. Configure software repositories on servera to obtain custom packages and updates from the following URL:\r\n\r\n* Custom packages provided at http://content.example.com/rhel8.0/x86_64/rhcsa-practice/rht\r\n\r\n* Updates of the custom packages provided at http://content.example.com/rhel8.0/x86_64/rhcsa-practice/errata\r\n\r\n    3.1. Use **yum-config-manager** to add the custom packages repository.\r\n\r\n    ![](/media/markdownx/1f9b84fa-7cb6-4fe7-aca2-d6b9ca1ad5f8.png)\r\n\r\n    3.2. Examine the software repository file created by the previous command in the **/etc/yum.repos.d** directory. Use the **vim** command to edit the file and add the *gpgcheck=0* parameter to disable the GPG key check for the repository.\r\n\r\n    ![](/media/markdownx/e54b611a-3049-43a9-86d0-70bf099de758.png)\r\n\r\n    3.3.  Create the /etc/yum.repos.d/errata.repo file to enable the updates repository with the following content:\r\n\r\n    ![](/media/markdownx/77e158f4-2e4b-46bc-afb5-b7bd81228faa.png)\r\n\r\n    3.4. Use the yum repolist all command to list all repositories on the system:\r\n\r\n    ![](/media/markdownx/03058f2c-ec26-4864-8ba2-7171dcd4e8f3.png)\r\n\r\n4. Disable the rht-updates software repository and install the rht-system package.\r\n\r\n    4.1. Use **yum-config-manager --disable** to disable the rht-updates repository.\r\n\r\n    ![](/media/markdownx/6c344dc6-9462-4f44-a2d0-7f8095108028.png)\r\n\r\n    4.2. List, and then install, the rht-system package:\r\n\r\n    ![](/media/markdownx/6891cb50-2858-4774-bb31-672720793e3e.png)\r\n\r\n    4.3.  Verify that the rht-system package is installed, and note the version number of the\r\npackage.\r\n\r\n    ![](/media/markdownx/d33ae352-b845-4106-b7d6-eda30c793ced.png)\r\n\r\n5. Enable the rht-updates software repository and update all relevant software packages.\r\n\r\n    5.1. Use **yum-config-manager --enable** to enable the rht-updates repository.\r\n\r\n    ![](/media/markdownx/c2863997-b557-4ee1-a059-38ed1045bfe7.png)\r\n\r\n    5.2. Use the yum update command to update all software packages on servera.\r\n\r\n    ![](/media/markdownx/d302a164-1b3f-4177-9cf9-70bc24f870b4.png)\r\n    ![](/media/markdownx/7d36c37e-7326-4731-b1e4-d56d43349448.png)\r\n\r\n    5.3. Verify that the rht-system package is upgraded, and note the version number of the package.\r\n\r\n    ![](/media/markdownx/4fc53065-af46-44cb-a87c-a6d06cc4b0f4.png)\r\n\r\n6. Exit from servera.\r\n\r\n    ![](/media/markdownx/74931962-6f55-4f76-95d4-8d1f8c4c36cb.png)\r\n\r\n### Finish\r\n\r\nOn workstation, run the lab software-repo finish script to finish this exercise. This script removes all the software repositories and packages installed on servera during the\r\nexercise.\r\n\r\n![](/media/markdownx/c12655e6-1f00-4d3b-8903-90b1fb2645cd.png)\r\n\r\nThis concludes the guided exercise.", "order": 8, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 294, "fields": {"title": "MANAGING PACKAGE MODULE STREAMS", "slug": "managing-package-module-streams", "content": "", "content_md": "# MANAGING PACKAGE MODULE STREAMS \r\n\r\n## OBJECTIVES\r\nAfter completing this section, you should be able to:\r\n* Explain how modules allow installation of specific versions of software.\r\n* How to list, enable, and switch module streams.\r\n* Install, and update packages from a module.\r\n\r\n## INTRODUCTION TO APPLICATION STREAM\r\nRed Hat Enterprise Linux 8.0 introduces the concept of Application Streams. Multiple versions of user space components shipped with the distribution are now delivered at the same time. They may be updated more frequently than the core operating system packages. This provides you with greater flexibility to customize Red Hat Enterprise Linux without impacting the underlying stability of the platform or specific deployments.\r\n\r\nTraditionally, managing alternate versions of an application's software package and its related packages meant maintaining different repositories for each different version. For developers who wanted the latest version of an application and administrators who wanted the most stable version of the application, this created a situation that was tedious to manage. This process is simplified in Red Hat Enterprise Linux 8 using a new technology called Modularity. Modularity allows a single repository to host multiple versions of an application's package and its dependencies. \r\n\r\nRed Hat Enterprise Linux 8 content is distributed through two main software repositories: BaseOS\r\nand Application Stream (AppStream).\r\n\r\n### BaseOS \r\nThe BaseOS repository provides the core operating system content for Red Hat Enterprise Linux as RPM packages. BaseOS components have a life cycle identical to that of content in previous Red Hat Enterprise Linux releases.\r\n\r\n### Application Stream\r\nThe Application Stream repository provides content with varying life cycles as both modules and\r\ntraditional packages. Application Stream contains necessary parts of the system, as well as a wide\r\nrange of applications previously available as a part of Red Hat Software Collections and other\r\nproducts and programs.\r\n\r\n> ### IMPORTANT\r\n> Both BaseOS and AppStream are a necessary part of a Red Hat Enterprise Linux 8\r\nsystem.\r\n\r\nThe Application Stream repository contains two types of content: Modules and traditional RPM\r\npackages. A module describes a set of RPM packages that belong together. Modules can contain several streams to make multiple versions of applications available for installation. Enabling a\r\nmodule stream gives the system access to the RPM packages within that module stream.\r\n\r\n## MODULES\r\nA module is a set of RPM packages that are a consistent set that belong together. Typically, this\r\nis organized around a specific version of a software application or programming language. A\r\ntypical module can contain packages with an application, packages with the application\u2019s specific\r\ndependency libraries, packages with documentation for the application, and packages with helper\r\nutilities.\r\n\r\n### Module Streams\r\nEach module can have one or more module streams, which hold different versions of the content. Each of the streams receives updates independently. Think of the module stream as a virtual repository in the Application Stream physical repository.\r\n\r\nFor each module, only one of its streams can be enabled and provide its packages.\r\n\r\n### Module Profiles\r\nEach module can have one or more profiles. A profile is a list of certain packages to be installed together for a particular use-case such as for a server, client, development, minimal install, or other.\r\n\r\nInstalling a particular module profile simply installs a particular set of packages from the module stream. You can subsequently install or uninstall packages normally. If you do not specify a profile, the module will install its default profile.\r\n\r\n## MANAGING MODULES USING YUM\r\nYum version 4, new in Red Hat Enterprise Linux 8, adds support for the new modular features of Application Stream.\r\n\r\nFor handling the modular content, the yum module command has been added. Otherwise, yum works with modules much like does with regular packages.\r\n\r\n### Listing Modules\r\nTo display a list of available modules, use yum module list:\r\n\r\n![](/media/markdownx/6ed0b923-96d6-40da-8ce6-fd57d75f08b4.png)\r\n\r\n> #### NOTE\r\n> Use the Hint at the end of the output to help determine which streams and profiles are enabled, disabled, installed, as well as which ones are the defaults.\r\n\r\nTo list the module streams for a specific module and retrieve their status:\r\n\r\n![](/media/markdownx/ee102eaa-a42c-459f-adca-6c646f58d130.png)\r\n\r\nTo display details of a module:\r\n\r\n![](/media/markdownx/2470da33-6b10-401e-b804-c4f8b90fb90f.png)\r\n\r\n> #### NOTE\r\n> Without specifying a module stream, yum module info shows list of packages installed by default profile of a module using the default stream. Use the module\u0002name:stream format to view a specific module stream. Add the --profile option to display information about packages installed by each of the module's profiles. For example:\r\n>\r\n> ![](/media/markdownx/149ceefe-045f-4955-a1f0-4d438087cf73.png)\r\n\r\n### Enabling Module Streams and Installing Modules\r\nModule streams must be enabled in order to install their module. To simplify this process, when a module is installed it enables its module stream if necessary. Module streams can be enabled manually using yum module enable and providing the name of the module stream.\r\n\r\n> #### IMPORTANT\r\n> Only one module stream may be enabled for a given module. Enabling an additional module stream will disable the original module stream.\r\n\r\nInstall a module using the default stream and profiles:\r\n\r\n![](/media/markdownx/837018c5-ee32-4670-bdb0-16fbd77eb00a.png)\r\n\r\n> #### NOTE\r\n> The same results could have been accomplished by running **yum install @perl**. The @ notation informs yum that the argument is a module name instead of a package name.\r\n\r\nTo verify the status of the module stream and the installed profile:\r\n\r\n![](/media/markdownx/e08f7d7b-6fe7-4883-89f4-886b667247d8.png)\r\n\r\n### Removing Modules and Disabling Module Streams\r\nRemoving a module removes all of the packages installed by profiles of the currently enabled module stream, and any further packages and modules that depend on these. Packages installed from this module stream not listed in any of its profiles remain installed on the system and can be removed manually.\r\n\r\n> #### WARNING\r\n> Removing modules and switching module streams can be a bit tricky. Switching the stream enabled for a module is equivalent to resetting the current stream and enabling the new stream. It does not automatically change any installed packages. You have to do that manually.\r\n>\r\n> Directly installing a module stream that is different than the one that is currently installed is not recommended, because upgrade scripts might run during the installation that would break things with the original module stream. That could lead to data loss or other configuration issues.\r\n>\r\n> Proceed with caution.\r\n\r\nAfter the module is removed, the module stream is still enabled. To verify the module stream is still\r\nenabled:\r\n\r\n![](/media/markdownx/0f820cda-f784-4efc-9f6d-3525fa5553fb.png)\r\n\r\nTo disable the module stream:\r\n\r\n![](/media/markdownx/90e3b36e-fc1e-4fdf-962b-65cce2788995.png)\r\n\r\n### Switching Module Streams\r\nSwitching module streams generally requires upgrading or downgrading the content to a different version.\r\n\r\nTo ensure a clean switch, you should remove the modules provided by the module stream first. That will remove all the packages installed by the profiles of the module, and any modules and packages that those packages have dependencies on.\r\n\r\nTo list the packages installed from the module, in the example below the postgresql:9.6 module is installed:\r\n\r\n![](/media/markdownx/9c8f9a81-b6bd-46ba-9798-0d78cfc37d36.png)\r\n\r\nRemove the packages listed from the previous command. Mark the module profiles to be uninstalled.\r\n\r\n![](/media/markdownx/628ab712-9df1-4c70-b485-f65d83899b88.png)\r\n\r\nAfter removing the module profiles reset the module stream. Use the **yum module reset** command to reset the module stream.\r\n\r\n![](/media/markdownx/f1de273f-23b9-4352-be05-0e86b502c2d7.png)\r\n![](/media/markdownx/4c2deb51-b809-4894-88ac-3a763cb93985.png)\r\n\r\nTo enable a different module stream and install the module:\r\n\r\n![](/media/markdownx/cd85ad1b-193d-420e-bc7a-3a72f053d119.png)\r\n\r\nThe new module stream will be enabled and the current stream disabled. It may be necessary to update or downgrade packages from the previous module stream that are not listed in the new profile. Use the **yum distro-sync to perform this task if required. There may also** be packages that remain installed from the previous module stream. Remove those using **yum remove**\r\n\r\n> #### REFERENCES\r\n> For more information, refer to the Using AppStream chapter in the Red Hat Enterprise Linux 8.0 Installing, managing, and removing user space components at https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/htm-single/installing_managing_and_removing_user_space_components/\r\n>\r\n> #### Modularity\r\n> https://docs.fedoraproject.org/en-US/modularity/", "order": 9, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 295, "fields": {"title": "GUIDED EXERCISE: MANAGING PACKAGE MODULE STREAMS", "slug": "guided-exercise-managing-package-module-streams", "content": "", "content_md": "## GUIDED EXERCISE\r\n# MANAGING PACKAGE MODULE STREAMS\r\n> In this exercise, you will list the available modules, enable a specific module stream, and\r\ninstall packages from that stream.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to:\r\n>* List installed modules and examine information of a module.\r\n> * Enable and install a module from a stream.\r\n> * Switch to a specific module stream.\r\n> * Remove and disable a module.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n> Log in as the student user on workstation using student as the password.\r\nFrom workstation run the **lab software-module start** command. The command\r\nruns a start script that determines whether the host, servera, is reachable on the network.\r\nThe script also ensures that the required software repositories are available and installs the\r\npostgresql:9.6 module.\r\n>\r\n> ![](/media/markdownx/b1cb7162-cc7d-4a82-8d7b-d95a697b6591.png)\r\n\r\n1. Use the ssh command to log in to servera as the student user.\r\n\r\n    ![](/media/markdownx/6cfcee64-bfff-4b0b-9e39-03cbc010b874.png)\r\n\r\n2. Switch to root at the shell prompt.\r\n\r\n    ![](/media/markdownx/2733c51b-6613-4f2f-bae3-723d25685d38.png)\r\n\r\n3. List available modules, streams, and installed modules. Examine the information for the python36 module.\r\n    3.1. Use the **yum module list** command to list available modules and streams.\r\n\r\n    ![](/media/markdownx/15b9072f-3913-413a-8450-12b5c6f05701.png)\r\n\r\n    3.2. Use the **yum module list --installed** command to list installed modules and\r\nstreams.\r\n \r\n    ![](/media/markdownx/15f3f03f-ba7f-4a26-86e3-475eeb7cace0.png)\r\n\r\n    3.3. Use the yum module info command to examine details of the python36 module.\r\n\r\n    ![](/media/markdownx/1d1c2e87-6af2-45a3-a01b-4d3f95873f2f.png)\r\n    \r\n4. Install the python36 module from the 3.6 stream and the common profile. Verify the current status of the module.\r\n    4.1. Use the **yum module install** command to install the python36 module. Use the name:stream/profile syntax to install the python36 module from the 3.6 stream and the common profile.\r\n\r\n    > #### NOTE\r\n    > You can omit /profile to use the default profile and :stream to use the default\r\nstream.\r\n\r\n    ![](/media/markdownx/e4904b5d-d397-4070-890c-3322ff3847b2.png)\r\n\r\n    4.2. Examine the current status of the python36 module.\r\n\r\n    ![](/media/markdownx/83b63a4b-e7c8-419d-ab10-bc10a86f48b4.png)\r\n\r\n5. Switch the postgresql module of the server profile to use the 10 stream.\r\n    5.1. Use the **yum module list** command to list the postgresql module and the stream. Notice that the postgresql:9.6 module stream is currently installed.\r\n\r\n    ![](/media/markdownx/df5cf924-4eca-4b15-9384-b14b2f55367b.png)\r\n    \r\n    5.2. Remove and disable the postgresql module stream along with all the packages\r\ninstalled by the profile.\r\n\r\n    ![](/media/markdownx/d7033818-0122-4d19-88d4-e0c144be2d68.png)\r\n\r\n    5.3. Reset the postgresql module and its streams.\r\n\r\n    ![](/media/markdownx/20f2647b-0280-4fe7-b5fc-d5b9a4f5fc34.png)\r\n    ![](/media/markdownx/db5d3936-6ebe-4cc4-af3c-110f7d047525.png)\r\n\r\n    5.4. Use the **yum module install** command to switch to the postgresql:10 module\r\nstream.\r\n\r\n    ![](/media/markdownx/026b82ce-432f-4a1f-8b23-91c22204faab.png)\r\n\r\n    5.5. Verify that the postgresql module is switched to the 10 stream.\r\n\r\n    ![](/media/markdownx/f824eac8-9c8d-421f-a79f-08a81d42331d.png)\r\n\r\n6. Remove and disable the postgresql module stream along with all the packages installed by the profile.\r\n    6.1. Use the **yum remove module** command to remove the postgresql module. The command also removes all packages installed from this module.\r\n\r\n    ![](/media/markdownx/14655c2a-6ab7-4ded-ac89-dee7c166c035.png)\r\n    \r\n    6.2. Disable the postgresql module stream.\r\n\r\n    ![](/media/markdownx/12d7cea5-b70e-4982-8dd2-0aa72a27d008.png)\r\n\r\n    6.3. Verify that the postgresql module stream is removed and disabled.\r\n\r\n    ![](/media/markdownx/c24e77cb-5fec-42ff-8a58-0389e25f7d59.png)\r\n\r\n7. Exit from servera.\r\n\r\n![](/media/markdownx/19070a94-61bc-4cbb-b785-0a8231f9535d.png)\r\n\r\n### Finish\r\nOn workstation, run the **lab software-module finish** script to finish this exercise. This script removes all the modules installed on servera during the exercise.\r\n\r\n![](/media/markdownx/9b15cf55-ee55-48c9-a1f5-7a7d1e1a3a32.png)\r\n\r\nThis concludes the guided exercise.", "order": 10, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 296, "fields": {"title": "LAB: INSTALLING AND UPDATING SOFTWARE PACKAGES", "slug": "lab-installing-and-updating-software-packages", "content": "", "content_md": "## LAB\r\n# INSTALLING AND UPDATING SOFTWARE PACKAGES\r\n\r\n> ### PERFORMANCE CHECKLIST\r\n> In this lab, you will manage software repositories and module streams, and install and upgrade packages from those repositories and streams.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> * Manage software repositories and module streams.\r\n> * Install and upgrade packages from repositories and streams.\r\n> * Install an RPM package.\r\n>\r\n>### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\n>\r\n>On workstation, run the **lab software-review start** command. This script ensures that serverb is available. It also downloads any packages required for the lab exercise.\r\n> \r\n> ![](/media/markdownx/fc8183eb-da6d-403e-9ad2-f71cd0957127.png)\r\n\r\n\r\n1. On serverb configure a software repository to obtain updates. Name the repository as errata and configure the repository in the **/etc/yum.repos.d/errata.repo** file. It should access http://content.example.com/rhel8.0/x86_64/rhcsa-practice/errata. Do not check GPG signatures.\r\n\r\n2. On serverb, install new package xsane-gimp and the Apache HTTP Server module from the 2.4 stream and the common profile.\r\n\r\n3. For security reasons, serverb should not be able to send anything to print. Achieve this by\r\nremoving the cups package. Exit from the root account.\r\n\r\n4. The start script downloads the rhcsa-script-1.0.0-1.noarch.rpm package in the **/home/student** directory on serverb. Confirm that the package rhcsa-script-1.0.0-1.noarch.rpm is available on serverb. Install the package. You will need to gain superuser privileges to install the package. Verify that the package is installed. Exit from serverb.\r\n\r\nEvaluation\r\nOn workstation, run the **lab software-review grade** script to confirm success on this lab.\r\n\r\n![](/media/markdownx/07909ded-101b-49a8-a190-b402c13dfb1a.png)\r\n\r\nFinish\r\nOn workstation, run the **lab software-review finish** script to complete this exercise.\r\nThis script removes the repository and packages created during this exercise.\r\n\r\n![](/media/markdownx/f1a6de34-e163-4ccc-b964-3ac7dce3f9ea.png)\r\n\r\nThis concludes the lab\r\n\r\n<br>\r\n\r\n## SOLUTION\r\n# INSTALLING AND UPDATING SOFTWARE PACKAGES\r\n> ### PERFORMANCE CHECKLIST\r\n> In this lab, you will manage software repositories and module streams, and install and upgrade packages from those repositories and streams.\r\n>\r\n> ### OUTCOMES\r\n> You should be able to:\r\n> * Manage software repositories and module streams.\r\n> * Install and upgrade packages from repositories and streams.\r\n> * Install an RPM package.\r\n>\r\n> ### BEFORE YOU BEGIN\r\n> Log in to workstation as student using student as the password.\r\nOn workstation, run the lab software-review start command. This script ensures\r\nthat serverb is available. It also downloads any packages required for the lab exercise.\r\n> ![](/media/markdownx/33f02eaf-d854-4cc1-911f-fa407a7ae412.png)\r\n\r\n1. On serverb configure a software repository to obtain updates. Name the repository as errata and configure the repository in the **/etc/yum.repos.d/errata.repo** file. It should access http://content.example.com/rhel8.0/x86_64/rhcsa-practice/errata. Do not check GPG signatures.\r\n\r\n    1.1. From workstation use the ssh command to log in to serverb as the student user.\r\n\r\n    ![](/media/markdownx/0b8c42a3-a73a-4c4b-8017-2968ca7de0c2.png)\r\n    \r\n    1.2. Use the su - command to switch to the root user. The password is redhat.\r\n\r\n    ![](/media/markdownx/4e3a963f-aa91-481a-af98-a7c072eafd3e.png)\r\n\r\n    1.3. Create the file **/etc/yum.repos.d/errata.repo** with the following content\r\n\r\n    ![](/media/markdownx/1e44063a-32e5-4f7e-a7f5-36122079c766.png)\r\n\r\n2. On serverb, install new package *xsane-gimp* and the Apache HTTP Server module from the 2.4 stream and the common profile.\r\n\r\n    2.1. Use the **yum list** command to list the available packages for xsane-gimp.\r\n\r\n    ![](/media/markdownx/967444d8-e151-4314-bdff-e354ffc4ff37.png)\r\n\r\n    2.2. Install the latest version of the xsane-gimp package using the **yum install** command.\r\n\r\n    ![](/media/markdownx/d8b8019a-1675-4865-9154-875114449fdc.png)\r\n\r\n    2.3. List available modules and streams. Look for the httpd module. Use the **yum install** command to install the httpd module with the 2.4 stream and the common profile.\r\n\r\n    ![](/media/markdownx/c65076ab-e1bc-4186-b3e7-c2c2386aecf5.png)\r\n\r\n3. For security reasons, serverb should not be able to send anything to print. Achieve this by\r\nremoving the cups package. Exit from the root account.\r\n    3.1. Use the **yum list** command to list the installed cups package.\r\n\r\n    ![](/media/markdownx/d6623fe9-b980-4229-9244-03a132055fec.png)\r\n\r\n    3.2. Use the **yum remove** command to remove the cups package.\r\n\r\n    ![](/media/markdownx/6a62cd2c-1e84-4cd0-9fbd-021bac76b604.png)\r\n\r\n    3.3. Exit from the root account.\r\n\r\n    ![](/media/markdownx/9e99fc9d-4dfe-4fb9-bcd5-e56646d401cb.png)\r\n\r\n4. The start script downloads the rhcsa-script-1.0.0-1.noarch.rpm package in the **/home/\r\nstudent** directory on serverb. Confirm that the package rhcsa-script-1.0.0-1.noarch.rpm is available on serverb. Install the package. You will need to gain superuser privileges to install the package. Verify that the\r\npackage is installed. Exit from serverb.\r\n    4.1. Use the rpm command to confirm that the rhcsa-script-1.0.0-1.noarch.rpm package is available on serverb by viewing the package information.\r\n\r\n    ![](/media/markdownx/4cf31605-aec5-4e87-9849-a93361626747.png)\r\n    ![](/media/markdownx/a0e7103e-6c76-43e3-9ea7-29f8c5a45bdc.png)\r\n\r\n    4.2. Use the sudo **yum localinstall** command to install the rhcsa-script-1.0.0-1.noarch.rpm package. The password is student.\r\n\r\n    ![](/media/markdownx/c448aaeb-bfb1-4c4d-8f22-34ea7881a65e.png)\r\n    ![](/media/markdownx/9e254ed9-989a-45e4-9b27-d62981af7965.png)\r\n\r\n    4.3.  Use the rpm command to verify that the package is installed.\r\n\r\n    ![](/media/markdownx/da7a7cc1-ee63-4fda-97fd-6bfb1de73e6a.png)\r\n\r\n    4.4. Exit from serverb\r\n\r\n    ![](/media/markdownx/00b2f680-a5ca-44b7-9b74-c2a9d9f3b042.png)\r\n\r\n### Evaluation\r\nOn workstation, run the **lab software-review grade** script to confirm success on this lab.\r\n\r\n![](/media/markdownx/93b9cc32-4b5d-41ea-a6ba-88175ee755c2.png)\r\n\r\n### Finish\r\nOn workstation, run the lab software-review finish script to complete this exercise.\r\n\r\nThis script removes the repository and packages created during this exercise.\r\n\r\n![](/media/markdownx/d2137546-352c-49c7-b4aa-5a2924c101af.png)", "order": 11, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 297, "fields": {"title": "SUMMARY", "slug": "summary-9", "content": "", "content_md": "# SUMMARY\r\n\r\nIn this chapter, you learned:\r\n\r\n* Red Hat Subscription Management provides tools to entitle machines to product subscriptions, get updates to software packages, and track information about support contracts and subscriptions used by the systems.\r\n* Software is provided as RPM packages, which make it easy to install, upgrade, and uninstall software from the system.\r\n* The rpm command can be used to query a local database to provide information about the contents of installed packages and install downloaded package files.\r\n* yum is a powerful command-line tool that can be used to install, update, remove, and query software packages.\r\n* Red Hat Enterprise Linux 8 uses Application Streams to provide a single repository to host multiple versions of an application's packages and its dependencies", "order": 12, "is_visible": true, "is_task": false, "module": 40, "draft": false, "files": []}}, {"model": "courses.section", "pk": 298, "fields": {"title": "IDENTIFYING FILE SYSTEMS AND DEVICES", "slug": "identifying-file-system-device", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to identify a directory in the file system hierarchy and on which device it is stored.\r\n\r\n## STORAGE MANAGEMENT CONCEPTS\r\n\r\nFiles on a Linux server are accessed through the file-system hierarchy, a single inverted tree of directories. This file system hierarchy is assembled from file systems provided by the storage devices available to your system. Each file system is a storage device that has been formatted to store files.\r\n\r\nIn a sense, the Linux file-system hierarchy presents a collection of file systems on separate storage devices as if it were one set of files on one giant storage device that you can navigate. Much of the time, you do not need to know which storage device a particular file is on, you just need to know the directory that file is in.\r\n\r\nSometimes, however, it can be important. You might need to determine how full a storage device is and what directories in the file-system hierarchy are affected. There might be errors in the logs from a storage device, and you need to know what file systems are at risk. You could just want to create a hard link between two files, and you need to know if they are on the same file system to determine if it is possible.\r\n\r\n## File Systems and Mount Points\r\n\r\nTo make the contents of a file system available in the file-system hierarchy, it must be mounted on an empty directory. This directory is called a mount point. Once mounted, if you use ls to list that directory, you will see the contents of the mounted file system, and you can access and use those files normally. Many file systems are automatically mounted as part of the boot process. \r\n\r\nIf you have only worked with Microsoft Windows drive letters, this is a fundamentally different concept. It is somewhat similar to the NTFS mounted folders feature.\r\n\r\n## File Systems, Storage, and Block Devices\r\n\r\nLow-level access to storage devices in Linux is provided by a special type of file called a block device These block devices must be formatted with a file system before they can be mounted.\r\n\r\nBlock device files are stored in the /dev directory, along with other device files. Device files are created automatically by the operating system. In Red Hat Enterprise Linux, the first SATA/PATA, SAS, SCSI, or USB hard drive detected is called /dev/sda, the second is /dev/sdb, and so on. These names represent the entire hard drive.\r\n\r\nOther types of storage will have other forms of naming.\r\n\r\n![](/media/markdownx/95631b1e-fea8-4575-83c5-f1fd06c489c5.png)\r\n\r\n> **NOTE**\r\n> \r\n> Many virtual machines use the newer virtio-scsi paravirtualized\r\n> storage that will have /dev/sd*-style naming.\r\n\r\n## Disk Partitions\r\n\r\nNormally, you do not make the entire storage device into one file system. Storage devices are typically divided up into smaller chunks called partitions.\r\n\r\nPartitions allow you to compartmentalize a disk: the various partitions can be formatted with different file systems or used for different purposes. For example, one partition can contain user home directories while another can contain system data and logs. If a user fills up the home directory partition with data, the system partition may still have space available.\r\n\r\nPartitions are block devices in their own right. On SATA-attached storage, the first partition on the first disk is /dev/sda1. The third partition on the second disk is /dev/sdb3, and so on. Paravirtualized storage devices have a similar naming system. \r\n\r\nAn NVMe-attached SSD device names its partitions differently. In that case, the first partition on the first disk is /dev/nvme0p1. The third partition on the second disk is /dev/nvme1p3, and so on. SD or MMC cards have a similar naming system. \r\n\r\nA long listing of the /dev/sda1 device file on host reveals its special file type as b, which stands for block device:\r\n\r\n    [user@host ~]$ ls -l /dev/sda1\r\n    brw-rw----. 1 root disk 8, 1 Feb 22 08:00 /dev/sda1\r\n\r\n## Logical Volumes\r\n\r\nAnother way of organizing disks and partitions is with logical volume management (LVM). With LVM, one or more block devices can be aggregated into a storage pool called a volume group. Disk space in the volume group is then parceled out to one or more logical volumes, which are the\r\nfunctional equivalent of a partition residing on a physical disk. \r\n\r\nThe LVM system assigns names to volume groups and logical volumes upon creation. LVM creates a directory in /dev that matches the group name and then creates a symbolic link within that new directory with the same name as the logical volume. That logical volume file is then available to be mounted. For example, if a volume group is called myvg and the logical volume within it is called mylv, then the full path name to the logical volume device file is /dev/myvg/mylv.\r\n\r\n> **NOTE**\r\n> \r\n> The form of logical volume device name mentioned above is actually\r\n> implemented as a symbolic link to the actual device file used to\r\n> access it, which might vary between boots. There is another form of\r\n> logical volume device name linked from files in /dev/mapper that are\r\n> often used, and are also symbolic links to the actual device file.\r\n\r\n## EXAMINING FILE SYSTEMS\r\n\r\nTo get an overview of local and remote file system devices and the amount of free space available, run the df command. When the df command is run without arguments, it reports total disk space, used disk space, free disk space, and the percentage of the total disk space used on all mounted regular file systems. It reports on both local and remote file systems. \r\n\r\nThe following example displays the file systems and mount points on host.\r\n\r\n![](/media/markdownx/198079a6-0d23-4aa3-a411-dcf7385d2768.png)\r\n\r\nThe partitioning on the host system shows two physical file systems, which are mounted on / and /boot. This is common for virtual machines. The tmpfs and devtmpfs devices are file systems in system memory. All files written into tmpfs or devtmpfs disappear after system reboot.\r\n\r\nTo improve readability of the output sizes, there are two different human-readable options: -h or -H. The difference between these two options is that -h reports in KiB (2 10 ), MiB (2 20 ), or GiB (2 30 ), while the -H option reports in SI units: KB (10 3 ), MB (10 6 ), or GB (10 9 ). Hard drive manufacturers usually use SI units when advertising their products. \r\n\r\nShow a report on the file systems on the host system with all units converted to human-readable format:\r\n\r\n![](/media/markdownx/c6f4cf3d-8600-43bf-9cba-7ed1cd6d9de0.png)\r\n\r\nFor more detailed information about space used by a certain directory tree, use the du command. The du command has -h and -H options to convert the output to human-readable format. The du command shows the size of all files in the current directory tree recursively.\r\n\r\nShow a disk usage report for the /usr/share directory on host:\r\n\r\n![](/media/markdownx/4fa1a5a2-19fe-4c0d-bc73-78d5898db1ff.png)\r\n\r\nShow a disk usage report in human-readable format for the /usr/share directory on host:\r\n\r\n![](/media/markdownx/ae7dd1fe-2787-433b-89a1-eeda57ce3171.png)\r\n\r\n> **REFERENCES**\r\n> \r\n> df(1) and du(1) man pages", "order": 1, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 299, "fields": {"title": "Quiz: IDENTIFYING FILE SYSTEMS AND DEVICES", "slug": "quiz-identifying-file-systems-devices", "content": "", "content_md": "## Quiz\r\n\r\nClick \r\n[https://course.btech.id/quiz/identifying-file-system/](https://course.btech.id/quiz/identifying-file-system/)\r\n to start working on the quiz", "order": 2, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 300, "fields": {"title": "MOUNTING AND UNMOUNTING FILE SYSTEMS", "slug": "mounting-unmounting-file-systems", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to access the contents of file systems by adding and removing file systems from the file system hierarchy.\r\n\r\n## MOUNTING FILE SYSTEMS MANUALLY\r\n\r\nA file system residing on a removable storage device needs to be mounted in order to access it. The mount command allows the root user to manually mount a file system. The first argument of the mount command specifies the file system to mount. The second argument specifies the directory to use as the mount point in the file-system hierarchy.\r\n\r\nThere are two common ways to specify the file system on a disk partition to the mount command:\r\n\r\n- With the name of the device file in /dev containing the file system.\r\n- With the UUID written to the file system, a universally-unique identifier.\r\n\r\nMounting a device is relatively simple. You need to identify the device you want to mount, make\r\nsure the mount point exists, and mount the device on the mount point.\r\n\r\n## Identifying the Block Device\r\n\r\nA hot-pluggable storage device, whether a hard disk drive (HDD) or solid-state device (SSD) in a server caddy, or a USB storage device, might be plugged into a different port each time they are attached to a system.\r\n\r\nUse the lsblk command to list the details of a specified block device or all the available devices.\r\n\r\n![](/media/markdownx/e0dd501a-770b-49a7-9da5-5daaac2aaa8f.png)\r\n\r\nIf you know that you just added a 64 GB storage device with one partition, then you can guess\r\nfrom the preceding output that /dev/vdb1 is the partition that you want to mount.\r\n\r\n## Mounting by Block Device Name\r\n\r\nThe following example mounts the file system in the /dev/vdb1 partition on the directory /mnt/data.\r\n\r\n    [root@host ~]# mount /dev/vdb1 /mnt/data\r\n\r\nTo mount a file system, the destination directory must already exist. The /mnt directory exists by default and is intended for use as a temporary mount point.\r\n\r\nYou can use /mnt directory, or better yet create a subdirectory of /mnt to use as a temporary mount point, unless you have a good reason to mount it in a specific location in the file-system hierarchy.\r\n\r\n> **IMPORTANT**\r\n> \r\n> If the directory acting as mount point is not empty, any files copied\r\n> to that directory before the file system was mounted are not\r\n> accessible until the file system is unmounted again.\r\n\r\nThis approach works fine in the short run. However, the order in which the operating system detects disks can change if devices are added to or removed from the system. This will change the device name associated with that storage device. A better approach would be to mount by some characteristic built into the file system.\r\n\r\n## Mounting by File-system UUID\r\n\r\nOne stable identifier that is associated with a file system is its UUID, a very long hexadecimal number that acts as a universally-unique identifier. This UUID is part of the file system and remains the same as long as the file system is not recreated.\r\n\r\nThe lsblk -fp command lists the full path of the device, along with the UUIDs and mount points, as well as the type of file system in the partition. If the file system is not mounted, the mount point will be blank.\r\n\r\n![](/media/markdownx/f51695b9-1eaf-4501-8cbd-fc61247b0220.png)\r\n\r\nMount the file system by the UUID of the file system.\r\n\r\n    [root@host ~]# mount UUID=\"46f543fd-78c9-4526-a857-244811be2d88\" /mnt/data\r\n\r\n## AUTOMATIC MOUNTING OF REMOVABLE STORAGE DEVICES\r\n\r\nIf you are logged in and using the graphical desktop environment, it will automatically mount any removable storage media when it is inserted.\r\n\r\nThe removable storage device is mounted at /run/media/USERNAME/LABEL where USERNAME is the name of the user logged into the graphical environment and LABEL is an identifier, often the name given to the file system when it was created if one is available.\r\n\r\nBefore removing the device, you should unmount it manually.\r\n\r\n## UNMOUNTING FILE SYSTEMS\r\n\r\nThe shutdown and reboot procedures unmount all file systems automatically. As part of this process, any file system data cached in memory is flushed to the storage device thus ensuring that the file system suffers no data corruption.\r\n\r\n> **WARNING**\r\n> \r\n> File system data is often cached in memory. Therefore, in order to\r\n> avoid corrupting data on the disk, it is essential that you unmount\r\n> removable drives before unplugging them. The unmount procedure\r\n> synchronizes data before releasing the drive, ensuring data integrity.\r\n\r\nTo unmount a file system, the umount command expects the mount point as an argument.\r\n\r\n    [root@host ~]# umount /mnt/data\r\n\r\nUnmounting is not possible if the mounted file system is in use. For the umount command to succeed, all processes needs to stop accessing data under the mount point.\r\n\r\nIn the example below, the umount fails because the file system is in use (the shell is using /mnt/data as its current working directory), generating an error message.\r\n\r\n    [root@host ~]# cd /mnt/data\r\n    [root@host data]# umount /mnt/data\r\n    umount: /mnt/data: target is busy.\r\n\r\nThe lsof command lists all open files and the process accessing them in the provided directory. It is useful to identify which processes currently prevent the file system from successful unmounting\r\n\r\n![](/media/markdownx/c62e7069-de2f-4a98-95c8-c90fdc6d3522.png)\r\n\r\nOnce the processes are identified, an action can be taken, such as waiting for the process to complete or sending a SIGTERM or SIGKILL signal to the process. In this case, it is sufficient to change the current working directory to a directory outside the mount point.\r\n\r\n    [root@host data]# cd\r\n    [root@host ~]# umount /mnt/data\r\n\r\n> **NOTE**\r\n> \r\n> A common reason for file systems to fail to unmount is that a Bash\r\n> shell is using the mount point or a subdirectory as a current working\r\n> directory. Use the cd command to change out of the file system to\r\n> resolve this problem.\r\n\r\n\r\n> **REFERENCES**\r\n> \r\n> lsblk(8), mount(8), umount(8), and lsof(8) man pages", "order": 3, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 301, "fields": {"title": "GUIDED EXERCISE: MOUNTING AND UNMOUNTING FILE SYSTEMS", "slug": "guide-exercise-mounting-unmounting-file-systems", "content": "", "content_md": "In this exercise, you will practice mounting and unmounting file systems.\r\n\r\n## OUTCOMES\r\nYou should be able to identify and mount a new file system at a specified mount point, then unmount it.\r\n\r\n## BEFORE YOU BEGIN\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab fs-mount start command. The command runs a start script that determines if the host, servera, is reachable on the network. The script also creates a partition on the second disk attached to servera.\r\n\r\n[student@workstation ~]$ lab fs-mount start\r\n\r\n 1. Use the ssh command to log in to servera as the student user.\r\n\t\r\n        [student@workstation ~]$ ssh student@servera\r\n        ...output omitted...\r\n        [student@servera ~]$\r\n\r\n 2. A new partition with a file system has been added to the second disk (/dev/vdb) on servera. Mount the newly available partition by UUID at the newly created mount point /mnt/newspace.\r\n\t2.1 Use the su - command to switch to root, as the root user can only manually mount a device.\r\n\r\n        [student@servera ~]$ su -\r\n        Password: redhat\r\n        [root@servera ~]#\r\n\r\n\t2.2 Create the /mnt/newspace directory.\r\n\r\n        [root@servera ~]# mkdir /mnt/newspace\r\n\r\n\t2.3 Use the lsblk command with the -fp option to discover the UUID of the device, /dev/vdb1.\r\n\r\n        [root@servera ~]# lsblk -fp /dev/vdb\r\n        NAME\t\tFSTYPE \t\tLABEL \t\tUUID\t\r\n        \tMOUNTPOINT\r\n        /dev/vdb\r\n        \u2514\u2500/dev/vdb1 xfs\t\t\t\t\t\ta04c511a-b805-4ec2-981f-42d190fc9a65\t\t\t\r\n\r\n\t2.4 Mount the file system by using UUID on the /mnt/newspace directory. Replace the UUID with that of the /dev/vdb1 disk from the previous command output.\r\n\r\n        [root@servera ~]# mount UUID=\"a04c511a-b805-4ec2-981f-42d190fc9a65\" /mnt/newspace\r\n\r\n\t2.5 Verify that the /dev/vdb1 device is mounted on the /mnt/newspace directory.\r\n\r\n        [root@servera ~]# lsblk -fp /dev/vdb\r\n        NAME\t\tFSTYPE \t\tLABEL \t\tUUID\r\n        \tMOUNTPOINT\r\n        /dev/vdb\r\n        \u2514\u2500/dev/vdb1 xfs\t\t\t\t\t\ta04c511a-b805-4ec2-981f-42d190fc9a65 /mnt/newspace\r\n\t\r\n 3. Change to the /mnt/newspace directory and create a new directory, /mnt/newspace/newdir, with an empty file, /mnt/newspace/newdir/newfile.\r\n\r\n\t3.1 Change to the /mnt/newspace directory.\r\n\r\n        [root@servera ~]# cd /mnt/newspace\t\r\n\r\n\t3.2 Create a new directory, /mnt/newspace/newdir.\r\n\r\n        [root@servera newspace]# mkdir newdir\r\n\r\n\t3.3 Create a new empty file, /mnt/newspace/newdir/newfile.\r\n\r\n        [root@servera newspace]# touch newdir/newfile\r\n\t\r\n 4. Unmount the file system mounted on the /mnt/newspace directory.\r\n\r\n\t4.1 Use the umount command to unmount /mnt/newspace while the current directory on the shell is still /mnt/newspace. The umount command fails to unmount the device.\r\n\r\n        [root@servera newspace]# umount /mnt/newspace\r\n        umount: /mnt/newspace: target is busy.\r\n\r\n\t4.2 Change the current directory on the shell to /root.\r\n\r\n        [root@servera newspace]# cd\r\n        [root@servera ~]#\r\n\r\n\t4.3 Now, successfully unmount /mnt/newspace.\r\n\r\n        [root@servera ~]# umount /mnt/newspace\t\r\n\r\n 5. Exit from servera.\r\n\r\n        [root@servera ~]# exit\r\n        logout\r\n        [student@servera ~]$ exit\r\n        logout\r\n        Connection to servera closed.\r\n        [student@workstation]$\r\n\r\n## Finish\r\nOn workstation, run the lab fs-mount finish script to complete this exercise.\r\n\r\n    [student@workstation ~]$ lab fs-mount finish\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 302, "fields": {"title": "LOCATING FILES ON THE SYSTEM", "slug": "locating-file-on-system", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to search for files on mounted file systems using find and locate.\r\n\r\n## SEARCHING FOR FILES\r\n\r\nA system administrator needs tools to search for files matching certain criteria on the file system. This section discusses two commands that can search for files in the file-system hierarchy. \r\n\r\n- The locate command searches a pregenerated index for file names or file paths and returns\r\nthe results instantly.\r\n- The find command searches for files in real time by crawling through the file-system hierarchy.\r\n\r\n## LOCATING FILES BY NAME\r\n\r\nThe locate command finds files based on the name or path to the file. It is fast because it looks up this information from the mlocate database. However, this database is not updated in real time, and it must be frequently updated for results to be accurate. This also means that locate will not find files that have been created since the last update of the database.\r\n\r\nThe locate database is automatically updated every day. However, at any time the root user can issue the updatedb command to force an immediate update.\r\n\r\n    [root@host ~]# updatedb\r\n\r\nThe locate command restricts results for unprivileged users. In order to see the resulting file name, the user must have search permission on the directory in which the file resides. \r\n\r\nSearch for files with passwd in the name or path in directory trees readable by user on host.\r\n\r\n    [user@host ~]$ locate passwd\r\n    /etc/passwd\r\n    /etc/passwd-\r\n    /etc/pam.d/passwd\r\n    /etc/security/opasswd\r\n    /usr/bin/gpasswd\r\n    /usr/bin/grub2-mkpasswd-pbkdf2\r\n    /usr/bin/lppasswd\r\n    /usr/bin/passwd\r\n\r\nResults are returned even when the file name or path is only a partial match to the search query.\r\n\r\n    [root@host ~]# locate image\r\n    /etc/selinux/targeted/contexts/virtual_image_context\r\n    /usr/bin/grub2-mkimage\r\n    /usr/lib/sysimage\r\n    /usr/lib/dracut/dracut.conf.d/02-generic-image.conf\r\n    /usr/lib/firewalld/services/ovirt-imageio.xml\r\n    /usr/lib/grub/i386-pc/lnxboot.image\r\n    ...output omitted...\r\n\r\nThe -i option performs a case-insensitive search. With this option, all possible combinations of upper and lowercase letters match the search.\r\n\r\n    [user@host ~]$ locate -i messages\r\n    ...output omitted...\r\n    /usr/share/vim/vim80/lang/zh_TW/LC_MESSAGES\r\n    /usr/share/vim/vim80/lang/zh_TW/LC_MESSAGES/vim.mo\r\n    /usr/share/vim/vim80/lang/zh_TW.UTF-8/LC_MESSAGES\r\n    /usr/share/vim/vim80/lang/zh_TW.UTF-8/LC_MESSAGES/vim.mo\r\n    /usr/share/vim/vim80/syntax/messages.vim\r\n    /usr/share/vim/vim80/syntax/msmessages.vim\r\n    /var/log/messages\r\n\r\nThe -n option limits the number of returned search results by the locate command. The following example limits the search results returned by locate to the first five matches:\r\n\r\n    [user@host ~]$ locate -n 5 snow.png\r\n    /usr/share/icons/HighContrast/16x16/status/weather-snow.png\r\n    /usr/share/icons/HighContrast/22x22/status/weather-snow.png\r\n    /usr/share/icons/HighContrast/24x24/status/weather-snow.png\r\n    /usr/share/icons/HighContrast/256x256/status/weather-snow.png\r\n    /usr/share/icons/HighContrast/32x32/status/weather-snow.png\r\n\r\n## SEARCHING FOR FILES IN REAL TIME\r\n\r\nThe find command locates files by performing a real-time search in the file-system hierarchy. It is slower than locate, but more accurate. It can also search for files based on criteria other than the file name, such as the permissions of the file, type of file, its size, or its modification time.\r\n\r\nThe find command looks at files in the file system using the user account that executed the search. The user invoking the find command must have read and execute permission on a directory to examine its contents.\r\n\r\nThe first argument to the find command is the directory to search. If the directory argument is omitted, find starts the search in the current directory and looks for matches in any subdirectory.\r\n\r\nTo search for files by file name, use the -name FILENAME option. With this option, find returns the path to files matching FILENAME exactly. For example, to search for files named sshd_config starting from the / directory, run the following command:\r\n\r\n    [root@host ~]# find / -name sshd_config\r\n    /etc/ssh/sshd_config\r\n\r\n> **NOTE**\r\n> \r\n> With the find command, the full word options use a single dash and\r\n> options follow the path name argument, unlike most other Linux\r\n> commands.\r\n\r\nWildcards are available to search for a file name and return all results that are a partial match. When using wildcards, it is important to quote the file name to look for to prevent the terminal from interpreting the wildcard.\r\n\r\nIn the following example, search for files starting in the / directory that end in .txt:\r\n\r\n    [root@host ~]# find / -name '*.txt'\r\n    /etc/pki/nssdb/pkcs11.txt\r\n    /etc/brltty/brl-lt-all.txt\r\n    /etc/brltty/brl-mb-all.txt\r\n    /etc/brltty/brl-md-all.txt\r\n    /etc/brltty/brl-mn-all.txt\r\n    ...output omitted...\r\n\r\nTo search for files in the /etc/ directory that contain the word, pass, anywhere in their names on host, run the following command:\r\n\r\n    [root@host ~]# find /etc -name '*pass*'\r\n    /etc/security/opasswd\r\n    /etc/pam.d/passwd\r\n    /etc/pam.d/password-auth\r\n    /etc/passwd-\r\n    /etc/passwd\r\n    /etc/authselect/password-auth\r\n\r\nTo perform a case-insensitive search for a given file name, use the -iname option, followed by the file name to search. To search files with case-insensitive text, messages, in their names in the / directory on host, run the following command:\r\n\r\n    [root@host ~]# find / -iname '*messages*'\r\n    ...output omitted...\r\n    /usr/share/vim/vim80/lang/zh_CN.UTF-8/LC_MESSAGES\r\n    /usr/share/vim/vim80/lang/zh_CN.cp936/LC_MESSAGES\r\n    /usr/share/vim/vim80/lang/zh_TW/LC_MESSAGES\r\n    /usr/share/vim/vim80/lang/zh_TW.UTF-8/LC_MESSAGES\r\n    /usr/share/vim/vim80/syntax/messages.vim\r\n    /usr/share/vim/vim80/syntax/msmessages.vim\r\n\r\n## Searching Files Based on Ownership or Permission\r\n\r\nThe find command can search for files based on their ownership or permissions. Useful options when searching by owner are -user and -group, which search by name, and -uid and -gid, which search by ID.\r\n\r\nSearch for files owned by user in the /home/user directory on host.\r\n\r\n    [user@host ~]$ find -user user\r\n    .\r\n    ./.bash_logout\r\n    ./.bash_profile\r\n    ./.bashrc\r\n    ./.bash_history\r\n\r\nSearch for files owned by the group user in the /home/user directory on host.\r\n\r\n    [user@host ~]$ find -group user\r\n    .\r\n    ./.bash_logout\r\n    ./.bash_profile\r\n    ./.bashrc\r\n    ./.bash_history\r\n\r\nSearch for files owned by user ID 1000 in the /home/user directory on host.\r\n\r\n    [user@host ~]$ find -uid 1000\r\n    .\r\n    ./.bash_logout\r\n    ./.bash_profile\r\n    ./.bashrc\r\n    ./.bash_history\r\n\r\nSearch for files owned by group ID 1000 in the /home/user directory on host.\r\n\r\n    [user@host ~]$ find -gid 1000\r\n    .\r\n    ./.bash_logout\r\n    ./.bash_profile\r\n    ./.bashrc\r\n    ./.bash_history\r\n\r\nThe -user, and -group options can be used together to search files where file owner and group owner are different. The example below list files that are both owned by user root and affiliated with group mail.\r\n\r\n    [root@host ~]# find / -user root -group mail\r\n    /var/spool/mail\r\n    ...output omitted...\r\n\r\nThe -perm option is used to look for files with a particular set of permissions. Permissions can be described as octal values, with some combination of 4, 2, and 1 for read, write, and execute. Permissions can be preceded by a / or - sign.\r\n\r\nA numeric permission preceded by / matches files that have at least one bit of user, group, or other for that permission set. A file with permissions r--r--r-- does not match /222, but one with rw-r--r-- does. A - sign before a permission means that all three instances of that bit must be on, so neither of the previous examples would match, but something like rw-rw-rw-> would.\r\n\r\nTo use a more complex example, the following command matches any file for which the user has read, write, and execute permissions, members of the group have read and write permissions, and others have read-only access:\r\n\r\n    [root@host ~]# find /home -perm 764\r\n\r\nTo match files for which the user has at least write and execute permissions, and the group has at least write permissions, and others have at least read access:\r\n\r\n    [root@host ~]# find /home -perm -324\r\n\r\nTo match files for which the user has read permissions, or the group has at least read permissions,\r\nor others have at least write access:\r\n\r\n    [root@host ~]# find /home -perm /442\r\n\r\nWhen used with / or -, a value of 0 works like a wildcard, since it means a permission of at least nothing.\r\n\r\nTo match any file in the /home/user directory for which others have at least read access on host, run:\r\n\r\n    [user@host ~]$ find -perm -004\r\n\r\nFind all files in the /home/user directory where other has write permissions on host.\r\n\r\n    [user@host ~]$ find -perm -002\r\n\r\n## Searching Files Based on Size\r\n\r\nThe find command can look up files that match a size specified with the -size option, followed by a numerical value and the unit. Use the following list as the units with the -size option:\r\n\r\n- k, for kilobyte\r\n- M, for megabyte\r\n- G, for gigabyte\r\n\r\nThe example below shows how to search for files with a size of 10 megabytes, rounded up.\r\n\r\n    [user@host ~]$ find -size 10M\r\n\r\nTo search the files with a size more than 10 gigabytes.\r\n\r\n    [user@host ~]$ find -size +10G\r\n\r\nTo list all files with a size less than 10 kilobytes.\r\n\r\n    [user@host ~]$ find -size -10k\r\n\r\n> **IMPORTANT**\r\n> \r\n> The -size option unit modifiers round everything up to single units.\r\n> For example, the find -size 1M command shows files smaller than 1 MB\r\n> because it rounds all files up to 1 MB.\r\n\r\n## Searching Files Based on Modification Time\r\n\r\nThe -mmin option, followed by the time in minutes, searches for all files that had their content changed at n minutes ago in the past. The file's timestamp is always rounded down. It also supports fractional values when used with ranges (+n and -n).\r\n\r\nTo find all files that had their file content changed 120 minutes ago on host, run:\r\n\r\n    [root@host ~]# find / -mmin 120\r\n\r\nThe + modifier in front of the amount of minutes looks for all files in the / that have been modified more than n minutes ago. In this example, files that were modified more than 200 minutes ago are listed.\r\n\r\n    [root@host ~]# find / -mmin +200\r\n\r\nThe - modifier changes the search to look for all files in the / directory which have been changed less than n minutes ago. In this example, files that were modified less than 150 minutes ago are listed.\r\n\r\n    [root@host ~]# find / -mmin -150\r\n\r\n## Searching Files Based on File Type\r\n\r\nThe -type option in the find command limits the search scope to a given file type. Use the following list to pass the required flags to limit the scope of search:\r\n\r\n- f, for regular file\r\n- d, for directory\r\n- l, for soft link\r\n- b, for block device\r\n\r\nSearch for all directories in the /etc directory on host.\r\n\r\n    [root@host ~]# find /etc -type d\r\n    /etc\r\n    /etc/tmpfiles.d\r\n    /etc/systemd\r\n    /etc/systemd/system\r\n    /etc/systemd/system/getty.target.wants\r\n    ...output omitted...\r\n\r\nSearch for all soft links on host.\r\n\r\n    [root@host ~]# find / -type l\r\n\r\nGenerate a list of all block devices in the /dev directory on host:\r\n\r\n    [root@host ~]# find /dev -type b\r\n    /dev/vda1\r\n    /dev/vda\r\n\r\nThe -links option followed by a number looks for all files that have a certain hard link count. The number can be preceded by a + modifier to look for files with a count higher than the given hard link count. If the number is preceded with a - modifier, the search is limited to all files with a hard link count that is less than the given number.\r\n\r\nSearch for all regular files with more than one hard link on host:\r\n\r\n    [root@host ~]# find / -type f -links +1\r\n\r\n> **REFERENCES**\r\n> \r\n> locate(1), updatedb(8), and find(1) man pages", "order": 5, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 303, "fields": {"title": "GUIDED EXERCISE: LOCATING FILES ON THE SYSTEM", "slug": "guide-exercise-locating-files-on-the-system", "content": "", "content_md": "In this exercise, you will find specific files on mounted file systems by using the find and locate commands.\r\n\r\n** OUTCOMES\r\n\r\nYou should be able search files using the find and locate commands.\r\n\r\n** BEFORE YOU BEGIN\r\n\r\nLog in as the student user on workstation using student as the password. From workstation, run the lab fs-locate start command. The command runs a start script that determines whether the host, servera, is reachable on the network.\r\n\r\n    [student@workstation ~]$ lab fs-locate start\r\n\r\n 1. Use the ssh command to log in to servera as the student user.\r\n\r\n        [student@workstation ~]$ ssh student@servera\r\n        ...output omitted...\r\n        [student@servera ~]$\r\n\r\n 2. Use the locate command to search files on servera.\r\n\r\n\t2.1 Even though the locate database is updated automatically every day, make sure that the database is up-to-date by manually starting an update on servera. Use the sudo updatedb command to update the database used by the locate command.\r\n\r\n        [student@servera ~]$ sudo updatedb\r\n        [sudo] password for student: student\r\n        [student@servera ~]$\r\n\r\n\t2.2 Locate the logrotate.conf configuration file.\r\n\r\n        [student@servera ~]$ locate logrotate.conf\r\n        /etc/logrotate.conf\r\n        /usr/share/man/man5/logrotate.conf.5.gz\r\n\r\n\t2.3 Locate the networkmanager.conf configuration file, ignoring case.\r\n\r\n        [student@servera ~]$ locate -i networkmanager.conf\r\n        /etc/NetworkManager/NetworkManager.conf\r\n        /etc/dbus-1/system.d/org.freedesktop.NetworkManager.conf\r\n        /usr/share/man/man5/NetworkManager.conf.5.gz\r\n\r\n 3. Use the find command to perform real-time searches on servera according to the following requirements:\r\n\t- Search all files in the /var/lib directory that are owned by the chrony user.\r\n\t- List all files in the /var directory that are owned by root and the group owner is mail.\r\n\t- List all files in the /usr/bin directory that has a file size greater than 50 KB.\r\n\t- Search all files in the /home/student directory that have not been changed in the last 120 minutes.\r\n\t- List all the block device files in the /dev directory.\r\n\r\n\t3.1 Use the find command to search all files in the /var/lib directory those are owned by the chrony user. Use the sudo command as the files inside the /var/lib directory are owned by root.\r\n\r\n        [student@servera ~]$ sudo find /var/lib -user chrony\r\n        [sudo] password for student: student\r\n        /var/lib/chrony\r\n        /var/lib/chrony/drift\r\n\r\n\t3.2 List all files in the /var directory that are owned by root and are affiliated with the mail group.\r\n\r\n        [student@servera ~]$ sudo find /var -user root -group mail\r\n        /var/spool/mail\r\n\r\n\t3.3 List all files in the /usr/bin directory with a file size greater than 50 KB.\r\n\r\n        [student@servera ~]$ find /usr/bin -size +50k\r\n        /usr/bin/iconv\r\n        /usr/bin/locale\r\n        /usr/bin/localedef\r\n        /usr/bin/cmp\r\n        ...output omitted...\r\n\r\n\t3.4 Find all files in the /home/student directory that have not been changed in the last 120 minutes.\r\n\r\n        [student@servera ~]$ find /home/student -mmin +120\r\n        /home/student/.bash_logout\r\n        /home/student/.bash_profile\r\n        /home/student/.bashrc\r\n        ...output omitted...\r\n\r\n\t3.5 List all block device files in the /dev directory.\r\n\r\n        [student@servera ~]$ find /dev -type b\r\n        /dev/vdb\r\n        /dev/vda3\r\n        /dev/vda2\r\n        /dev/vda1\r\n        /dev/vda\r\n\r\n 4. Exit from servera.\r\n\r\n        [student@servera ~]$ exit\r\n        logout\r\n        Connection to servera closed.\r\n        [student@workstation]$\r\n\r\n## Finish\r\n\r\nOn workstation, run the lab fs-locate finish script to complete this exercise.\r\n\r\n    [student@workstation ~]$ lab fs-locate finish\r\n\r\nThis concludes the guided exercise.", "order": 6, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 304, "fields": {"title": "LAB: ACCESSING LINUX FILE SYSTEMS", "slug": "lab-accessing-linux-file-system", "content": "", "content_md": "## PERFORMANCE CHECKLIST\r\n\r\nIn this lab, you will mount a local file system and locate specific files on that file system.\r\n\r\n## OUTCOMES\r\n\r\nYou should be able to:\r\n\r\n- Mount a file system.\r\n- Generate a disk usage report.\r\n- Search files in the local file system.\r\n\r\n## BEFORE YOU BEGIN\r\n\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab fs-review start command. The command runs a start script that determines if the host, serverb, is reachable on the network. The script also creates a partition on the second disk attached to serverb.\r\n\r\n    [student@workstation ~]$ lab fs-review start\r\n\r\n\r\n1. On serverb as root, identify the UUID for /dev/vdb1 and mount /dev/vdb1 by its UUID on the /mnt/freespace directory.\r\n\r\n2. Generate a disk usage report of the /usr/share directory, and save the result in the /mnt/freespace/results.txt file.\r\n\r\n3. Use the locate command to find all rsyslog.conf configuration files and store the result in the /mnt/freespace/search1.txt file.\r\n\r\n4. Store the search result of all files in the /usr/share directory that is greater than 50 MB and less than 100 MB in the /mnt/freespace/search2.txt file.\r\n\r\n5. Exit from serverb.\r\n\r\n## Evaluation\r\n\r\nOn workstation, run the lab fs-review grade script to confirm success on this lab.\r\n\r\n    [student@workstation ~]$ lab fs-review grade\r\n\r\n## Finish\r\n\r\nOn workstation, run the lab fs-review finish script to complete this exercise.\r\n\r\n    [student@workstation ~]$ lab fs-review finish\r\n\r\nThis concludes the lab.\r\n\r\n\r\n\r\n# SOLUTION: ACCESSING LINUX FILE SYSTEMS\r\n\r\n## PERFORMANCE CHECKLIST\r\n\r\nIn this lab, you will mount a local file system and locate specific files on that file system.\r\n\r\n##OUTCOMES\r\n\r\nYou should be able to:\r\n\r\n- Mount a file system.\r\n- Generate a disk usage report.\r\n- Search files in the local file system.\r\n\r\n## BEFORE YOU BEGIN\r\n\r\nLog in as the student user on workstation using student as the password.\r\n\r\nFrom workstation, run the lab fs-review start command. The command runs a start script that determines if the host, serverb, is reachable on the network. The script also creates a partition on the second disk attached to serverb.\r\n\r\n    [student@workstation ~]$ lab fs-review start\r\n\r\n 1. On serverb as root, identify the UUID for /dev/vdb1 and mount /dev/vdb1 by its UUID on the /mnt/freespace directory.\r\n\r\n\t1.1 Use the ssh command to log in to serverb as the student user.\r\n\r\n        [student@workstation ~]$ ssh student@serverb\r\n        ...output omitted...\r\n        [student@serverb ~]$\r\n\r\n\t1.2 Use the su - command to switch to root.\r\n\r\n        [student@serverb ~]$ su -\r\n        Password: redhat\r\n        [root@serverb ~]#\r\n\r\n\t1.3 Use the lsblk command to determine the UUID of the /dev/vdb1 device.\r\n\r\n        [root@serverb ~]# lsblk -fp /dev/vdb\r\n        NAME\t\tFSTYPE \t\tLABEL \t\tUUID\r\n        \tMOUNTPOINT\r\n        /dev/vdb\r\n        \u2514\u2500/dev/vdb1 xfs\t\t\t\t\t\ta04c511a-b805-4ec2-981f-42d190fc9a65\r\n\r\n\t1.4 Create the /mnt/freespace directory.\r\n\r\n        [root@serverb ~]# mkdir /mnt/freespace\r\n\r\n\t1.5 Mount the /dev/vdb1 device by using the UUID on the /mnt/freespace directory.\r\n\r\n        [root@serverb ~]# mount UUID=\"a04c511a-b805-4ec2-981f-42d190fc9a65\" /mnt/freespace\r\n\r\n\t1.6 Verify that the /dev/vdb1 device is mounted on the /mnt/freespace directory.\r\n\r\n        [root@serverb ~]# lsblk -fp /dev/vdb1\r\n        NAME\t\tFSTYPE \t\tLABEL \t\tUUID\r\n        \tMOUNTPOINT\r\n        /dev/vdb\r\n        \u2514\u2500/dev/vdb1 xfs\t\t\t\t\t\ta04c511a-b805-4ec2-981f-42d190fc9a65 /mnt/freespace\r\n\t\r\n 2. Generate a disk usage report of the /usr/share directory, and save the result in the /mnt/freespace/results.txt file.\r\n\r\n        [root@serverb ~]# du /usr/share > /mnt/freespace/results.txt\r\n\r\n 3. Use the locate command to find all rsyslog.conf configuration files and store the result in the /mnt/freespace/search1.txt file.\r\n\r\n\t3.1 Use the updatedb command to update the database used by locate.\r\n\r\n        [root@serverb ~]# updatedb\r\n\r\n\t3.2 Locate rsyslog.conf configuration files and save the result in the /mnt/freespace/search1.txt file.\r\n\r\n\t        [root@serverb ~]# locate rsyslog.conf > /mnt/freespace/search1.txt\r\n\r\n 4. Store the search result of all files in the /usr/share directory that is greater than 50 MB and less than 100 MB in the /mnt/freespace/search2.txt file.\r\n\r\n        [root@serverb ~]# find /usr/share -size +50M -size 100M > \\\r\n        /mnt/freespace/search2.txt\r\n\r\n 5. Exit from serverb.\r\n\r\n        [root@serverb ~]$ exit\r\n        logout\r\n        [student@serverb ~]$ exit\r\n        logout\r\n        Connection to serverb closed.\r\n        [student@workstation]$        \r\n        \r\n        \r\n## Evaluation\r\n\r\nOn workstation, run the lab fs-review grade script to confirm success on this lab.\r\n\r\n    [student@workstation ~]$ lab fs-review grade\r\n\r\n## Finish\r\n\r\nOn workstation, run the lab fs-review finish script to complete this exercise.\r\n\r\n    [student@workstation ~]$ lab fs-review finish\r\n\r\nThis concludes the lab.", "order": 7, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 305, "fields": {"title": "SUMMARY", "slug": "summary-chapter15", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n- Storage devices are represented by a special file type called block device.\r\n- The df command reports total disk space, used disk space, and free disk space on all mounted regular file systems.\r\n- The mount command allows the root user to manually mount a file system.\r\n- All processes need to stop accessing the mount point in order to successfully unmount the device.\r\n- The removable storage devices are mounted in the /run/media directory when using the graphical environment.\r\n- The find command performs a real-time search in the local file systems to find files based on search criteria.", "order": 8, "is_visible": true, "is_task": false, "module": 41, "draft": false, "files": []}}, {"model": "courses.section", "pk": 306, "fields": {"title": "ANALYZING AND MANAGING REMOTE SERVERS", "slug": "analyzing-managing-remote-servers", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to activate the Web Console management interface to remotely manage and monitor the performance of a Red Hat Enterprise Linux server.\r\n\r\n## DESCRIBING THE WEB CONSOLE\r\n\r\nWeb Console is a web-based management interface for Red Hat Enterprise Linux 8 designed for managing and monitoring your servers. It is based on the open source Cockpit service. \r\n\r\nYou can use Web Console to monitor system logs and view graphs of system performance. Additionally, you can use your web browser to change settings using graphical tools in the Web Console interface, including a fully-functional interactive terminal session.\r\n\r\n## ENABLING THE WEB CONSOLE\r\n\r\nRed Hat Enterprise Linux 8 installs Web Console by default in all installation variants except a minimal installation. Use the following command to install Web Console:\r\n\r\n    [user@host ~]$ sudo yum install cockpit\r\n\r\nEnable and start the cockpit.socket service, which runs a web server. This step is necessary if you need to connect to the system through the web interface.\r\n\r\n    [user@host ~]$ sudo systemctl enable --now cockpit.socket\r\n    Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket -> /usr/\r\n    lib/systemd/system/cockpit.socket.\r\n\r\nIf you are using a custom firewall profile, you need to add the cockpit service to firewalld to open port 9090 in the firewall:\r\n\r\n    [user@host ~]$ sudo firewall-cmd --add-service=cockpit --permanent\r\n    success\r\n    [user@host ~]$ sudo firewall-cmd --reload\r\n    success\r\n\r\n## LOGGING IN TO THE WEB CONSOLE\r\n\r\nWeb Console provides its own web server. Launch Firefox to log in to Web Console. You can log in with the user name and password of any local account on the system, including the root user. \r\n\r\nOpen https://servername:9090 in your web browser, where servername is the host name or IP address of your server. The connection will be protected by a TLS session. The system is installed with a self-signed TLS certificate by default, and when you initially connect your web browser will probably display a security warning. The cockpit-ws(8) man page provides instructions on how to replace the TLS certificate with one that is properly signed.\r\n\r\nEnter your user name and password at the login screen.\r\n\r\n![](/media/markdownx/333c734a-d530-4c42-9a0d-a3d83da57cb6.png)\r\n\r\nOptionally, click the Reuse my password for privileged tasks option. This permits you to execute commands with sudo privileges, allowing you to perform tasks such as modifying system information or configuring new accounts.\r\n\r\nClick Log In.\r\n\r\nWeb Console displays the user name on the right side of the title bar. If you choose the Reuse my password for privileged tasks option, the Privileged icon displays to the left of the user name.\r\n\r\n![](/media/markdownx/b5a978e3-cada-415d-ab20-ee66b9be7d4c.png)\r\n\r\nIf you are logged in as a non-privileged user, the Privileged icon is not displayed.\r\n\r\n![](/media/markdownx/0a5ac66a-db88-4f7f-bcbd-3dc8e44fd77f.png)\r\n\r\n## CHANGING PASSWORDS\r\n\r\nPrivileged and non-privileged users can change their own passwords while logged in to Web Console. Click Accounts in the left navigation bar. Click your account label to open the account details page.\r\n\r\n![](/media/markdownx/1753346c-2817-4617-bfd5-8736b1724644.png)\r\n\r\nAs a non-privileged user, you are restricted to setting or resetting your password and managing public SSH keys. To set or reset your password, click Set Password.\r\n\r\n![](/media/markdownx/5a57f14c-7095-4855-be84-a1332ebe52ab.png)\r\n\r\nEnter your information in the Old Password, New Password, and Confirm New Password fields. Click Set to activate the new password.\r\n\r\n![](/media/markdownx/db9e8da0-9919-4fa0-95a7-9854b62c9b51.png)\r\n\r\n## TROUBLESHOOTING WITH THE WEB CONSOLE\r\n\r\nWeb Console is a powerful troubleshooting tool. You can monitor basic system statistics in real time, inspect system logs, and quickly switch to a terminal session within Web Console to gather additional information from the command-line interface.\r\n\r\n## Monitoring System Statistics in Real Time\r\n \r\nClick System in the left navigation bar to view information about the system, such as its type of hardware, operating system, host name, and more. Notice that if you are logged in as a non-privileged user, you see all the information but you are not permitted to modify values. The following image displays the top part of the System menu option page.\r\n\r\n![](/media/markdownx/5ae7fbb6-e5d1-4c6e-ae82-cecd7abf88db.png)\r\n\r\nScroll down in the System information page to view graphs of current system performance for CPU activity, memory use, disk I/O, and network utilization.\r\n\r\n![](/media/markdownx/5d1adebb-70de-46a3-b226-b94fa2114c18.png)\r\n\r\n## Inspecting and Filtering Syslog Events\r\n\r\nLogs in the left navigation bar provides access to analysis tools for the system logs. You can use the menus on the page to filter log messages based on a logging date range, severity level, or both. Web Console uses the current date as the default, but you can click the date menu and specify any range of dates. Similarly, the Severity menu provides options ranging from Everything to more specific severity conditions such as Alert and above, Debug and above, and so on.\r\n\r\n![](/media/markdownx/681d4449-3ff0-4b79-97f2-44ace902ad9a.png)\r\n\r\nClick a row to view details of the log report. In the example below, note the first row that reports on a sudo log message.\r\n\r\n![](/media/markdownx/37a9f077-77ef-4487-a2fe-4714b1280ab8.png)\r\n\r\nThe example below shows the details displayed when you click the sudo row. Details of the report include the selected log entry (sudo), the date, time, priority, and syslog facility of the log entry, the host name of the system that reported the log message, and more.\r\n\r\n![](/media/markdownx/86ef3d92-7f70-4089-8de3-e07a69905ce9.png)\r\n\r\n## Running Commands from a Terminal Session\r\n\r\nTerminal in the left navigation bar provides access to a fully-functional terminal session within the Web Console interface. This allows you to run arbitrary commands to manage and work with the system and to perform tasks not supported by the other tools provided by Web Console.\r\n\r\nThe following image displays examples of common commands used to gather additional information. Listing the contents of the /var/log directory provides reminders of log files that may have valuable information. The id command provides quick information such as group membership that may help troubleshoot file access restrictions. The ps au command provides a quick view of processes running in the terminal and the user associated with the process.\r\n\r\n![](/media/markdownx/05f8fe4f-a05d-4bce-8209-6d557e6fad1f.png)\r\n\r\n## Creating Diagnostic Reports\r\nA diagnostic report is a collection of configuration details, system information, and diagnostic information from a Red Hat Enterprise Linux system. Data collected in the completed report includes system logs and debug information that can be used to troubleshoot issues.\r\n\r\nLog in to Web Console as a privileged user. Click Diagnostic Reports in the left navigation bar to open the page that creates these reports. Click Create Report to generate a new diagnostic report.\r\n\r\n![](/media/markdownx/bed67e0e-dfbb-40f5-8982-e0a6eee46d4e.png)\r\n\r\nThe interface displays Done! when the report is complete. Click Download report to save the report.\r\n\r\n![](/media/markdownx/96705aa5-17f1-4fb5-996b-3566b38fa1c3.png)\r\n\r\nClick Save File to complete the process.\r\n\r\n![](/media/markdownx/01332065-b852-49e1-b0b3-c45c6b51438e.png)\r\n\r\nThe completed report is saved to the Downloads directory on the system hosting the web browser used to access Web Console. In this example, the host is workstation.\r\n\r\n![](/media/markdownx/89be9c98-86c8-4e03-a807-db80b4072533.png)\r\n\r\n## MANAGING SYSTEM SERVICES WITH THE WEB CONSOLE\r\n \r\nAs a privileged user in Web Console, you can stop, start, enable, and restart system services. Additionally, you can configure network interfaces, configure firewall services, administer user accounts, and more. The following images display common examples for using the Web Console's\r\nmanagement tools.\r\n\r\n## System Power Options\r\nWeb Console allows you to restart or shut down the system. Log in to Web Console as a privileged user. Click System in the left navigation bar to access system power options.\r\n\r\nSelect the desired option from the Power Options menu to either restart or shut down a system.\r\n\r\n![](/media/markdownx/4825a06e-cc9e-439b-826b-a7ffc3b7a24d.png)\r\n\r\n## Controlling Running System Services\r\n\r\nYou can start, enable, disable, and stop services with graphical tools in Web Console. Click Services in the left navigation bar to access the Web Console's services initial page. To manage services, click System Services at the upper-right of the services initial page. Services are displayed in sections labeled Enabled, Disabled, and Static. Scroll through the page to select the service you want to manage.\r\n\r\nIn the example below, select the chronyd.service row to open thee service management page.\r\n\r\n![](/media/markdownx/a65ccdde-c1a0-423e-9f82-c1d7af9f8d0b.png)\r\n\r\nClick Stop, Restart, or Disable as appropriate to manage the service. In this view the service is already running, therefore the start button does not display. Additional information related to the service is available by clicking on any of the highlighted links or by scrolling through the service logs displayed below the service management section.\r\n\r\n![](/media/markdownx/35582de6-cc26-4b42-a685-fd27dd873eaf.png)\r\n\r\n## Configuring Network Interfaces and the Firewall\r\n\r\nTo manage firewall rules and network interfaces, click Networking in the left navigation bar. The following example shows how to gather information about network interfaces and how to manage them.\r\n\r\n![](/media/markdownx/48396cae-f1d2-441e-af4f-10561e1ec910.png)\r\n\r\nClick the desired interface name in the Interfaces section to access the management page. In this example, the ens3 interface is selected.\r\n\r\n![](/media/markdownx/7093a2db-4b99-4365-a91d-48ac4b2fd005.png)\r\n\r\nThe top part of the management page displays network traffic activity for the selected device. Scroll down to view configuration settings and management options.\r\n\r\n![](/media/markdownx/75bd80dd-13fe-4a3d-b794-acd596b9fbb5.png)\r\n\r\nTo modify or add configuration options to an interface, click the highlighted links for the desired configuration. In this example, the IPv4 link shows a single IP address and netmask, 172.25.250.10/24 for the ens3 network interface. To add an additional IP address to the ens3 network interface, click the highlighted link.\r\n\r\n![](/media/markdownx/f47fde75-106c-4212-bb01-dd6d49807de6.png)\r\n\r\nClick + on the right side of the Manual list selection to add an additional IP address. Enter an IP address and network mask in the appropriate fields. Click Apply to activate the new settings.\r\n\r\n![](/media/markdownx/33569182-f1cc-4183-9fbb-95f9e5867f7d.png)\r\n\r\nThe display automatically switches back to the interface's management page where you can confirm the new IP address.\r\n\r\n![](/media/markdownx/baeb267b-34c5-4330-a9b4-3f16c54a42bf.png)\r\n\r\n## Administering User Accounts\r\n\r\nAs a privileged user you can create new user accounts in Web Console. Click Accounts in the left navigation bar to view existing accounts. Click Create New Account to open the account management page.\r\n\r\n![](/media/markdownx/35fcb6a0-f6aa-4a8a-8d5d-2602573b7e5f.png)\r\n\r\nEnter the information for the new account and then click Create.\r\n\r\n![](/media/markdownx/571b4417-0f6c-4c5c-bb76-69286b1299c5.png)\r\n\r\nThe display automatically switches back to the account management page where you can confirm the new user account.\r\n\r\n![](/media/markdownx/9dc7966e-f204-4269-a553-8541608f1f83.png)\r\n\r\n> **REFERENCES** cockpit(1), cockpit-ws(8), and cockpit.conf(5) man pages\r\n> \r\n> For more information, refer to Managing systems using Web Console in\r\n> the guide to using Cockpit for managing systems in Red Hat Enterprise\r\n> Linux 8.0 at\r\n> https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_systems_using_the_web_console/", "order": 1, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 307, "fields": {"title": "GUIDED EXERCISE: ANALYZING AND MANAGING REMOTE SERVERS", "slug": "guide-exercise-analyzing-managing-remote-servers", "content": "", "content_md": "In this exercise, you will enable and access Web Console on a server to manage it and to diagnose and resolve issues.\r\n\r\n## OUTCOMES\r\n\r\nYou should be able to use Web Console to monitor basic system features, inspect log files, create user accounts, and access the terminal.\r\n\r\n## BEFORE YOU BEGIN\r\n\r\nLog in as the student user on workstation using student as the password. On workstation, run the lab support-cockpit start command. This command runs a start script to determine and alter whether the hosts servera and serverb are reachable on the network. \r\n\r\n    [student@workstation ~]$ lab support-cockpit start\r\n\r\n1. Use the ssh command to log in to servera as the student user. The systems are configured to use SSH keys for authentication, therefore a password is not required to log in to servera.\r\n\r\n    [student@workstation ~]$ ssh student@servera\r\n    Activate the web console with: systemctl enable --now cockpit.socket\r\n    [student@servera ~]$\r\n\r\n2. Web Console is already installed on the system, but it is not activated. Enable and start the cockpit service.\r\n\r\n\t2.1 Use the systemctl enable --now cockpit.socket command to enable the Web Console service. Use the sudo command to get superuser privileges, and when prompted use student as the password.\r\n\r\n        [student@servera ~]$ sudo systemctl enable --now cockpit.socket\r\n    \t[sudo] password for student: student\r\n    \tCreated symlink /etc/systemd/system/sockets.target.wants/\r\n    \tcockpit.socket -> /usr/lib/systemd/system/cockpit.socket.\r\n\r\n3. On workstation, open Firefox and log in to the Web Console interface at servera.lab.example.com. Log in as student using student as the password.\r\n\r\n\t3.1 Open Firefox and navigate to https://servera.lab.example.com:9090.\r\n\r\n\t3.2 Accept the self-signed certificate by adding it as an exception.\r\n\r\n\t3.3 Log in as student using student as the password. You are now logged in as a normal user, with minimal privileges.\r\n\t\r\n4. Verify your current authorization within the Web Console interface.\r\n\r\n\t4.1 Click Terminal in the left navigation bar to access the terminal.\r\n\t\r\n\tA terminal session opens with the student user already logged in. Use the id command to confirm that command execution works in the embedded terminal.\r\n\r\n        [student@servera ~]$ id\r\n    \tuid=1000(student) gid=1000(student) groups=1000(student),10(wheel)\r\n    \tcontext=unconfined_u:unconfined_r:unconfined_t:s0\r\n\r\n5. Access Web Console with administrative privileges.\r\n\t\r\n\t5.1 Log back in to the Web Console interface as the student user with student as the password, but this time select the Reuse my password for privileged tasks check box.\r\n\r\n\t5.2 To verify administrative access, confirm that the Privileged label is displayed next to the Student User account name at the upper-right side of the Web Console interface.\r\n\r\n6. To investigate system statistics, click System in the left navigation bar.\r\n\t\r\n\tThis page displays various basic operating system statistics, such as current load, disk usage, disk I/O, and network traffic.\r\n\t\r\n7. To inspect system logs, click Logs in the left navigation bar.\r\n\r\n\tThis page displays the systemd system logs. Use the buttons located in the upper-left corner to modify how log entries are displayed based on date and the severity of the logs.\r\n\r\n\t7.1 Click the Severity list and choose Everything.\r\n\r\n\t7.2 Based on the current day of the month, click any log entry from the list. A log entry detail page opens with additional information about the event, such as the host name, the SELinux context, or the PID number of the process that the entry corresponds to.\r\n\r\n8. Add a se    cond IP address to an existing network interface device.\r\n\r\n\t8.1 Click Networking in the left navigation bar.\r\n\t\r\n\tThis page displays details of the current network configuration for servera, as well as real-time network statistics, firewall configuration, and log entries related to networking.\r\n\r\n\t8.2 Scroll down to the the Interfaces section and click the row for the network interface name.\r\n\r\n\tA details page displays real-time network statistics, as well as the current configuration for that network interface.\r\n\r\n\t8.3 Click the Address 172.25.250.10/24 via 172.25.250.254 link.\r\n\r\n\tAn IPv4 Settings window opens where you can change the network interface configuration.\r\n\r\n\t8.4 In the IPv4 Settings window, click + next to Manual.\r\n\r\n\t8.5 In the Address text box, enter 172.25.250.99 as the second IP Address.\r\n\r\n\t8.6 In the Prefix length or Netmask text box, enter 24 as the netmask value.\r\n\r\n\t8.7 Click Apply to save the new network configuration.\r\n\r\n\tNotice that the new configuration is immediately applied. The new IP Address is visible in the IPv4 line.\r\n\t\r\n9. Create a new user account.\r\n\r\n\t9.1 Click Accounts in the left navigation bar.\r\n\r\n\t9.2 Click Create New Account.\r\n\r\n\t9.3 In the Create New Account window, add the following details:\r\n\r\n\t![](/media/markdownx/5888c3ce-0202-4a5e-b8b2-4a34822752c6.png)\r\n\t\r\n\t9.4 Click Create.\r\n\r\n10. Access a terminal session within Web Console to add the manager1 user to the wheel group.\r\n\r\n\t10.1 Click Terminal in the left navigation bar.\r\n\t\r\n\t10.2 Use the id manager1 command to view the group membership of the manager1 user.\r\n\r\n        [student@servera ~]$ id manager1\r\n        uid=1001(manager1) gid=1001(manager1) groups=1001(manager1)\r\n        [student@servera ~]$\r\n\t\r\n\t10.3 Use the sudo usermod -aG wheel manager1 command to add manager1 to the wheel group.\r\n\r\n        [student@servera ~]$ sudo usermod -aG wheel manager1\r\n        [sudo] password for student: student\r\n        [student@servera ~]$\r\n\r\n\t10.4 Use the id manager1 command to verify that manager1 is a member of the wheel group.\r\n\r\n        [student@servera ~]$ id manager1\r\n        uid=1001(manager1) gid=1001(manager1) groups=1001(manager1),10(wheel)\r\n        [student@servera ~]$\r\n\t\r\n11. Enable and start the Kernel process accounting service (psacct).\r\n\r\n\t11.1 Click Services in the left navigation bar.\r\n\r\n\t11.2 Scroll down the list of System Services to the Disabled section. Find and click the Kernel process accounting link.\r\n\r\n\t11.3 Click Enable.\r\n\r\n\t11.4 Click Start.\r\n\t\r\n\tThe service is now enabled and started.\r\n\t\r\n12. Log off from the Web Console interface.\r\n\r\n13. Log off from servera.\r\n\r\n        [student@servera ~]$ exit\r\n        [student@workstation ~]$\r\n\r\n## Finish\r\nOn workstation, run the lab support-cockpit finish script to finish this exercise.\r\n\r\n        [student@workstation ~]$ lab support-cockpit finish", "order": 2, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 308, "fields": {"title": "GETTING HELP FROM RED HAT CUSTOMER PORTAL", "slug": "getting-help-from-red-hat-customer-portal", "content": "", "content_md": "## OBJECTIVES\r\n\r\nAfter completing this section, you should be able to describe key resources available through the Red Hat Customer Portal and use them to find information from Red Hat documentation and the Knowledgebase.\r\n\r\n## ACCESSING SUPPORT RESOURCES ON THE RED HAT CUSTOMER PORTAL\r\n\r\nThe Red Hat Customer Portal (https://access.redhat.com) provides customers access to documentation, downloads, tools, and technical expertise. Customers can search for solutions, FAQs, and articles through the Knowledgebase. From the Customer Portal, you can:\r\n\r\n- Access official product documentation.\r\n- Submit and manage support tickets.\r\n- Manage software subscriptions and entitlements.\r\n- Obtain software downloads, updates, and evaluations.\r\n- Consult tools that can help you optimize the configuration of your systems.\r\n\r\nParts of the site are accessible to everyone, and other areas are only available to customers with\r\nactive subscriptions. Get help accessing the Customer Portal at https://access.redhat.com/help/.\r\n\r\n## GETTING ORIENTED TO THE CUSTOMER PORTAL\r\n\r\nYou can access the Red Hat Customer Portal through a web browser. This section introduces the Customer Portal Tour. The tour can be found at https://access.redhat.com/start.\r\n\r\nThe tour is a very useful tool for discovering all the portal has to offer and how to get the most out of your Red Hat subscription. After you have logged in to the Red Hat Customer Portal, click Tour the Customer Portal.\r\n\r\n![](/media/markdownx/3557cb25-4bc9-4d8e-88a4-e88ca068a2fa.png)\r\n\r\nThe WELCOME TO THE RED HAT CUSTOMER PORTAL window opens with two options: CLOSE and NEXT. Click NEXT to start the tour. This is the first of a sequence of windows that highlight different parts of the interface.\r\n\r\n## The Top Navigation Bar\r\n\r\nThe first three stops on the Customer Portal Tour can be found on the top navigation bar of the Red Hat Customer Portal website:\r\n\r\n![](/media/markdownx/c4679848-abb4-43bf-bf6b-7a9e7f0ea6d7.png)\r\n\r\nSubscriptions opens a new page where you can manage your registered systems and your subscriptions and entitlements usage. It lists information about errata that apply and allows you to create activation keys that you can use when registering systems to ensure they get entitlements from the correct subscriptions. Note that if you are part of an organization, your Organization Administrator can limit your access to this page.\r\n\r\nDownloads opens a new page which gives you access to your product downloads and to request evaluation entitlements for products for which you do not have entitlements.\r\n\r\nSupport Cases opens a new page which provides access to create, track, and manage your support cases through the Case Management system, assuming that your organization has authorized that level of access.\r\n\r\nYour name is the title for the User Menu, which allows you to manage your account, accounts for which you are Organization Administrator, your personal profile, and options for email notifications of new content that is available.\r\n\r\nThe globe icon opens the Select Your Language menu to specify your language preferences for Customer Portal.\r\n\r\n## Topics Menus\r\n\r\nUnderneath the top navigation bar on the Customer Portal's main page are menus that you can use to navigate to four major categories of resources available on the site.\r\n\r\n![](/media/markdownx/79bc9998-4d4e-47fa-9184-9ccd13d61c8c.png)\r\n\r\nProducts & Services provides access to the Product Hubs, pages that provide access to product-specific evaluations, overviews, getting started guides, and other product support information. You can also access documentation for Red Hat products, direct links to the Knowledgebase of support articles, and information on support policies and how to contact Red Hat Support.\r\n\r\n![](/media/markdownx/b5320f9a-b081-453d-904e-0907de8dfd3f.png)\r\n\r\nThe Tools menu provides links to tools to help you succeed with Red Hat products. The Solution Engine section provides you with an efficient way to search for solutions to your problems quickly, by product, and opening a support ticket if you do not find a satisfactory solution. The Customer\r\nPortal Labs section provides a collection of web-based applications and tools to help you improve performance, diagnose issues, identify security problems, and optimize your configurations. For example, the Product Life Cycle Checker allows you to select a particular product and view its\r\nsupport life cycle schedule. Another tool, the Rescue Mode Assistant, helps you reset the root password of a system, generate diagnostic reports, or fix boot-time problems with file systems. But there are many other tools available at that site.\r\n\r\n![](/media/markdownx/b7bb75a5-3511-4326-99f3-662886f843e8.png)\r\n\r\nThe Security section provides access to the Red Hat Product Security Center at https://access.redhat.com/security/. This section also provides information about high-profile security issues, access to the Red Hat CVE Database, the Security channel of the Red Hat Blog, and resources about Red Hat's security response process and how we rate issues and resolve them. Finally, the Community section is a place where Red Hat experts, customers, and partners can communicate and collaborate. Discussion forums, blogs, and information about upcoming events in your area are available here.\r\n\r\n\r\n\r\n> **NOTE** \r\n> You should complete the entire tour at Getting Started with Red Hat [https://access.redhat.com/start], including the sections on how to personalize your Customer Portal experience and exploring the benefits of your Red Hat subscription, to get the full story about the Customer Portal. You will need at least one active subscription on your Customer Portal account to access this page.\r\n\r\n## SEARCHING THE KNOWLEDGEBASE WITH THE RED HAT SUPPORT TOOL\r\n\r\nThe Red Hat Support Tool utility, redhat-support-tool, provides a text-based interface that allows you to search Knowledgebase articles and to file support cases on the Customer Portal from your system's command line. The tool does not have a graphical interface and, because\r\nit interacts with the Red Hat Customer Portal, it requires internet access. Run the redhat- support-tool command using any terminal or SSH connection. \r\n\r\nThe redhat-support-tool command may be used in an interactive mode or invoked as a command with options and arguments. The tool's syntax is identical for both methods. By default, the program launches in interactive mode. Use the help subcommand to see all available\r\ncommands. Interactive mode supports tab completion and the ability to call programs in the parent shell.\r\n\r\n    [user@host ~]$ redhat-support-tool\r\n    Welcome to the Red Hat Support Tool.\r\n    Command (? for help):\r\n\r\nWhen first invoked, redhat-support-tool prompts for Red Hat Customer Portal subscriber login information. To avoid repetitively supplying this information, the tool asks to store account information in the user's home directory (~/.redhat-support-tool/redhat-support-tool.conf). If issues are all filed through a particular Red Hat Customer Portal account, the --global option can save account information to /etc/redhat-support-tool.conf, along with other system-wide configuration. The tool's config command modifies tool configuration settings.\r\n\r\nThe redhat-support-tool command allows subscribers to search and display Knowledgebase content from the Red Hat Customer Portal. The Knowledgebase permits keyword searches, similar to the man command. You can enter error codes, syntax from log files, or any mix of keywords to\r\nproduce a list of relevant solution documents.\r\n\r\nThe following is an initial configuration and basic search demonstration:\r\n\r\n    [user@host ~]$ redhat-support-tool\r\n    Welcome to the Red Hat Support Tool.\r\n    Command (? for help): search How to manage system entitlements with subscription-\r\n    manager\r\n    Please enter your RHN user ID: subscriber\r\n    Save the user ID in /home/student/.redhat-support-tool/redhat-support-tool.conf\r\n    (y/n): y\r\n    Please enter the password for subscriber: password\r\n    Save the password for subscriber in /home/student/.redhat-support-tool/redhat-\r\n    support-tool.conf (y/n): y\r\n\r\nAfter prompting the user for the required user configuration, the tool continues with the original search request:\r\n\r\n    Type the number of the solution to view or 'e' to return to the previous menu.\r\n    1 [ 253273:VER] How to register and subscribe a system to the Red Hat Customer\r\n    Portal using Red Hat Subscription-Manager\r\n    2 [ 265523:VER] Enabling or disabling a repository using Red Hat Subscription\r\n    Management\r\n    3 [ 100423:VER] Why does subscription-manager list return: \"No Installed\r\n    Products found\" ?\r\n    ...output omitted...\r\n    Select a Solution: 1\r\n\r\nSelect article number 1 as above and you are prompted to select the section of the document to read. Finally, use the Q key to quit the section you are in, or use it repeatedly to quit the redhat-support-tool command.\r\n\r\n    Select a Solution: 1\r\n    \r\n    Type the number of the section to view or 'e' to return to the previous menu.\r\n    1 Title\r\n    2 Issue\r\n    3 Environment\r\n    4 Resolution\r\n    5 Display all sections\r\n    End of options.\r\n    Section: 1\r\n    \r\n    Title\r\n    ===============================================================================\r\n    How to register and subscribe a system to the Red Hat Customer Portal using Red\r\n    Hat Subscription-Manager\r\n    URL:\r\n    https://access.redhat.com/solutions/253273\r\n    Created On: None\r\n    Modified On: 2017-11-29T15:33:51Z\r\n    \r\n    (END) q\r\n    Section:\r\n    Section: q\r\n    \r\n    Select a Solution: q\r\n    \r\n    Command (? for help): q\r\n    [user@hosts ~]#\r\n\r\n## Accessing Knowledgebase Articles by Document ID\r\n\r\nLocate online articles directly using the tool's kb command with the Knowledgebase document ID. A returned document scrolls on the screen without pagination, but you can redirect it to a file to save it and use less to scroll through it a screen at a time.\r\n\r\n    [user@host ~]$ redhat-support-tool kb 253273\r\n    Title\r\n    ===============================================================================\r\n    How to register and subscribe a system to the Red Hat Customer Portal using Red\r\n    Hat Subscription-Manager\r\n    URL:\r\n    https://access.redhat.com/solutions/253273\r\n    Created On: None\r\n    Modified On: 2017-11-29T15:33:51Z\r\n    Issue\r\n    ===============================================================================\r\n    *\r\n    How to register a new `Red Hat Enterprise Linux` system to the Customer Portal\r\n    using `Red Hat Subscription-Manager`\r\n\r\n## MANAGING SUPPORT CASES WITH RED HAT SUPPORT TOOL\r\n\r\nOne benefit of a product subscription is access to technical support through the Red Hat Customer Portal. Depending on the system's subscription support level, Red Hat may be contacted through online tools or by phone. See https://access.redhat.com/site/support/policy/support_process for detailed information.\r\n\r\n## Preparing a Bug report\r\n\r\nBefore contacting Red Hat Support, it is important to gather relevant information for a bug report. Define the problem. Be able to clearly state the problem and its symptoms. Be as specific as possible. Detail the steps that will reproduce the problem.\r\n\r\nGather background information. Which product and version is affected? Be ready to provide relevant diagnostic information. This can include output of sosreport, discussed later in this section. For kernel problems, this could include the system's kdump crash dump or a digital photo of the kernel backtrace displayed on the monitor of a crashed system.\r\n\r\nDetermine the severity level. Red Hat uses four severity levels to classify issues. Urgent and High severity problem reports should be followed by a phone call to the relevant local support center (see https://access.redhat.com/site/support/contact/technicalSupport).\r\n\r\n![](/media/markdownx/e92c2d80-45da-4463-9f86-73a0d97b85fb.png)\r\n\r\n## Managing a Bug Report with redhat-support-tool\r\n\r\nYou can create, view, modify, and close Red Hat Support cases using redhat-support-tool. When support cases are in an opened or maintained status, users may attach files or documentation, such as diagnostic reports (sosreport). The tool uploads and attaches files to cases.\r\n\r\nCase details including the product name, version, summary, description, severity, and case group may be assigned with command options or letting the tool prompt for required information. In the following example, a new case is opened. The --product and --version options are specified.\r\n\r\n    [user@host ~]$ redhat-support-tool\r\n    Welcome to the Red Hat Support Tool.\r\n    Command (? for help): opencase --product=\"Red Hat Enterprise Linux\" --\r\n    version=\"7.0\"\r\n    Please enter a summary (or 'q' to exit): System fails to run without power\r\n    Please enter a description (Ctrl-D on an empty line when complete):\r\n    When the server is unplugged, the operating system fails to continue.\r\n\t    1 Urgent\r\n\t    2 High\r\n\t    3 Normal\r\n\t    4 Low\r\n    Please select a severity (or 'q' to exit): 4\r\n    Would you like to assign a case group to this case (y/N)? N\r\n    Would see if there is a solution to this problem before opening a support case?\r\n    (y/N) N\r\n    -------------------------------------------------------------------------------\r\n    Support case 01034421 has successfully been opened.\r\n\r\nIf the --product and --version options are not specified the redhat-support-tool provides a list of choices for those options.\r\n\r\n    [user@host ~]$ redhat-support-tool\r\n    Welcome to the Red Hat Support Tool.\r\n    Command (? for help): opencase\r\n    Do you want to use the default product - \"Red Hat Enterprise Linux\" (y/N)?: y\r\n    ...output omitted...\r\n    29 7.4\r\n    30 7.5\r\n    31 7.6\r\n    32 8.0 Beta\r\n    Please select a version (or 'q' to exit): 32\r\n    Please enter a summary (or 'q' to exit): yum fails to install apache\r\n    Please enter a description (Ctrl-D on an empty line when complete):\r\n    yum cannot find correct repo\r\n\t    1 Urgent\r\n\t    2 High\r\n\t    3 Normal\r\n\t    4 Low\r\n    Please select a severity (or 'q' to exit): 4\r\n    Would you like to use the default (Ungrouped Case) Case Group (y/N)? : y\r\n    Would you like to see if there's a solution to this problem before opening a\r\n    support case? (y/N) N\r\n    -------------------------------------------------------------------------------\r\n    Support case 010355678 has successfully been opened.\r\n\r\n## Attaching Diagnostic Information to a Support Case\r\n\r\nIncluding diagnostic information can lead to a quicker resolution. Attach the sosreport when the case is opened. The sosreport command generates a compressed tar archive of diagnostic information gathered from the running system. The redhat-support-tool prompts to include\r\none if an archive has been created previously:\r\n\r\n    Please attach a SoS report to support case 01034421. Create a SoS report as\r\n    the root user and execute the following command to attach the SoS report\r\n    directly to the case:\r\n    redhat-support-tool addattachment -c 01034421 path to sosreport\r\n    \r\n    Would you like to attach a file to 01034421 at this time? (y/N) N\r\n    Command (? for help):\r\n\r\nIf a current SoS report does not exist, an administrator can generate and attach one later. Use the redhat-support-tool addattachment command to attach the report.\r\n\r\nSupport cases can also be viewed, modified, and closed by the subscriber:\r\n\r\n    Command (? for help): listcases\r\n    \r\n    Type the number of the case to view or 'e' to return to the previous menu.\r\n    1 [Waiting on Red Hat] System fails to run without power\r\n    No more cases to display\r\n    Select a Case: 1\r\n    \r\n    Type the number of the section to view or 'e' to return to the previous menu.\r\n\t    1 Case Details\r\n\t    2 Modify Case\r\n\t    3 Description\r\n\t    4 Recommendations\r\n\t    5 Get Attachment\r\n\t    6 Add Attachment\r\n\t    7 Add Comment\r\n    End of options.\r\n    Option: q\r\n    Select a Case: q\r\n    \r\n    Command (? for help):q\r\n    \r\n    [user@host ~]$ redhat-support-tool modifycase --status=Closed 01034421\r\n    Successfully updated case 01034421\r\n\r\nThe Red Hat Support Tool has advanced application diagnostic and analytic capabilities. Using kernel crash dump core files, redhat-support-tool can create and extract a backtrace. The kernel crash dump core file is created using the kdump command. A backtrace is a report of the active stack frames at the point of a crash dump and provides onsite diagnostics. One of the options of the redhat-support-tool is to open a support case.\r\n\r\nThe tool also provides log file analysis. Using the tool's analyze command, log files of many types, including operating system, JBoss, Python, Tomcat, and oVirt, can be parsed to recognize problem symptoms. The log files can be viewed and diagnosed individually. Providing preprocessed analysis, as opposed to raw data such as crash dump or log files, allows support cases to be opened and made available to engineers more quickly.\r\n\r\n## JOINING RED HAT DEVELOPER\r\n\r\nOne other useful resource available from Red Hat is Red Hat Developer. Hosted at https://developer.redhat.com, this program provides subscription entitlements to Red Hat software for development purposes, documentation, and premium books from our experts on microservices, serverless computing, Kubernetes, and Linux. A blog, links to information about upcoming events and training, and other help resources are also available, as well as links to Red Hat Customer Portal.\r\n\r\nRegistration is free, and can be completed at https://developer.redhat.com/register.\r\n\r\n> **REFERENCES**\r\n> \r\n> sosreport(1) man page\r\n> \r\n> Red Hat Access: Red Hat Support Tool\r\n> \r\n> https://access.redhat.com/site/articles/445443\r\n> \r\n> Red Hat Support Tool First Use\r\n> \r\n> https://access.redhat.com/site/videos/534293\r\n> \r\n> Contacting Red Hat Technical Support\r\n> \r\n> https://access.redhat.com/site/support/policy/support_process/\r\n> \r\n> Help - Red Hat Customer Portal\r\n> \r\n> https://access.redhat.com/site/help/", "order": 3, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 309, "fields": {"title": "GUIDED EXERCISE: GETTING HELP FROM RED HAT CUSTOMER PORTAL", "slug": "guide-exercise-getting-help-red-hat-cs-portal", "content": "", "content_md": "In this exercise, you will generate a diagnostics report using Web Console.\r\n\r\n## OUTCOMES\r\n\r\nYou should be able to generate a diagnostics report using Web Console which could be submitted to Red Hat Customer Portal as part of a support case.\r\n\r\n## BEFORE YOU BEGIN\r\n\r\nLog in as the student user on workstation using student as the password. \r\n\r\nFrom workstation, run the lab support-portal start command. The command runs a start script that determines if servera is reachable on the network. It also starts and enables Web Console on servera.\r\n\r\n    [student@workstation ~]$ lab support-portal start\r\n\r\n 1. From workstation use the ssh command to log into servera as the student user.\r\n\r\n        [student@workstation ~]$ ssh student@servera\r\n        Web console: https://servera.lab.example.com:9090/ or\r\n        https://172.25.250.10:9090/\r\n        [student@servera ~]$\r\n\r\n 2. Use the systemctl command to confirm that the cockpit service is running. Enter student as the password when prompted.\r\n\r\n        [student@servera ~]$ sudo systemctl status cockpit.socket\r\n        [sudo] password for student: student\r\n        \u25cf cockpit.socket - Cockpit Web Service Socket\r\n        \tLoaded: loaded (/usr/lib/systemd/system/cockpit.socket; enabled; vendor\r\n        preset: disabled)\r\n        \tActive: active (listening) since Thu 2019-05-16 10:32:33 IST; 4min 37s ago\r\n        \tDocs: man:cockpit-ws(8)\r\n        Listen: [::]:9090 (Stream)\r\n        Process: 676 ExecStartPost=/bin/ln -snf active.motd /run/cockpit/motd\r\n        (code=exited, status=0/SUCCESS)\r\n        Process: 668 ExecStartPost=/usr/share/cockpit/motd/update-motd localhost\r\n        (code=exited, status=0/SUCCESS)\r\n        Tasks: 0 (limit: 11405)\r\n        Memory: 1.5M\r\n        CGroup: /system.slice/cockpit.socket\r\n\r\n 3. Log out from servera.\r\n\r\n        [student@servera ~]$ exit\r\n        [student@workstation ~]$\r\n\r\n 4. On workstation, open Firefox and log in to the Web Console interface running on servera.lab.example.com as the root user with redhat as the password.\r\n\t\r\n\t4.1 Open Firefox and go to the https://servera.lab.example.com:9090 address.\r\n\r\n\t4.2 If prompted, accept the self-signed certificate by adding it as an exception.\r\n\r\n\t4.3 Log in as the root user with redhat as the password. You are now logged in as a privileged user, which is necessary to create a diagnostic report.\r\n\r\n\t4.4 Click Diagnostic Reports in the left navigation bar. Click on Create Report. The report takes a few minutes to create.\r\n\t\r\n 5. When the report is ready, click on Download report. Save the file.\r\n\r\n\t5.1 Click the Download report button, followed by the Save File button.\r\n\r\n\t5.2 Click the Close button.\r\n\r\n\t5.3 Log out from the Web Console interface.\r\n\r\n## Finish\r\nOn workstation, run the lab support-portal finish script to complete this exercise.\r\n\r\n    [student@workstation ~]$ lab support-portal finish\r\n\r\nThis concludes the guided exercise.", "order": 4, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 310, "fields": {"title": "DETECTING AND RESOLVING ISSUES WITH RED HAT INSIGHTS", "slug": "detecting-resolving-issue-red-hat-insights", "content": "", "content_md": "## OBJECTIVES\r\nAfter completing this section, you should be able to use Red Hat Insights to analyze servers for issues, remediate or resolve them, and confirm the solution worked.\r\n\r\n## INTRODUCING RED HAT INSIGHTS\r\n\r\nRed Hat Insights is a predictive analytics tool to help you identify and remediate threats to security, performance, availability, and stability to systems running Red Hat products in your infrastructure. Red Hat Insights is delivered as a Software-as-a-Service (SaaS) product, so you can deploy and scale it quickly with no additional  infrastructure requirements. In addition, this means you can immediately take advantage of the latest recommendations and updates from Red Hat specific to your deployed systems.\r\n\r\nRed Hat regularly updates the knowledge base used by Red Hat Insights, based on common support risks, security vulnerabilities, known-bad configurations, and other issues identified by Red Hat. Actions to mitigate or remediate these issues are validated and verified by Red Hat. This allows you to proactively identify, prioritize, and resolve issues before they become a larger problem.\r\n\r\nFor each issue that is detected, Red Hat Insights provides estimates of the risk presented and recommendations on how to mitigate or remediate the problem. These recommendations may provide materials such as Ansible Playbooks or human-readable step-by-step instructions to help you resolve the issue.\r\n\r\nRed Hat Insights recommendations are tailored to each system registered to the service. You install each client system with an agent that collects metadata about the runtime configuration of the system. This data is a subset of what you might provide to Red Hat Support using sosreport in order to resolve a support ticket. You can limit or obfuscate the data that your clients send. This will block some of the analytic rules from operating, depending on what you limit.\r\n\r\nAlmost immediately after you register a server and it completes the initial system metadata synchronization, you should be able to see your server and any recommendations for it in the Red Hat Insights console in Red Hat Cloud Portal.\r\n\r\nRed Hat Insights currently provides predictive analytics and recommendations for these Red Hat products:\r\n\r\n- Red Hat Enterprise Linux 6.4 and later\r\n- Red Hat Virtualization 4 and later\r\n- Red Hat OpenShift Container Platform\r\n- Red Hat OpenStack Platform 7 and later\r\n\r\n## Describing the Red Hat Insights Architecture\r\n\r\nYou may register a system to Red Hat Insights through the Red Hat Cloud Portal. When you register the system, it provides Red Hat Insights with metadata about its current configuration. This data is sent to Red Hat Insights using TLS encryption to protect it in transit. It is also anonymized before it sent.'\r\n\r\nBased on the recommendations provided by the Red Hat Insights rule engine, the results of the analysis are displayed on the Red Hat Insights console in Red Hat Cloud Portal at https://cloud.redhat.com/insights.\r\n\r\n![](/media/markdownx/b3fe8ead-5c0f-4dd6-8a5b-063708e25d9a.png)\r\n\r\n## INSTALLING RED HAT INSIGHTS CLIENTS\r\n\r\nRed Hat Insights is included with Red Hat Enterprise Linux 8 as part of the subscription. Older version of Red Hat Enterprise Linux servers require to install the insights-client package on the system.\r\n\r\n> **IMPORTANT**\r\n> \r\n> The insights-client package replaces the older redhat-access-insights\r\n> package starting with Red Hat Enterprise Linux 7.5.\r\n\r\nIf your system is registered for software entitlements through the Customer Portal Subscription Management service, you can activate Red Hat Insights with one command. Use the insights-client --register command to register the system.\r\n\r\n    [root@demo ~]# insights-client --register\r\n\r\nThe Insights client periodically updates the metadata provided to Red Hat Insights. Use the insights-client command to refresh the client's metadata at any time.\r\n\r\n    [root@demo ~]# insights-client\r\n    Starting to collect Insights data for demo.lab.example.com\r\n    Uploading Insights data.\r\n    Successfully uploaded report from 773b351b-dfb1-4393-afa8-915cc2875e06 to\r\n    account XXXXX.\r\n\r\n**Registering a RHEL System with Red Hat Insights**\r\n\r\nTo register a RHEL server to Red Hat Insights, the overall process is as follows:\r\n\r\n1. Interactively register the system with the Red Hat Subscription Management service.\r\n\r\n\tA valid entitlement for Red Hat Insights must be attached to the system, which you might receive as part of the Red Hat Enterprise Linux subscription.\r\n\r\n        [root@demo ~]# subscription-manager register --auto-attach\r\n\r\n2. Make sure that the insights-client package is installed on the system. In RHEL 7, this package is in the rhel-7-server-rpms channel.\r\n\r\n\t> **NOTE** \t This step is not required on Red Hat Enterprise Linux 8 systems.\r\n\t\t\t\r\n        \r\n        [root@demo ~]# yum install insights-client\r\n\r\n3. Use the insights-client --register command to register the system with the Red Hat Insights service and upload initial system metadata.\r\n\r\n        [root@demo ~]# insights-client --register\r\n\r\n4. Verify that the system is visible at https://cloud.redhat.com/insights.\r\n\r\n![](/media/markdownx/cd5ee2d8-3731-44de-8625-585bcf5c9e7c.png)\r\n\r\n## VIEWING REPORTS PROVIDED BY RED HAT INSIGHTS\r\n\r\nA Red Hat Insights report shows the state of a system over time. With these reports, you can easily view current assessments of risk and identify historical trends in order to enhance your decision making.\r\n\r\nThe Red Hat Insights interface provides you with information that includes:\r\n\r\n- A current overall risk score based on your registered systems.\r\n- Recommended actions to take on your systems, which is further broken down into categories and severities.\r\n- Information on when systems last checked in with Red Hat Insights.\r\n- Issues that need to be prioritized based on their impact.\r\n\r\n## Navigating the Red Hat Insights Console\r\n\r\nThe Red Hat Insights console on the Cloud Portal provides the following pages:\r\n\r\n- Overview\r\nThe Overview page provides a view of current risks to the registered infrastructure. The Overview provides a view to investigate how a specific rule is affecting the registered systems, or see all the rules that pose risk to a selected system.\r\n\r\nThe page allows you to view rules based on severity and classify the infrastructure risk based on category. Each rule is categorized based on the potential impact on one of the following areas of operations: Availabilty, Stability, Performance, and Security\r\n\r\n- Rules\r\n\r\nThe Rules page provides list of Insights rules and the affected hosts .\r\n\r\nIn the Rules page, you will notice some of these issues are marked with check mark under the Ansible logo column. This indicates the issue has an Ansible remediation playbook available. The issues with out a check mark, do not have an Ansible remediation playbook, but may have\r\nmanual mitigation or remediation instructions in the issue details.\r\n\r\nYou can click on the name of the rule to view all the affected systems. Each issue provides a description of how the issue may be manifested on the system, and Remediate with Ansible to create a Playbook for remediation.\r\n\r\n![](/media/markdownx/8373b4fb-dace-4676-8786-9c9bb9553d90.png)\r\n\r\n- Inventory\r\n\r\nThe Inventory page provides a list of the systems you have registered with Red Hat Insights. You can easily filter the inventory for specific systems. The Last Sync column displays the time of the most recent metadata update for each system.\r\n\r\n![](/media/markdownx/6033bca9-aa22-4e10-8fbd-34eba58a8857.png)\r\n\r\n- Remediations\r\nThe Remediations page provides a list of Ansible Playbooks created and allows those Playbooks to be downloaded.\r\n\r\n![](/media/markdownx/b0b4e809-4dd8-4c8d-bb9f-f02083326833.png)\r\n\r\n**Viewing Issues Reported by Red Hat Insights**\r\n\r\nTo view issues reported by Red Hat Insights, the overall process is as follows:\r\n\r\n1. Log in to Red Hat Cloud Portal and access the Red Hat Insights page at https://cloud.redhat.com/insights.\r\n\r\n2. On the portal, navigate to the Overview page.\r\n\r\n3. Select Rule hits by severity to view rules by the Total Risk they pose to the registered infrastructure. Alternatively, select Rule hits by category to view the type of risk based on category.\r\n\r\n4. Scroll through the list of rules to see high-level information about risk, systems exposed, and availability of Ansible Playbook to automate the remediation.\r\n\r\n5. Click on a rule to see the more description of the rule, click the link to read the relevant Knowledgebase articles, and view the list of all the affected hosts.\r\n\r\n6. Click on a host to see specific information about detected issues and steps to resolve the issue.\r\n\r\n## INTERPRETING RED HAT INSIGHTS REPORTS\r\n\r\nIn Red Hat Insights, its rules determine the issues it looks for on your systems. Red Hat frequently adds new rules to Red Hat Insights to check for newly identified issues. Rules may look for incidents that have occurred on your system that indicate a problem, or they may proactively anticipate problems based on your system's current configuration.\r\n\r\nWhen a rule matches your system, indicating that an issue exists, additional information is provided with the rule to help you understand the issue, prioritize work to address it, determine what mitigation or remediation is available, and to help you automate its resolution.\r\n\r\nEach rule is categorized by type, and has a summary name and a longer description to explain what the issue is. Rules are normally linked to Knowledgebase articles on the Customer Portal with additional information. The Knowledgebase article may provide information about different ways to mitigate or remediate a problem, and Ansible Playbooks or other materials may be provided by the rule to help automate mitigation and remediation.\r\n\r\nSome problems are complex to address, and a complete fix may require a reboot or downtime. In that case, there may be options to mitigate the issues by reducing its risk as a temporary measure. The rule will provide scores of the risk presented by the issue, in several different categories.\r\n\r\nFor example, consider a security issue that requires an update to the kernel packages and a reboot to fix, but which also can be made very hard to exploit through certain temporary configuration changes. You might choose to apply the temporary changes immediately, and defer the reboot\r\nuntil you can schedule an emergency maintenance window.\r\n\r\nRed Hat Insights categorizes the risk that an issue presents to your system into four categories. It evaluates the level of that risk using these levels: Low, Moderate, Important, and Critical.\r\n\r\nThe Likelihood, Impact, Total Risk, and Risk of Change categories forecast the risk factors of an issue detected on your subscribed systems.\r\n\r\n- Impact\r\n\r\nIndicates the predicted level of impact to the system by this issue.\r\n\r\n- Likelihood\r\n\r\nIndicates the likelihood that a given issue will impact the system.\r\n\r\n- Total Risk\r\nIndicates the impact of security issues found in Red Hat products using a four-point scale (Low, Moderate, Important, and Critical), as well as Common Vulnerability Scoring System (CVSS) base scores. These provide a prioritized risk assessment to help you to take informed decisions on the risk each issue places on your infrastructure. \r\n\r\n- Risk of Change\r\nIndicates the risk that the recommended remediation action could cause disruption to a system. \r\n\r\nTo view the risk factors forecast by various rules in Red Hat Insights, navigate to Overview, or to the Rules page. Each rule shows the icon for Total Risk, and Risk of Change.\r\n \r\n![](/media/markdownx/16c77fb0-d695-49ff-8dc1-6705231c1af4.png)\r\n\r\nWhen you have identified the issues you want to address, you can address them manually or automatically. After the issue has been resolved, and your Red Hat Insights client has uploaded new metadata, the rule should no longer match that system and the issue should disappear from the list of recommended actions.\r\n\r\n**Manually Remediating an Issue Reported by Red Hat Insights**\r\n\r\n\r\n1. Log in to Red Hat Cloud Portal and access the Red Hat Insights page at https://cloud.redhat.com/insights.\r\nNavigate to the Rules page. Click on the name of the rule to resolve.\r\n\r\n2. Scroll down to Affected systems to see all the affected systems due to the rule.\r\n\r\n3. Click on one of the affected systems link under the Name column. The page shows description of how the issue can affect the system, and the steps to resolve the issue on the system. Follow the instructions in Steps to resolve to remediate the issue on the system.\r\n\r\n![](/media/markdownx/372213f9-bac9-47eb-9649-b2e99a21d253.png)\r\n\r\n4. Perform the steps on the affected system to resolve the issue.\r\n\r\n5. After applying the remediation steps, run the following command as root on the system to report the changes to Red Hat Insights:\r\n\r\n        [root@demo ~]# insights-client\r\n        Starting to collect Insights data for demo.lab.example.com\r\n        Uploading Insights data.\r\n        Successfully uploaded report from 773b351b-dfb1-4393-afa8-915cc2875e06 to\r\n        account xxxxxx.\r\n\r\n6. In the Red Hat Insights console, navigate to the Rules page. Click rule and scroll down to Affected systems and verify that the issue no longer appears in the list of affected systems.\r\n\r\n> **REFERENCES** \r\n>\r\n>insights-client(8) and insights-client.conf(5) man pages.\r\n> \r\n> For more information, refer to the GET STARTED chapter in the Red Hat\r\n> Insights 1.0\r\n> \r\n> Getting Started Guide at\r\n> https://access.redhat.com/products/red-hat-insights/#getstarted\r\n> \r\n> More information on feature updates for Red Hat Insights is at\r\n> https://access.redhat.com/documentation/en-us/red_hat_insights/1.0/html-single/release_notes/#release_information\r\n> \r\n> Information on the data collected by Red Hat Insights is available at\r\n> System Information Collected by Red Hat Insights\r\n> https://access.redhat.com/articles/1598863\r\n> \r\n> Information on how to exclude data collected by Red Hat Insights is\r\n> available at Opting Out of Sending Metadata from Red Hat Insights\r\n> Client https://access.redhat.com/articles/2025273", "order": 5, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 311, "fields": {"title": "QUIZ: DETECTING AND RESOLVING ISSUES WITH RED HAT INSIGHTS", "slug": "quiz-detecting-resolving-issues-red-hat-insight", "content": "", "content_md": "## Quiz\r\n\r\nClick \r\n[https://course.btech.id/quiz/detecting-resolving-issues/](https://course.btech.id/quiz/detecting-resolving-issues/)\r\n to start working on the quiz", "order": 6, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 312, "fields": {"title": "SUMMARY", "slug": "summary-chapter16", "content": "", "content_md": "In this chapter, you learned:\r\n\r\n- Web Console is a web-based management interface to your server based on the open source Cockpit service.\r\n\r\n- Web Console provides graphs of system performance, graphical tools to manage system configuration and inspect logs, and an interactive terminal interfaces.\r\n\r\n- Red Hat Customer Portal provides you with access to documentation, downloads, optimization tools, support case management, and subscription and entitlement management for your Red Hat products.\r\n\r\n- redhat-support-tool is a command-line tool to query Knowledgebase and work with support cases from the server's command line.\r\n\r\n- Red Hat Insights is a SaaS-based predictive analytics tool to help you identify and remediate threats to your systems' security, performance, availability, and stability.", "order": 7, "is_visible": true, "is_task": false, "module": 42, "draft": false, "files": []}}, {"model": "courses.section", "pk": 313, "fields": {"title": "LAB COMPREHENSIVE 1 : MANAGING FILES FROM THE COMMAND LINE", "slug": "lab-managing-files-from-the-command-line-1", "content": "", "content_md": "In this review, you will manage files, redirect a specific set of lines from a text file to another\r\nfile and edit the text files.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:<br>\r\n\r\n\u2022 Manage files from the command line.<br>\r\n\r\n\u2022 Display a certain number of lines from text files and redirect the output to another file.<br>\r\n\u2022 Edit text files.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nCopy any files or work you wish to keep to other systems before resetting. Reset the\r\nworkstation, servera, and serverb systems now. Wait until the workstation,\r\nservera, and serverb systems are started.\r\n\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run lab rhcsa-rh124-review1 start to start the comprehensive\r\nreview. This script creates the necessary files to set up the environment correctly.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 start\r\n```\r\n\r\n##INSTRUCTIONS<br>\r\nAccomplish the following tasks on serverb to complete the exercise.<br>\r\n\r\n\u2022 Create a new directory called /home/student/grading.<br>\r\n\r\n\u2022 Create three empty files in the /home/student/grading directory named grade1,\r\ngrade2, and grade3.<br>\r\n\r\n\u2022 Capture the first five lines of the /home/student/bin/manage-files file in the /\r\nhome/student/grading/manage-files.txt file.<br>\r\n\r\n\u2022 Append the last three lines of /home/student/bin/manage-files to the file /home/\r\nstudent/grading/manage-files.txt. You must not overwrite any text already in the\r\nfile /home/student/grading/manage-files.txt.<br>\r\n\r\n\u2022 Copy /home/student/grading/manage-files.txt to /home/student/grading/\r\nmanage-files-copy.txt.<br>\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that there\r\nshould be two sequential lines of text reading Test JJ.<br>\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that the Test\r\nHH line of text must not exist in the file.<br>\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that the line A\r\nnew line should exist between the line reading Test BB and the line reading Test CC.<br>\r\n\r\n\u2022 Create a hard link named /home/student/hardlink to the file /home/student/\r\ngrading/grade1. You will need to do this after creating the empty file /home/\r\nstudent/grading/grade1 as specified above.<br>\r\n\r\n\u2022 Create a soft link named /home/student/softlink to the file /home/student/\r\ngrading/grade2.<br>\r\n\r\n\u2022 Save the output of a command that lists the contents of the /boot directory to the file\r\n/home/student/grading/longlisting.txt. The output should be a \u201clong listing\u201d\r\nthat includes file permissions, owner and group owner, size, and modification date of each\r\nfile.<br>\r\n\r\n##Evaluation<br>\r\nOn workstation, run the lab rhcsa-rh124-review1 grade command to confirm success\r\nof this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run lab rhcsa-rh124-review1 finish to complete the comprehensive\r\nreview. This script deletes the files and directories created during the start of the comprehensive review and ensures that the environment on serverb is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 2, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 314, "fields": {"title": "SOLUTION COMPREHENSIVE 1 : MANAGING FILES FROM THE COMMAND LINE", "slug": "solution-managing-files-from-the-command-line-1", "content": "", "content_md": "In this review, you will manage files, redirect a specific set of lines from a text file to another\r\nfile and edit the text files.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\r\n\u2022 Manage files from the command line.\r\n\r\n\u2022 Display a certain number of lines from text files and redirect the output to another file.\r\n\r\n\u2022 Edit text files.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nCopy any files or work you wish to keep to other systems before resetting. Reset the\r\nworkstation, servera, and serverb systems now. Wait until the workstation,\r\nservera, and serverb systems are started.\r\nLog in to workstation as student using student as the password.\r\nOn workstation, run lab rhcsa-rh124-review1 start to start the comprehensive\r\nreview. This script creates the necessary files to set up the environment correctly.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 start\r\n```\r\n\r\n##INSTRUCTIONS<br>\r\nAccomplish the following tasks on serverb to complete the exercise.\r\n\r\n\u2022 Create a new directory called /home/student/grading.\r\n\r\n\u2022 Create three empty files in the /home/student/grading directory named grade1,\r\ngrade2, and grade3.\r\n\r\n\u2022 Capture the first five lines of the /home/student/bin/manage-files file in the /\r\nhome/student/grading/manage-files.txt file.\r\n\r\n\u2022 Append the last three lines of /home/student/bin/manage-files to the file /home/\r\nstudent/grading/manage-files.txt. You must not overwrite any text already in the\r\nfile /home/student/grading/manage-files.txt.\r\n\r\n\u2022 Copy /home/student/grading/manage-files.txt to /home/student/grading/\r\nmanage-files-copy.txt.\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that there\r\nshould be two sequential lines of text reading Test JJ.\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that the Test\r\nHH line of text must not exist in the file.\r\n\r\n\u2022 Edit the file /home/student/grading/manage-files-copy.txt so that the line A\r\nnew line should exist between the line reading Test BB and the line reading Test CC.\r\n\r\n\u2022 Create a hard link named /home/student/hardlink to the file /home/student/\r\ngrading/grade1. You will need to do this after creating the empty file /home/\r\nstudent/grading/grade1 as specified above.\r\n\r\n\u2022 Create a soft link named /home/student/softlink to the file /home/student/\r\ngrading/grade2.\r\n\r\n\u2022 Save the output of a command that lists the contents of the /boot directory to the file\r\n/home/student/grading/longlisting.txt. The output should be a \u201clong listing\u201d\r\nthat includes file permissions, owner and group owner, size, and modification date of each\r\nfile.\r\n\r\n<br>\r\n1. Create a new directory called /home/student/grading.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1. From workstation, open an SSH session to serverb as student.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2. Use the mkdir command to create the /home/student/grading directory.\r\n\r\n```bash\r\n[student@serverb ~]$ mkdir grading\r\n```\r\n\r\nAs you ran the preceding command while in the home directory of the student user,\r\nyou did not specify the absolute path to the grading directory while creating it.\r\n\r\n<br>\r\n2. Create three empty files in the /home/student/grading directory named grade1,\r\ngrade2, and grade3.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1. Use the touch command to create the empty files called grade1, grade2, and grade3 in the /home/student/grading directory. Apply the brace expansion shell feature to create all three files with a single touch command.\r\n\r\n```bash\r\n[student@serverb ~]$ touch grading/grade{1,2,3}\r\n```bash\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2. Use the ls command to verify that the grade1, grade2, and grade3 files exist\r\nunder the directory /home/student/grading.\r\n\r\n```bash\r\n[student@serverb ~]$ ls grading/\r\ngrade1\r\ngrade2\r\ngrade3\r\n```\r\n\r\n<br>\r\n3.Capture the first five lines of the /home/student/bin/manage-files file in the /home/\r\nstudent/grading/manage-files.txt file.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Use the head command to view the first five lines of the file /home/student/bin/\r\nmanage-files and redirect the output to the file /home/student/grading/\r\nmanage-files.txt.\r\n\r\n```bash\r\n[student@serverb ~]$ head -5 bin/manage-files > grading/manage-\r\nfiles.txt\r\n```\r\n\r\nThe preceding command uses the single redirection symbol (>) to save the command\r\noutput to /home/student/grading/manage-files.txt so that any existing\r\ncontent in the file gets overwritten.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. Verify that the file /home/student/grading/manage-files.txt contains the\r\nfollowing text.\r\n\r\n```bash\r\nTest AA\r\nTest BB\r\nTest CC\r\nTest DD\r\nTest EE\r\n```\r\n\r\n\r\n<br>\r\n4. Append the last three lines of /home/student/bin/manage-files to the file /home/\r\nstudent/grading/manage-files.txt. You must not overwrite any text already in the\r\nfile /home/student/grading/manage-files.txt.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Use the tail command to view the last three lines of the file /home/student/bin/\r\nmanage-files and append the output to /home/student/grading/manage-\r\nfiles.txt.\r\n\r\n```bash\r\n[student@serverb ~]$ tail -3 bin/manage-files >> grading/manage-\r\nfiles.txt\r\n```\r\n\r\nThe preceding command uses the double redirection symbol (>>) to append the\r\noutput to /home/student/grading/manage-files.txt so that the existing\r\ncontents in the file are preserved.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2.\r\nVerify that the file /home/student/grading/manage-files.txt contains the\r\nfollowing text.\r\n\r\n```bash\r\nTest AA\r\nTest BB\r\nTest CC\r\nTest DD\r\nTest EE\r\nTest HH\r\nTest II\r\nTest JJ\r\n```\r\n\r\n<br>\r\n5.\r\nCopy the /home/student/grading/manage-files.txt file to /home/student/\r\ngrading/manage-files-copy.txt.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1.\r\nUse the cd command to navigate to the directory /home/student/grading.\r\n\r\n```bash\r\n[student@serverb ~]$ cd grading/\r\n[student@serverb grading]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2.\r\nUse the cp command to copy the /home/student/grading/manage-files.txt\r\nfile to /home/student/grading/manage-files-copy.txt.\r\n\r\n```bash\r\n[student@serverb grading]$ cp manage-files.txt manage-files-copy.txt\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.3.\r\nNavigate back to the home directory of the user student.\r\n\r\n```bash\r\n[student@serverb grading]$ cd\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n6.\r\nEdit the file /home/student/grading/manage-files-copy.txt so that there should\r\nbe two sequential lines of text reading Test JJ.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1.\r\nUse the vim text editor to open the /home/student/grading/manage-files-\r\ncopy.txt file.\r\n\r\n```bash\r\n[student@serverb ~]$ vim grading/manage-files-copy.txt\r\n```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2.\r\nFrom the command mode in vim, scroll down to the line that has the Test JJ line of\r\ntext. Press the y key twice on your keyboard to copy the line of text and press the p\r\nkey to paste it below the cursor. Type :wq to save the changes and quit vim. Verify\r\nthat the /home/student/grading/manage-files-copy.txt file contains the\r\nfollowing text.\r\n\r\n```bash\r\nTest AA\r\nTest BB\r\nTest CC\r\nTest DD\r\nTest EE\r\nTest HH\r\nTest II\r\nTest JJ\r\nTest JJ\r\n```\r\n\r\nNotice that the preceding content includes two copies of the Test JJ line of text.\r\n\r\n<br>\r\n7. Edit the file /home/student/grading/manage-files-copy.txt so that the Test HH\r\nline of text must not exist in the file.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.1. Use the vim text editor to open the /home/student/grading/manage-files-\r\ncopy.txt file.\r\n\r\n```bash\r\n[student@serverb ~]$ vim grading/manage-files-copy.txt\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.2.\r\nFrom the command mode in vim, scroll down to the line that has the Test HH line\r\nof text. Press the d key twice on your keyboard to delete the line of text. Type :wq to\r\nsave the changes and quit vim. Verify that the /home/student/grading/manage-\r\nfiles-copy.txt file contains the following text.\r\n\r\n```bash\r\nTest AA\r\nTest BB\r\nTest CC\r\nTest DD\r\nTest EE\r\nTest II\r\nTest JJ\r\nTest JJ\r\n```\r\n\r\nNotice that the preceding content does not include the Test HH line of text.\r\n\r\n<br>\r\n8.\r\nEdit the file /home/student/grading/manage-files-copy.txt so that the line A new\r\nline exists between the line reading Test BB and the line reading Test CC.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.1.\r\nUse the vim text editor to open the /home/student/grading/manage-files-\r\ncopy.txt file.\r\n\r\n```bash\r\n[student@serverb ~]$ vim grading/manage-files-copy.txt\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.2.\r\nFrom the command mode in vim, scroll down to the line that has the Test CC line\r\nof text. Press the i key on the keyboard to switch to the insert mode while keeping\r\nthe cursor at the beginning of the Test CC line of text. From the insert mode, press\r\nthe Enter key on the keyboard to create a blank line above the cursor. Use the up\r\narrow to navigate to the blank line and create the A new line line of text. Press the\r\nEsc key on the keyboard to switch back to the command mode. Type :wq to save the\r\nchanges and quit vim. Verify that the /home/student/grading/manage-files-\r\ncopy.txt file contains the following text.\r\n\r\n```bash\r\nTest AA\r\nTest BB\r\nA new line\r\nTest CC\r\nTest DD\r\nTest EE\r\nTest II\r\nTest JJ\r\nTest JJ\r\n```\r\n\r\nNotice that the preceding content includes the A new line line of text.\r\n\r\n<br>\r\n9. Create a hard link named /home/student/hardlink to the file /home/student/\r\ngrading/grade1.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1. Use the ln command to create the hard link named /home/student/hardlink to\r\nthe file /home/student/grading/grade1. You will need to do this after creating\r\nthe empty file /home/student/grading/grade1 as specified above.\r\n\r\n```bash\r\n[student@serverb ~]$ ln grading/grade1 hardlink\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.2.\r\nUse the ls -l command to view the link count of the /home/student/grading/\r\ngrade1 file.\r\n\r\n```bash\r\n[student@serverb ~]$ ls -l grading/grade1\r\n-rw-rw-r--. 2 student student 0 Mar 6 16:45 grading/grade1\r\n```\r\n\r\n<br>\r\n10. Create a soft link named /home/student/softlink to the file /home/student/\r\ngrading/grade2.\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.1.\r\nUse the ln -s command to create the soft link named /home/student/softlink\r\nto the file /home/student/grading/grade2.\r\n\r\n```bash\r\n[student@serverb ~]$ ln -s grading/grade2 softlink\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.2.\r\nUse the ls -l command to view the properties of the /home/student/softlink\r\nsoft link.\r\n\r\n```bash\r\n[student@serverb ~]$ ls -l softlink\r\nlrwxrwxrwx. 1 student student 14 Mar 6 17:58 softlink -> grading/\r\ngrade2\r\n```\r\n\r\n<br>\r\n11.\r\nSave the output of a command that lists the contents of the /boot directory to the file /\r\nhome/student/grading/longlisting.txt. The output should be a \u201clong listing\u201d that\r\nincludes file permissions, owner and group owner, size, and modification date of each file.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.1.\r\nUse the ls -l command to view the contents of the directory /boot in the \u201clong\r\nlisting\u201d format and redirect the output to the file /home/student/grading/\r\nlonglisting.txt.\r\n\r\n```bash\r\n[student@serverb ~]$ ls -l /boot > grading/longlisting.txt\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.2.\r\nLog out of serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n```\r\n\r\n##Evaluation<br>\r\nOn workstation, run the lab rhcsa-rh124-review1 grade command to confirm success\r\nof this exercise.\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run lab rhcsa-rh124-review1 finish to complete the comprehensive\r\nreview. This script deletes the files and directories created during the start of the comprehensive\r\nreview and ensures that the environment on serverb is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review1 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 3, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 315, "fields": {"title": "LAB COMPREHENSIVE 2 : MANAGING USERS AND GROUPS , PERMISSIONS AND PROCESSES", "slug": "lab-comprehensive-2-managing-users-and-groups-permissions-and-processes", "content": "", "content_md": "In this review, you will manage user and group accounts, set permissions on files and directories, and manage processes.\r\n## OUTCOMES  \r\nYou should be able to:  \r\n- Manage users and groups.    \r\n- Set permissions on files and directories.  \r\n- Remove processes that are consuming too much CPU.  \r\n<br>\r\n## BEFORE YOU BEGIN  \r\nLog in to `workstation` as` student` using `student` as the password.  \r\nOn workstation, run `lab rhcsa-rh124-review2 start` to start the comprehensive review. This script runs a process that consumes the maximum CPU resources and creates the necessary files to set up the environment correctly.\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 start\r\n```  \r\n## INSTRUCTIONS  \r\nAccomplish the following tasks on serverb to complete the exercise.  <br><br>\r\n\u2022 Terminate the process that is currently using the most CPU time.    <br><br>\r\n\u2022 Create a new group called `database` that has the GID `50000`.  <br><br>\r\n\u2022 Create a new user called `dbuser1` that uses the group `database` as one of its secondary groups. The initial password of `dbuser1` should be set to `redhat`. Configure the user `dbuser1` to force a password change on its first login. The user `dbuser1` should be able to change its password after `10` days since the day of the password change. The password of `dbuser1 ` should expire in `30` days since the last day of the password change.  <br><br>\r\n\u2022 Configure the user `dbuser1` to use `sudo` to run any command as the superuser.  <br><br>\r\n\u2022 Configure the user `dbuser1` to have a default umask of `007`.  <br><br>\r\n\u2022 The permissions on `/home/student/grading/review2` should allow the group members of the `database` and the user `student` to access the directory and create contents in it. All other users should have read and execute permissions on the directory. Also, ensure that users are only allowed to delete files they own from `/home/student/grading/review2` and not files belonging to others.  <br><br>\r\n<br>\r\n**Evaluation**  \r\nOn workstation, run the `lab rhcsa-rh124-review2 grade` command to confirm success of this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 grade\r\n```\r\n<br>\r\n**Finish**  \r\nOn workstation, run `lab rhcsa-rh124-review2 finish` to complete the comprehensive review. This script terminates the process and deletes the files and directories created during the start of the comprehensive review and ensures that the environment on `serverb` is clean.  \r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 finish\r\n```", "order": 4, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 316, "fields": {"title": "SOLUTION COMPREHENSIVE 2 : MANAGING USERS AND GROUPS , PERMISSIONS AND PROCESSES", "slug": "solution-comprehensive-2-managing-users-and-groups-permissions-and-processes", "content": "", "content_md": "In this review, you will manage user and group accounts, set permissions on files and directories, and manage processes.\r\n## OUTCOMES  \r\nYou should be able to:  \r\n- Manage users and groups.    \r\n- Set permissions on files and directories.  \r\n- Remove processes that are consuming too much CPU.  \r\n<br>\r\n## BEFORE YOU BEGIN  \r\nLog in to `workstation` as` student` using `student` as the password.  \r\nOn workstation, run `lab rhcsa-rh124-review2 start` to start the comprehensive review. This script runs a process that consumes the maximum CPU resources and creates the necessary files to set up the environment correctly.\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 start\r\n```  \r\n## INSTRUCTIONS  \r\nAccomplish the following tasks on serverb to complete the exercise.  <br><br>\r\n1. Terminate the process that is currently using the most CPU time.    \r\n1.1. From workstation, open an SSH session to `serverb` as `student`.\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```  \r\n1.2. Use the top command to view the real-time system status.\r\n```bash\r\n[student@serverb ~]$ top\r\n```  \r\n1.3. From the interactive interface of `top`, pay attention to the `%CPU` column and confirm that there is a process called dd, consuming the most CPU resources.\r\n```bash\r\n...output omitted...\r\n PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+\r\n COMMAND\r\n2303 student 20 0 217048 944 876 R 99.7 0.1 100:11.64 dd\r\n...output omitted...\r\n```\r\nNotice the process dd with the PID `2303` in the preceding output, which is consuming the majority of CPU resources, at `99.7%`. The PID and the percentage of CPU resource consumption may vary in your system.  \r\n  \r\n1.4. From the interactive interface of top, type k to kill the process dd with PID 2303, as you determined in the preceding step. If the default PID shown in the prompt matches that of the process consuming the majority of CPU resources, press the Enter key on the keyboard. If it does not match, specify the PID interactively.\r\n```bash\r\n...output omitted...\r\nPID to signal/kill [default pid = 2303] Enter\r\n...output omitted...\r\n```\r\n1.5. Use the default signal SIGTERM to terminate the process.\r\n```bash\r\n...output omitted...\r\nSend pid 2833 signal [15/sigterm] Enter\r\n...output omitted...\r\n\r\n```\r\n1.6. From the interactive interface, press the q key on the keyboard to quit top.\r\n<br><br>\r\n2. Create a new group called `database` that has the GID `50000`.  \r\n2.1. Switch to the user `root`.\r\n```bash\r\n[student@serverb ~]$ sudo su -\r\n[sudo] password for student: student\r\n[root@serverb ~]#\r\n```\r\n2.2. Use the `groupadd` command to create a new group called `database` with GID `50000`.\r\n```bash\r\n[root@serverb ~]# groupadd -g 50000 database\r\n```\r\n<br><br>\r\n3. Create a new user called `dbuser1` that uses the group `database` as one of its secondary groups. The initial password of `dbuser1` should be set to `redhat`. Configure the user `dbuser1` to force a password change on its first login. The user `dbuser1` should be able to change its password after `10` days since the day of the password change. The password of `dbuser1 ` should expire in `30` days since the last day of the password change.    \r\n3.1. Use the useradd command to create a new user called `dbuser1` that uses the group `database` as one of its secondary groups.\r\n```bash\r\n[root@serverb ~]# useradd -G database dbuser1\r\n```\r\n3.2. Use the passwd command to set the password of dbuser1 to redhat.  \r\n```bash\r\n[root@serverb ~]# passwd dbuser1\r\nChanging password for user dbuser1.\r\nNew password: redhat\r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: redhat\r\npasswd: all authentication tokens updated successfully.\r\n```\r\n3.3. Use the `chage` command to force `dbuser1` to change its password on first login.\r\n```bash\r\n[root@serverb ~]# chage -d 0 dbuser1\r\n```\r\n3.4. Use the `chage` command to set the minimum age of the password of `dbuser1` to 10 days.\r\n```bash\r\n[root@serverb ~]# chage -m 10 dbuser1\r\n```\r\n3.5. Use the `chage` command to set the maximum age of the password of `dbuser1` to 30 days.\r\n```bash\r\n[root@serverb ~]# chage -M 30 dbuser1\r\n```\r\n<br><br>\r\n4. Configure the user `dbuser1` to use `sudo` to run any command as the superuser.  \r\n4.1. Create the file `/etc/sudoers.d/dbuser1` to configure `dbuser1` so that the user can use `sudo` to run any command as the superuser. You may use the `vim /etc/sudoers.d/dbuser1` command to create the file. The `/etc/sudoers.d/dbuser1` should contain the following content.\r\n```bash\r\ndbuser1 ALL=(ALL) ALL\r\n```\r\n\r\n<br><br>\r\n5. Configure the user `dbuser1` to have a default umask of `007`.  \r\n5.1. Switch to the user `dbuser1`.\r\n```bash\r\n[root@serverb ~]# su - dbuser1\r\n[dbuser1@serverb ~]$\r\n```\r\n5.2. Append the line umask `007` to the files `/home/dbuser1/.bash_profile` and `/home/dbuser1/.bashrc`.\r\n```bash\r\n[dbuser1@serverb ~]$ echo \"umask 007\" >> .bash_profile\r\n[dbuser1@serverb ~]$ echo \"umask 007\" >> .bashrc\r\n```\r\n5.3. Exit the dbuser1 user's shell.\r\n```bash\r\n[dbuser1@serverb ~]$ exit\r\nlogout\r\n[root@serverb ~]#\r\n```  \r\n<br><br>\r\n6. The permissions on `/home/student/grading/review2` should allow the group members of the `database` and the user `student` to access the directory and create contents in it. All other users should have read and execute permissions on the directory. Also, ensure that users are only allowed to delete files they own from `/home/student/grading/review2` and not files belonging to others.  \r\n6.1. Use the mkdir command to create /home/student/grading/review2.  \r\n```bash\r\n[root@serverb ~]# mkdir /home/student/grading/review2\r\n```\r\n6.2. On the /home/student/grading/review2, use the chown command to set student and database as the owning user and group respectively.  \r\n```bash\r\n[root@serverb ~]# chown student:database /home/student/grading/review2\r\n```\r\n6.3. Use the chmod command to apply the SetGID special permission on `/home/ student/grading/review2`.  \r\n```bash\r\n[root@serverb ~]# chmod g+s /home/student/grading/review2\r\n```\r\n6.4. Use the chmod command to apply the permission mode 775 on `/home/student/grading/review2`.  \r\n```bash\r\n[root@serverb ~]# chmod 775 /home/student/grading/review2\r\n```\r\n6.5. Use the chmod command to apply the stickybit special permission on `/home/student/grading/review2`.  \r\n```bash\r\n[root@serverb ~]# chmod o+t /home/student/grading/review2\r\n```\r\n6.6. Exit the root user's shell.  \r\n```bash\r\n[root@serverb ~]# exit\r\nlogout\r\n[student@serverb ~]$\r\n```\r\n6.7. Log out of serverb.\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$ \r\n```\r\n<br><br>\r\n\r\n<br>\r\n**Evaluation**  \r\nOn workstation, run the `lab rhcsa-rh124-review2 grade` command to confirm success of this exercise.  \r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 grade\r\n```\r\n<br>\r\n**Finish**  \r\nOn workstation, run `lab rhcsa-rh124-review2 finish` to complete the comprehensive review. This script terminates the process and deletes the files and directories created during the start of the comprehensive review and ensures that the environment on `serverb` is clean.  \r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review2 finish\r\n```", "order": 5, "is_visible": false, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 317, "fields": {"title": "LAB COMPREHENSIVE 3 : CONFIGURING AND MANAGING A SERVER", "slug": "lab-configuring-and-managing-a-server", "content": "", "content_md": "In this review, you will configure, secure, and use SSH service to access remote machine,\r\nconfigure rsyslog service, archive local files, transfer local files to remote machine, and\r\nmanage packages using yum.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:<br>\r\n\u2022 Create a new SSH key pair.\r\n\r\n\u2022 Disable SSH logins as root user.\r\n\r\n\u2022 Disable SSH logins using password.\r\n\r\n\u2022 Update the time zone of a server.\r\n\r\n\u2022 Install packages and package modules using yum.\r\n\r\n\u2022 Archive local files for backup.\r\n\r\n\u2022 Transfer local files to remote machine.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run lab rhcsa-rh124-review3 start to start the comprehensive\r\nreview. This script creates the necessary files to set up the environment correctly.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 start\r\n```\r\n\r\n##INSTRUCTIONS<br>\r\nAccomplish the following tasks on serverb to complete the exercise.\r\n\r\n\u2022 Generate SSH keys for the user student on serverb. Do not protect the private key\r\nwith a passphrase.\r\n\r\n\u2022 On servera, configure the user student to accept logins authenticated by the SSH\r\nkey pair you created for the user student on serverb. The user student on serverb\r\nshould be able to log in to servera using SSH without entering a password.\r\n\r\n\u2022 On serverb, configure the sshd service to prevent users from logging in as root via\r\nSSH.\r\n\r\n\u2022 On serverb, configure the sshd service to prevent users from using their passwords to\r\nlog in. Users should still be able to authenticate logins using an SSH key pair.\r\n\r\n\u2022 Create a tar archive named /tmp/log.tar containing the contents of /var/log on\r\nserverb. Remotely transfer the tar archive to /tmp directory on servera, authenticating\r\nas student using the student user\u2019s private key of the SSH key pair.\r\n\r\n\u2022 Configure the rsyslog service on serverb to log all messages it receives that have\r\nthe priority level of debug or higher to the file /var/log/grading-debug. This\r\nconfiguration should be set in an /etc/rsyslog.d/grading-debug.conf file, which\r\nyou need to create.\r\n\r\n\u2022 Install the zsh package, available in the BaseOS repository, on serverb.\r\n\r\n\u2022 Enable the default module stream for the module python36 and install all provided\r\npackages from that stream on serverb.\r\n\r\n\u2022 Set the time zone of serverb to Asia/Kolkata.\r\n\r\n##Evaluation<br>\r\nOn workstation, run the lab rhcsa-rh124-review3 grade command to confirm success\r\nof this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run lab rhcsa-rh124-review3 finish to complete the comprehensive\r\nreview. This script deletes the files and directories created during the start of the comprehensive review and ensures that the environment on serverb is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 6, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 318, "fields": {"title": "SOLUTION COMPREHENSIVE 3: CONFIGURING AND MANAGING A SERVER", "slug": "solution-configuring-and-managing-a-server", "content": "", "content_md": "In this review, you will configure, secure, and use SSH service to access remote machine,\r\nconfigure rsyslog service, archive local files, transfer local files to remote machine, and\r\nmanage packages using yum.\r\n\r\n##OUTCOMES<br>\r\nYou should be able to:\r\n\r\n\u2022 Create a new SSH key pair.\r\n\r\n\u2022 Disable SSH logins as root user.\r\n\r\n\u2022 Disable SSH logins using password.\r\n\r\n\u2022 Update the time zone of a server.\r\n\r\n\u2022 Install packages and package modules using yum.\r\n\r\n\u2022 Archive local files for backup.\r\n\r\n\u2022 Transfer local files to remote machine.\r\n\r\n##BEFORE YOU BEGIN<br>\r\nLog in to workstation as student using student as the password.\r\n\r\nOn workstation, run lab rhcsa-rh124-review3 start to start the comprehensive\r\nreview. This script creates the necessary files to set up the environment correctly.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 start\r\n```\r\n\r\n##INSTRUCTIONS<br>\r\nAccomplish the following tasks on serverb to complete the exercise.\r\n\r\n\u2022 Generate SSH keys for the user student on serverb. Do not protect the private key\r\nwith a passphrase.\r\n\r\n\u2022 On servera, configure the user student to accept logins authenticated by the SSH\r\nkey pair you created for the user student on serverb. The user student on serverb\r\nshould be able to log in to servera using SSH without entering a password.\r\n\r\n\u2022 On serverb, configure the sshd service to prevent users from logging in as root via\r\nSSH.\r\n\r\n\u2022 On serverb, configure the sshd service to prevent users from using their passwords to\r\nlog in. Users should still be able to authenticate logins using an SSH key pair.\r\n\r\n\u2022 Create a tar archive named /tmp/log.tar containing the contents of /var/log on\r\nserverb. Remotely transfer the tar archive to /tmp directory on servera, authenticating\r\nas student using the student user\u2019s private key of the SSH key pair.\r\n\r\n\u2022 Configure the rsyslog service on serverb to log all messages it receives that have\r\nthe priority level of debug or higher to the file /var/log/grading-debug. This\r\nconfiguration should be set in an /etc/rsyslog.d/grading-debug.conf file, which\r\nyou need to create.\r\n\r\n\u2022 Install the zsh package, available in the BaseOS repository, on serverb.\r\n\r\n\u2022 Enable the default module stream for the module python36 and install all provided\r\npackages from that stream on serverb.\r\n\r\n\u2022 Set the time zone of serverb to Asia/Kolkata.\r\n\r\n<br>\r\n1.\r\nGenerate SSH keys for the user student on serverb. Do not protect the private key with a\r\npassphrase.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1.\r\nFrom workstation, open an SSH session to serverb as student.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2.\r\nUse the ssh-keygen command to generate the SSH keys for the user student. The\r\nprivate and public key files should be named /home/student/.ssh/review3_key\r\nand /home/student/.ssh/review3_key.pub respectively.\r\n\r\n![](/media/markdownx/aa4a3b3d-dc56-4bfd-8065-35c7f96340b3.png)\r\n\r\n<br>\r\n2.\r\nOn servera, configure the user student to accept logins authenticated by the SSH key\r\npair you created for the user student on serverb. The user student on serverb should\r\nbe able to log in to servera using SSH without entering a password.\r\n\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1.\r\nUse the ssh-copy-id command to export the public key /home/student/.ssh/\r\nreview3_key.pub from servera to serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ ssh-copy-id -i .ssh/review3_key.pub\r\nstudent@servera\r\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \".ssh/\r\nreview3.pub\"\r\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s),\r\nto filter out any that are already installed\r\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you\r\nare prompted now it is to install the new keys\r\nstudent@servera's password: student\r\nNumber of key(s) added: 1\r\nNow try logging into the machine, with:\r\n\"ssh 'student@servera'\"\r\nand check to make sure that only the key(s) you wanted were added.\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2.\r\nUse the ssh command to confirm that you can log in to servera from serverb as\r\nstudent using the SSH private key /home/student/.ssh/review3_key without\r\nbeing prompted for the password.\r\n\r\n```bash\r\n[student@serverb ~]$ ssh -i .ssh/review3_key student@servera\r\n...output omitted...\r\n[student@servera ~]$\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.3.\r\nLog out of servera.\r\n\r\n```bash\r\n[student@servera ~]$ exit\r\nlogout\r\nConnection to servera closed.\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n3.\r\nOn serverb, configure the sshd service to prevent users from logging in as root with SSH.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1. Set the parameter PermitRootLogin to no in the /etc/ssh/sshd_config.\r\nYou may use the command sudo vim /etc/ssh/sshd_config to edit the\r\nconfiguration file.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2. Reload the sshd service.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo systemctl reload sshd.service\r\n```\r\n\r\n<br>\r\n4.\r\nOn serverb, configure the sshd service to prevent users from using their passwords to log\r\nin. Users should still be able to authenticate logins using their private key of the SSH key pair.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1. Set the parameter PasswordAuthentication to no in the /etc/ssh/\r\nsshd_config. You may use the command sudo vim /etc/ssh/sshd_config to\r\nedit the configuration file.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2. Use the sudo systemctl command to reload the sshd service.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo systemctl reload sshd.service\r\n```\r\n\r\n<br>\r\n5.\r\nCreate a tar archive named /tmp/log.tar containing the contents of /var/log\r\non serverb. Remotely transfer the tar archive to the directory /tmp on servera,\r\nauthenticating as student using /home/student/.ssh/review3_key as the student\r\nuser\u2019s private key of the SSH key pair for authentication.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.1.\r\nUse the sudo tar command to create an archive named /tmp/log.tar as the\r\nsuperuser containing the contents of /var/log.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo tar -cvf /tmp/log.tar /var/log\r\n[sudo] password for student: student\r\n...output omitted...\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2.\r\nUse the scp command to remotely transfer the archive file /tmp/log.tar to the\r\ndirectory /tmp on servera. Specify /home/student/.ssh/review3_key as the\r\nprivate key of the SSH key pair.\r\n\r\n![](/media/markdownx/518c3a1c-9974-41af-b470-b1fa3c0adec8.png)\r\n\r\n<br>\r\n6.\r\nConfigure the rsyslog service on serverb to log all messages it receives that have the\r\npriority level of debug or higher to the file /var/log/grading-debug. This configuration\r\nshould be set in an /etc/rsyslog.d/grading-debug.conf file which you should create.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.1.\r\nCreate the file /etc/rsyslog.d/grading-debug.conf with the following\r\ncontent. You may use the sudo vim /etc/rsyslog.d/grading-debug.conf to\r\ncreate the file.\r\n\r\n```bash\r\n*.debug /var/log/grading-debug\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.2.\r\nUse the sudo systemctl command to restart the rsyslog service.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo systemctl restart rsyslog.service\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.3.\r\nUse the logger command to generate the log message Debug Testing having\r\npriority debug.\r\n\r\n```bash\r\n[student@serverb ~]$ logger -p debug Debug Testing\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.4.\r\nConfirm that the log message Debug Testing is saved in the /var/log/grading-\r\ndebug file.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo tail /var/log/grading-debug\r\n...output omitted...\r\nMar 12 09:55:23 serverb student[32383]: Debug Testing\r\n```\r\n\r\n<br>\r\n7.\r\nUse the sudo yum command to install the zsh package, available in the BaseOS repository,\r\non serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo yum install zsh\r\n...output omitted...\r\nIs this ok [y/N]: y\r\n...output omitted...\r\nInstalled:\r\nzsh-5.5.1-6.el8.x86_64\r\nComplete!\r\n```\r\n\r\n<br>\r\n8.\r\nUse the yum command to enable the default module stream for the module python36 and\r\ninstall all the provided packages from that stream, on serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo yum module install python36\r\n...output omitted...\r\nIs this ok [y/N]: y\r\n...output omitted...\r\nInstalled:\r\npython36-3.6.6-18.module+el8+2339+1a6691f8.x86_64\r\npip-9.0.3-13.el8.noarch\r\npython3-\r\nComplete!\r\n```\r\n\r\n<br>\r\n9. Set the timezone of serverb to Asia/Kolkata.\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1.\r\nUse the sudo timedatectl command to set the timezone of serverb to Asia/\r\nKolkata.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo timedatectl set-timezone Asia/Kolkata\r\n```\r\n\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.2.\r\nLog out of serverb.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Evaluation<br>\r\nOn workstation, run the lab rhcsa-rh124-review3 grade command to confirm success\r\nof this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 grade\r\n```\r\n\r\n##Finish<br>\r\nOn workstation, run lab rhcsa-rh124-review3 finish to complete the comprehensive\r\nreview. This script deletes the files and directories created during the start of the comprehensive\r\nreview and ensures that the environment on serverb is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review3 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 7, "is_visible": false, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 319, "fields": {"title": "LAB COMPREHENSIVE 5: MOUNTING FILESYSTEMS AND FINDING FILES", "slug": "lab-comprehensive-5-mounting-filesystems-and-finding-files", "content": "", "content_md": "In this review, you will mount a file system and locate files based on different criteria.\r\n\r\n##OUTCOMES\r\n\r\nYou should be able to:\r\n\r\n\u2022 Mount an existing file system.\r\n\r\n\u2022 Find files on the basis of the file name, permissions and size.\r\n\r\n##BEFORE YOU BEGIN\r\n\r\nLog in to workstation as `student` using `student` as the password.\r\n\r\nOn workstation, run **lab rhcsa-rh124-review5 start** to start the comprehensive\r\nreview. This script creates the necessary file system, user accounts and group accounts.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 start\r\n```\r\n\r\n##INSTRUCTIONS\r\n\r\nAccomplish the following tasks on `serverb` to complete the exercise.\r\n\r\n\u2022 On `serverb`, a block device containing the `XFS` file system exists but is not yet mounted.\r\nDetermine the block device and mount it on the **/review5-disk** directory. Create the **/\r\nreview5-disk** directory, if necessary.\r\n\r\n\u2022 On `serverb`, locate the file called **review5-path**. Create a file named **/review5-\r\ndisk/review5.txt** that contains a single line consisting of the absolute path to the\r\n**review5** file.\r\n\r\n\u2022 On `serverb`, locate all the files having contractor1 and contractor as the owning\r\nuser and group, respectively. The files must also have the octal permissions of **640**. Save\r\nthe list of these files in **/review5-disk/review5-perms.txt**.\r\n\r\n\u2022 On `serverb`, locate all files 100 bytes in size. Save the absolute paths of these files in **/\r\nreview5-disk/review5-size.txt**.\r\n\r\n##Evaluation\r\n\r\nOn workstation, run the **lab rhcsa-rh124-review5 grade** command to confirm success\r\nof this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 grade\r\n```\r\n\r\n##Finish\r\n\r\nOn workstation, run **lab rhcsa-rh124-review5 finish** to complete the comprehensive\r\nreview. This script deletes the file system, user accounts, and group accounts created during the start of the comprehensive review and ensures that the environment on `serverb` is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 10, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.section", "pk": 320, "fields": {"title": "SOLUTION COMPREHENSIVE 5: MOUNTING FILESYSTEMS AND FINDING FILES", "slug": "solution-comprehensive-5-mounting-filesystems-and-finding-files", "content": "", "content_md": "In this review, you will mount a file system and locate files based on different criteria.\r\n\r\n##OUTCOMES\r\n\r\nYou should be able to:\r\n\r\n\u2022 Mount an existing file system.\r\n\r\n\u2022 Find files on the basis of the file name, permissions and size.\r\n\r\n##BEFORE YOU BEGIN\r\n\r\nLog in to `workstation` as `student` using `student` as the password.\r\n\r\nOn `workstation`, run **lab rhcsa-rh124-review5 start** to start the comprehensive\r\nreview. This script creates the necessary file system, user accounts and group accounts.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 start\r\n```\r\n\r\n##INSTRUCTIONS\r\n\r\nAccomplish the following tasks on `serverb` to complete the exercise.\r\n\r\n\u2022 On `serverb`, a block device containing the `XFS` file system exists but is not yet mounted.\r\nDetermine the block device and mount it on the **/review5-disk** directory. Create the **/\r\nreview5-disk** directory, if necessary.\r\n\r\n\u2022 On `serverb`, locate the file called **review5-path**. Create a file named **/review5-\r\ndisk/review5.txt** that contains a single line consisting of the absolute path to the\r\n**review5** file.\r\n\r\n\u2022 On `serverb`, locate all the files having `contractor1` and `contractor` as the owning\r\nuser and group, respectively. The files must also have the octal permissions of **640**. Save\r\nthe list of these files in **/review5-disk/review5-perms.txt**.\r\n\r\n\u2022 On `serverb`, locate all files 100 bytes in size. Save the absolute paths of these files in **/\r\nreview5-disk/review5-size.txt**.\r\n\r\n<br>\r\n1. On serverb, mount the idle block device containing the `XFS` file system on the **/review5-\r\ndisk** directory.\r\n\r\n<br>\r\n&emsp;1.1. From `workstation`, open an SSH session to `serverb` as `student`.\r\n\r\n```bash\r\n[student@workstation ~]$ ssh student@serverb\r\n...output omitted...\r\n[student@serverb ~]$\r\n```\r\n\r\n<br>\r\n&emsp;1.2.\r\nUse the **lsblk -fs** command to determine the idle block device containing the `XFS`\r\nfile system.\r\n\r\n```bash\r\n[student@serverb ~]$ lsblk -fs\r\nNAME  FSTYPE  LABEL  UUID                                   MOUNTPOINT\r\n...output omitted...\r\nvdb1  xfs            3d97c5ef-23e7-4c1c-a9be-d5c475b3d0d5\r\n\u2514\u2500vdb\r\n...output omitted...\r\n```\r\n\r\nFrom the preceding output, note that the `vdb1` block device contains the `XFS` file\r\nsystem, which is not mounted on any directory.\r\n\r\n<br>\r\n&emsp;1.3.\r\nUse the **sudo mkdir** command to create the **/review5-disk** directory as the\r\nsuperuser. When the **sudo** command prompts you for a password, give the password\r\nstudent.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo mkdir /review5-disk\r\n[sudo] password for student: student\r\n```\r\n\r\n<br>\r\n&emsp;1.4.\r\nUse the **sudo mount** command to mount the vdb1 block device on the **/review5-\r\ndisk** directory as the superuser.\r\n\r\n```bash\r\n[student@serverb ~]$ sudo mount /dev/vdb1 /review5-disk\r\n```\r\n\r\n<br>\r\n&emsp;1.5.\r\nVerify that the `vdb1` block device is successfully mounted on the **/review5-disk**\r\ndirectory.\r\n\r\n```bash\r\n[student@serverb ~]$ df -Th\r\nFilesystem  Type  Size  Used  Avail  Use%  Mounted on\r\n...output omitted...\r\n/dev/vdb1   xfs   2.0G  47M   2.0G   3%    /review5-disk\r\n...output omitted...\r\n```\r\n\r\n<br>\r\n2. On `serverb`, locate the file named **review5-path**. Record its absolute path in the **/\r\nreview5-disk/review5-path.txt** text file.\r\n\r\n<br>\r\n&emsp;2.1.\r\nUse the **find** command to locate the file called **review5-path**. Redirect all the\r\nerrors of the **find** command to **/dev/null**. This redirection allows you to discard any\r\nerror from the output of the **find** command.\r\n\r\n```bash\r\n[student@serverb ~]$ find / -iname review5-path 2>/dev/null\r\n/var/tmp/review5-path\r\n```\r\n\r\nNote the absolute path to the **review5-path** file from the preceding output.\r\n\r\n<br>\r\n&emsp;2.2.\r\nCreate the **/review5-disk/review5-path.txt** text file. Record the absolute\r\npath to the **review5-path** file, as determined in the preceding step, in the **/\r\nreview5-disk/review5-path.txt** text file. You may use the **sudo vim /\r\nreview5-disk/review5-path.txt** command to create the text file. Type **:wq!**\r\nfrom the command mode in **vim** to save the changes and quit from the file. The\r\nfollowing output shows the content of the **/review5-disk/review5-path.txt**\r\ntext file.\r\n\r\n```bash\r\n/var/tmp/review5-path\r\n```\r\n\r\n<br>\r\n3.\r\nOn `serverb`, locate all files having `contractor1` and contractor as the owning user\r\nand group, respectively. The files must also have the octal permissions of `640`. Record the\r\nabsolute paths to all of these files in the **/review5-disk/review5-perms.txt text** file.\r\n\r\n<br>\r\n&emsp;3.1.\r\nUse the **-user, -group, -perm** options with the **find** command to locate all the\r\nfiles that have the owning user, owning group and octal permissions of `contractor1`,\r\n`contractor` and `640`, respectively. Redirect all the errors of the **find** command to **/\r\ndev/null**.\r\n\r\n```bash\r\n[student@serverb ~]$ find / -user contractor1 \\\r\n-group contractor \\\r\n-perm 640 2>/dev/null\r\n/usr/share/review5-perms\r\n```\r\n\r\nNote the absolute path to the **review5-perms** file from the preceding output. The\r\n**/usr/share/review5-perms** file is the only one that meets the criteria of the\r\npreceding **find** command.\r\n\r\n<br>\r\n&emsp;3.2.\r\nCreate the **/review5-disk/review5-perms.txt** text file. Record the absolute\r\npath to the only file (**review5-perms**) that has the owning user, owning group\r\nand octal permissions of `contractor1`, `contractor` and `640`, respectively, as\r\ndetermined in the preceding step, in the **/review5-disk/review5-perms.txt**\r\ntext file. You may use the **sudo vim /review5-disk/review5-perms.txt**\r\ncommand to create the text file. Type **:wq!** from the command mode in **vim** to save\r\nthe changes and quit from the file. The following output shows the content of the **/\r\nreview5-disk/review5-perms.txt** text file.\r\n\r\n```bash\r\n/usr/share/review5-perms\r\n```\r\n\t\t\t\r\n<br>\r\n4.\r\nOn `serverb`, locate all the files of 100 bytes in size. Record the absolute paths to all of these\r\nfiles in the **/review5-disk/review5-size.txt**.\r\n\r\n<br>\r\n&emsp;4.1.\r\nUse the **-size** option with the **find** command to locate all the files that are of\r\n100 bytes in size. Redirect all the errors of the **find** command to **/dev/null**.\r\n\r\n```bash\r\n[student@serverb ~]$ find / -size 100c 2>/dev/null\r\n/dev/disk\r\n/run/initramfs\r\n/etc/lvm\r\n/etc/audit\r\n/etc/sos.conf\r\n/usr/lib/python3.6/site-packages/dnf/conf\r\n/usr/lib/python3.6/site-packages/ptyprocess\r\n/usr/share/licenses/ethtool/LICENSE\r\n/usr/share/doc/libuser\r\n/usr/share/doc/python3-cryptography/docs/x509\r\n/usr/share/doc/python3-jinja2/ext\r\n/usr/share/doc/plymouth/AUTHORS\r\n/usr/share/vim/vim80/macros/maze/main.aap\r\n/usr/libexec/plymouth\r\n/opt/review5-size\r\n```\r\n\r\nThe preceding output may vary in your system depending on the number of files\r\nof 100 bytes in size in your system. Note the absolute paths to all the files from the\r\npreceding output.\r\n\r\n<br>\r\n&emsp;4.2.\r\nCreate the **/review5-disk/review5-size.txt** text file. Record the absolute\r\npaths to all the files of 100 bytes in size, as determined in the preceding step, in the\r\n**/review5-disk/review5-size.txt** text file. You may use the **sudo vim /\r\nreview5-disk/review5-size.txt** command to create the text file. Type **:wq!**\r\nfrom the command mode in **vim** to save the changes and quit from the file. The **/\r\nreview5-disk/review5-size.txt** text file should contain the absolute path to\r\nthe **review5-size** file among other paths.\r\n\r\n```bash\r\n...output omitted...\r\n/opt/review5-size\r\n...output omitted...\r\n```\r\n\r\n<br>\r\n&emsp;4.3.\r\nLog out of `serverb`.\r\n\r\n```bash\r\n[student@serverb ~]$ exit\r\nlogout\r\nConnection to serverb closed.\r\n[student@workstation ~]$\r\n```\r\n\r\n##Evaluation\r\n\r\nOn `workstation`, run the **lab rhcsa-rh124-review5 grade** command to confirm success\r\nof this exercise.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 grade\r\n```\r\n\r\n##Finish\r\n\r\nOn `workstation`, run lab rhcsa-rh124-review5 finish to complete the comprehensive\r\nreview. This script deletes the file system, user accounts, and group accounts created during the\r\nstart of the comprehensive review and ensures that the environment on `serverb` is clean.\r\n\r\n```bash\r\n[student@workstation ~]$ lab rhcsa-rh124-review5 finish\r\n```\r\n\r\nThis concludes the comprehensive review.", "order": 11, "is_visible": true, "is_task": false, "module": 43, "draft": false, "files": []}}, {"model": "courses.taskuploadsettings", "pk": 7, "fields": {"section": 7, "instruction": "<p>test tugas upload file</p>", "instruction_md": "kumulkan tugas\r\n\r\nya ya\r\nasdf\r\n```\r\naksdlkfas\r\n```\r\n\r\n> yang harus dikumpulkan adalah\r\n> jadi begini\r\n>coba aja yaa nanti gmn gmn nya\r\n\r\n* 1 gambar 1\r\n* 2 gambar 2\r\n* 3 gambar 3", "max_size": 1}}, {"model": "courses.taskuploadsettings", "pk": 8, "fields": {"section": 8, "instruction": "<p>upload</p>", "instruction_md": "", "max_size": 1}}, {"model": "courses.taskuploadsettings", "pk": 9, "fields": {"section": 6, "instruction": "<p>coba juga</p>", "instruction_md": "### Kumpulkan tugas\r\n\r\n> yang harus dikumpulkan adalah\r\n> jadi begini\r\n>coba aja yaa nanti gmn gmn nya\r\n\r\n* 1 gambar 1\r\n* 2 gambar 2\r\n* 3 gambar 3", "max_size": 1}}, {"model": "courses.taskuploadsettings", "pk": 10, "fields": {"section": 14, "instruction": "", "instruction_md": "### Django\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n> \r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\n> id sem consectetuer libero luctus adipiscing.\r\n\r\n```python\r\ndef fungsi():\r\n    pass\r\n```\r\n\r\n![](/media/markdownx/04e65411-ef17-4536-a3f4-b84295005c36.png)", "max_size": 1}}, {"model": "courses.batch", "pk": 6, "fields": {"batch": "1", "course": 4, "start_date": "2020-04-15", "end_date": "2020-04-30", "is_active": true, "link_group": "http://tes.com"}}, {"model": "courses.batch", "pk": 7, "fields": {"batch": "2", "course": 4, "start_date": "2020-05-01", "end_date": "2020-05-31", "is_active": true, "link_group": "http://tes.com"}}, {"model": "courses.batch", "pk": 8, "fields": {"batch": "1", "course": 5, "start_date": "2020-06-08", "end_date": "2020-07-31", "is_active": true, "link_group": "http://tes.com"}}, {"model": "courses.enrollment", "pk": 15, "fields": {"user": 7, "course": 4, "batch": 6, "status": 100, "allowed_access": true, "date_enrollment": "2020-04-15", "finishing_date": "2020-05-14"}}, {"model": "courses.enrollment", "pk": 16, "fields": {"user": 4, "course": 4, "batch": 6, "status": 2, "allowed_access": true, "date_enrollment": "2020-04-16", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 19, "fields": {"user": 5, "course": 4, "batch": 7, "status": 2, "allowed_access": true, "date_enrollment": "2020-04-23", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 20, "fields": {"user": 9, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 21, "fields": {"user": 10, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 22, "fields": {"user": 11, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 23, "fields": {"user": 12, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 24, "fields": {"user": 13, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 25, "fields": {"user": 14, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 26, "fields": {"user": 15, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 27, "fields": {"user": 16, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 28, "fields": {"user": 17, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 29, "fields": {"user": 18, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 30, "fields": {"user": 19, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 31, "fields": {"user": 20, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 32, "fields": {"user": 21, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 33, "fields": {"user": 22, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 34, "fields": {"user": 23, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 35, "fields": {"user": 24, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 36, "fields": {"user": 25, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 37, "fields": {"user": 26, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 38, "fields": {"user": 27, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 39, "fields": {"user": 28, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 40, "fields": {"user": 29, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 41, "fields": {"user": 30, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 42, "fields": {"user": 31, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 43, "fields": {"user": 32, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 44, "fields": {"user": 33, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 45, "fields": {"user": 34, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 46, "fields": {"user": 35, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 47, "fields": {"user": 36, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 48, "fields": {"user": 37, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 49, "fields": {"user": 38, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 50, "fields": {"user": 39, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 51, "fields": {"user": 40, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 52, "fields": {"user": 41, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 53, "fields": {"user": 42, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 54, "fields": {"user": 43, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 55, "fields": {"user": 44, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 56, "fields": {"user": 45, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 57, "fields": {"user": 46, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 58, "fields": {"user": 47, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 59, "fields": {"user": 48, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 60, "fields": {"user": 49, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 61, "fields": {"user": 50, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 62, "fields": {"user": 51, "course": 4, "batch": 6, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 63, "fields": {"user": 52, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 64, "fields": {"user": 53, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 65, "fields": {"user": 54, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 66, "fields": {"user": 55, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 67, "fields": {"user": 56, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 68, "fields": {"user": 57, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 69, "fields": {"user": 58, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 70, "fields": {"user": 59, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 71, "fields": {"user": 60, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 72, "fields": {"user": 61, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 73, "fields": {"user": 62, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 74, "fields": {"user": 63, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 75, "fields": {"user": 64, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 76, "fields": {"user": 65, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 77, "fields": {"user": 66, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 78, "fields": {"user": 67, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 79, "fields": {"user": 68, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 80, "fields": {"user": 69, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 81, "fields": {"user": 70, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 82, "fields": {"user": 71, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 83, "fields": {"user": 72, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 84, "fields": {"user": 73, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 85, "fields": {"user": 74, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 86, "fields": {"user": 75, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 87, "fields": {"user": 76, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 88, "fields": {"user": 77, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 89, "fields": {"user": 78, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 90, "fields": {"user": 79, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 91, "fields": {"user": 80, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 92, "fields": {"user": 81, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 93, "fields": {"user": 82, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 94, "fields": {"user": 83, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 95, "fields": {"user": 84, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 96, "fields": {"user": 85, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 97, "fields": {"user": 86, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 98, "fields": {"user": 87, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 99, "fields": {"user": 88, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 100, "fields": {"user": 89, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 101, "fields": {"user": 90, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 102, "fields": {"user": 91, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 103, "fields": {"user": 92, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 104, "fields": {"user": 93, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 105, "fields": {"user": 94, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 106, "fields": {"user": 95, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 107, "fields": {"user": 96, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 108, "fields": {"user": 97, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 109, "fields": {"user": 98, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 110, "fields": {"user": 99, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 111, "fields": {"user": 100, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 112, "fields": {"user": 101, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 113, "fields": {"user": 102, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 114, "fields": {"user": 103, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 115, "fields": {"user": 104, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 116, "fields": {"user": 105, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 117, "fields": {"user": 106, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 118, "fields": {"user": 107, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 119, "fields": {"user": 108, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 120, "fields": {"user": 109, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 121, "fields": {"user": 110, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 122, "fields": {"user": 111, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 123, "fields": {"user": 112, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 124, "fields": {"user": 113, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 125, "fields": {"user": 114, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 126, "fields": {"user": 115, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 127, "fields": {"user": 116, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 128, "fields": {"user": 117, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 129, "fields": {"user": 118, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 130, "fields": {"user": 119, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 131, "fields": {"user": 120, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 132, "fields": {"user": 121, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 133, "fields": {"user": 122, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 134, "fields": {"user": 123, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 135, "fields": {"user": 124, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 136, "fields": {"user": 125, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 137, "fields": {"user": 126, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 138, "fields": {"user": 127, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 139, "fields": {"user": 128, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 140, "fields": {"user": 129, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 141, "fields": {"user": 130, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 142, "fields": {"user": 131, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 143, "fields": {"user": 132, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 144, "fields": {"user": 133, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 145, "fields": {"user": 134, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 146, "fields": {"user": 135, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 147, "fields": {"user": 136, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 148, "fields": {"user": 137, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 149, "fields": {"user": 138, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 150, "fields": {"user": 139, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 151, "fields": {"user": 140, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 152, "fields": {"user": 141, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 153, "fields": {"user": 142, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 154, "fields": {"user": 143, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 155, "fields": {"user": 144, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 156, "fields": {"user": 145, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 157, "fields": {"user": 146, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 158, "fields": {"user": 147, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 159, "fields": {"user": 148, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 160, "fields": {"user": 149, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 161, "fields": {"user": 150, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 162, "fields": {"user": 151, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 163, "fields": {"user": 152, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 164, "fields": {"user": 153, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 165, "fields": {"user": 154, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 166, "fields": {"user": 155, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 167, "fields": {"user": 156, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 168, "fields": {"user": 157, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 169, "fields": {"user": 158, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 170, "fields": {"user": 159, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 171, "fields": {"user": 160, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 172, "fields": {"user": 161, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 173, "fields": {"user": 162, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 174, "fields": {"user": 163, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 175, "fields": {"user": 164, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 176, "fields": {"user": 165, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 177, "fields": {"user": 166, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 178, "fields": {"user": 167, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 179, "fields": {"user": 168, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 180, "fields": {"user": 169, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 181, "fields": {"user": 170, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 182, "fields": {"user": 171, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 183, "fields": {"user": 172, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 184, "fields": {"user": 173, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 185, "fields": {"user": 174, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 186, "fields": {"user": 175, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 187, "fields": {"user": 176, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 188, "fields": {"user": 177, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 189, "fields": {"user": 178, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 190, "fields": {"user": 179, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 191, "fields": {"user": 180, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 192, "fields": {"user": 181, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 193, "fields": {"user": 182, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 194, "fields": {"user": 183, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 195, "fields": {"user": 184, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 196, "fields": {"user": 185, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 197, "fields": {"user": 186, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 198, "fields": {"user": 187, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 199, "fields": {"user": 188, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 200, "fields": {"user": 189, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 201, "fields": {"user": 190, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 202, "fields": {"user": 191, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 203, "fields": {"user": 192, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 204, "fields": {"user": 193, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 205, "fields": {"user": 194, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 206, "fields": {"user": 195, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 207, "fields": {"user": 196, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 208, "fields": {"user": 197, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 209, "fields": {"user": 198, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 210, "fields": {"user": 199, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 211, "fields": {"user": 200, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 212, "fields": {"user": 201, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 213, "fields": {"user": 202, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 214, "fields": {"user": 203, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 215, "fields": {"user": 204, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 216, "fields": {"user": 205, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 217, "fields": {"user": 206, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 218, "fields": {"user": 207, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 219, "fields": {"user": 208, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 220, "fields": {"user": 209, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 221, "fields": {"user": 210, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 222, "fields": {"user": 211, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 223, "fields": {"user": 212, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 224, "fields": {"user": 213, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 225, "fields": {"user": 214, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 226, "fields": {"user": 215, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 227, "fields": {"user": 216, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 228, "fields": {"user": 217, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 229, "fields": {"user": 218, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 230, "fields": {"user": 219, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 231, "fields": {"user": 220, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 232, "fields": {"user": 221, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 233, "fields": {"user": 222, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 234, "fields": {"user": 223, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 235, "fields": {"user": 224, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 236, "fields": {"user": 225, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 237, "fields": {"user": 226, "course": 4, "batch": 7, "status": 1, "allowed_access": true, "date_enrollment": "2020-06-05", "finishing_date": null}}, {"model": "courses.enrollment", "pk": 238, "fields": {"user": 4, "course": 5, "batch": 8, "status": 2, "allowed_access": true, "date_enrollment": "2020-06-08", "finishing_date": null}}, {"model": "courses.collecttask", "pk": 15, "fields": {"user": 5, "section": 7, "file": 26, "status": 3, "note": "", "create_at": "2020-04-16T05:25:10.696Z", "update_at": "2020-04-16T05:25:10.799Z", "score": null}}, {"model": "courses.collecttask", "pk": 16, "fields": {"user": 5, "section": 8, "file": 27, "status": 3, "note": "", "create_at": "2020-04-16T05:25:10.696Z", "update_at": "2020-05-14T07:46:26.224Z", "score": null}}, {"model": "courses.collecttask", "pk": 17, "fields": {"user": 5, "section": 6, "file": 28, "status": 3, "note": "", "create_at": "2020-04-16T05:25:10.696Z", "update_at": "2020-05-14T07:46:28.602Z", "score": null}}, {"model": "courses.collecttask", "pk": 18, "fields": {"user": 4, "section": 6, "file": 29, "status": 3, "note": "", "create_at": "2020-05-08T03:05:14.421Z", "update_at": "2020-06-26T07:20:09.275Z", "score": null}}, {"model": "courses.collecttask", "pk": 19, "fields": {"user": 4, "section": 8, "file": 30, "status": 1, "note": null, "create_at": "2020-06-26T07:23:28.369Z", "update_at": "2020-06-26T07:23:28.369Z", "score": null}}, {"model": "courses.activity", "pk": 129, "fields": {"user": 4, "course": 5, "module": 7, "section": null, "created": "2020-06-26T08:31:21.435Z"}}, {"model": "courses.activity", "pk": 130, "fields": {"user": 4, "course": 5, "module": null, "section": 12, "created": "2020-06-26T08:32:58.838Z"}}, {"model": "courses.activity", "pk": 131, "fields": {"user": 4, "course": 5, "module": null, "section": 13, "created": "2020-06-26T08:33:09.549Z"}}, {"model": "courses.activity", "pk": 132, "fields": {"user": 4, "course": 5, "module": null, "section": 14, "created": "2020-06-26T08:33:30.349Z"}}, {"model": "courses.activity", "pk": 133, "fields": {"user": 4, "course": 4, "module": 5, "section": null, "created": "2020-06-26T08:33:36.164Z"}}, {"model": "courses.activity", "pk": 134, "fields": {"user": 4, "course": 4, "module": null, "section": 6, "created": "2020-06-26T08:33:43.699Z"}}, {"model": "courses.activity", "pk": 135, "fields": {"user": 4, "course": 4, "module": null, "section": 7, "created": "2020-06-26T08:33:52.659Z"}}, {"model": "courses.activity", "pk": 136, "fields": {"user": 4, "course": 4, "module": null, "section": 9, "created": "2020-06-26T08:34:05.948Z"}}, {"model": "courses.activity", "pk": 137, "fields": {"user": 4, "course": 4, "module": null, "section": 11, "created": "2020-06-26T08:34:17.755Z"}}, {"model": "courses.activity", "pk": 138, "fields": {"user": 4, "course": 4, "module": 6, "section": null, "created": "2020-06-26T08:34:24.653Z"}}, {"model": "courses.activity", "pk": 139, "fields": {"user": 4, "course": 4, "module": null, "section": 8, "created": "2020-06-26T08:34:27.468Z"}}, {"model": "courses.activity", "pk": 140, "fields": {"user": 4, "course": 4, "module": null, "section": 10, "created": "2020-06-26T08:34:29.421Z"}}, {"model": "courses.certsetting", "pk": 1, "fields": {"course": 4, "cert_title": "Red Hat OpenStack Administration I: Core Operations for Cloud Operators", "prefix_cert_number": "RHT", "static_date": "2020-05-14"}}]